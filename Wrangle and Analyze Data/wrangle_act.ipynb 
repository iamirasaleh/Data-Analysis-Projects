{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {
    "extensions": {
     "jupyter_dashboards": {
      "version": 1,
      "views": {
       "grid_default": {
        "col": 0,
        "height": 4,
        "hidden": false,
        "row": 0,
        "width": 4
       },
       "report_default": {
        "hidden": false
       }
      }
     }
    }
   },
   "source": [
    "# Project: Wrangling and Analyze Data"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Importing Libabries"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "import numpy as np\n",
    "import pandas as pd\n",
    "import matplotlib.pyplot as plt\n",
    "import seaborn as sns\n",
    "import requests\n",
    "import tweepy\n",
    "import json\n",
    "import re \n",
    "\n",
    "from tweepy import OAuthHandler\n",
    "import json\n",
    "from timeit import default_timer as timer"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Data Gathering\n",
    "In the cell below, gather **all** three pieces of data for this project and load them in the notebook. **Note:** the methods required to gather each data are different.\n",
    "1. Directly download the WeRateDogs Twitter archive data (twitter_archive_enhanced.csv)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {
    "extensions": {
     "jupyter_dashboards": {
      "version": 1,
      "views": {
       "grid_default": {
        "hidden": true
       },
       "report_default": {
        "hidden": true
       }
      }
     }
    }
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>tweet_id</th>\n",
       "      <th>in_reply_to_status_id</th>\n",
       "      <th>in_reply_to_user_id</th>\n",
       "      <th>timestamp</th>\n",
       "      <th>source</th>\n",
       "      <th>text</th>\n",
       "      <th>retweeted_status_id</th>\n",
       "      <th>retweeted_status_user_id</th>\n",
       "      <th>retweeted_status_timestamp</th>\n",
       "      <th>expanded_urls</th>\n",
       "      <th>rating_numerator</th>\n",
       "      <th>rating_denominator</th>\n",
       "      <th>name</th>\n",
       "      <th>doggo</th>\n",
       "      <th>floofer</th>\n",
       "      <th>pupper</th>\n",
       "      <th>puppo</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>892420643555336193</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>2017-08-01 16:23:56 +0000</td>\n",
       "      <td>&lt;a href=\"http://twitter.com/download/iphone\" r...</td>\n",
       "      <td>This is Phineas. He's a mystical boy. Only eve...</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>https://twitter.com/dog_rates/status/892420643...</td>\n",
       "      <td>13</td>\n",
       "      <td>10</td>\n",
       "      <td>Phineas</td>\n",
       "      <td>None</td>\n",
       "      <td>None</td>\n",
       "      <td>None</td>\n",
       "      <td>None</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "             tweet_id  in_reply_to_status_id  in_reply_to_user_id  \\\n",
       "0  892420643555336193                    NaN                  NaN   \n",
       "\n",
       "                   timestamp  \\\n",
       "0  2017-08-01 16:23:56 +0000   \n",
       "\n",
       "                                              source  \\\n",
       "0  <a href=\"http://twitter.com/download/iphone\" r...   \n",
       "\n",
       "                                                text  retweeted_status_id  \\\n",
       "0  This is Phineas. He's a mystical boy. Only eve...                  NaN   \n",
       "\n",
       "   retweeted_status_user_id retweeted_status_timestamp  \\\n",
       "0                       NaN                        NaN   \n",
       "\n",
       "                                       expanded_urls  rating_numerator  \\\n",
       "0  https://twitter.com/dog_rates/status/892420643...                13   \n",
       "\n",
       "   rating_denominator     name doggo floofer pupper puppo  \n",
       "0                  10  Phineas  None    None   None  None  "
      ]
     },
     "execution_count": 2,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_tweet = pd.read_csv('twitter-archive-enhanced.csv')\n",
    "df_tweet.head(1)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "2. Use the Requests library to download the tweet image prediction (image_predictions.tsv)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "335079"
      ]
     },
     "execution_count": 3,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Download the image prediction file using the link provided to Udacity students\n",
    "url = 'https://d17h27t6h515a5.cloudfront.net/topher/2017/August/599fd2ad_image-predictions/image-predictions.tsv'\n",
    "image_request = requests.get(url, allow_redirects=True)\n",
    "\n",
    "open('image_predictions.tsv', 'wb').write(image_request.content)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>tweet_id</th>\n",
       "      <th>jpg_url</th>\n",
       "      <th>img_num</th>\n",
       "      <th>p1</th>\n",
       "      <th>p1_conf</th>\n",
       "      <th>p1_dog</th>\n",
       "      <th>p2</th>\n",
       "      <th>p2_conf</th>\n",
       "      <th>p2_dog</th>\n",
       "      <th>p3</th>\n",
       "      <th>p3_conf</th>\n",
       "      <th>p3_dog</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>666020888022790149</td>\n",
       "      <td>https://pbs.twimg.com/media/CT4udn0WwAA0aMy.jpg</td>\n",
       "      <td>1</td>\n",
       "      <td>Welsh_springer_spaniel</td>\n",
       "      <td>0.465074</td>\n",
       "      <td>True</td>\n",
       "      <td>collie</td>\n",
       "      <td>0.156665</td>\n",
       "      <td>True</td>\n",
       "      <td>Shetland_sheepdog</td>\n",
       "      <td>0.061428</td>\n",
       "      <td>True</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "             tweet_id                                          jpg_url  \\\n",
       "0  666020888022790149  https://pbs.twimg.com/media/CT4udn0WwAA0aMy.jpg   \n",
       "\n",
       "   img_num                      p1   p1_conf  p1_dog      p2   p2_conf  \\\n",
       "0        1  Welsh_springer_spaniel  0.465074    True  collie  0.156665   \n",
       "\n",
       "   p2_dog                 p3   p3_conf  p3_dog  \n",
       "0    True  Shetland_sheepdog  0.061428    True  "
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Show the data\n",
    "df_images = pd.read_csv('image_predictions.tsv', sep = '\\t')\n",
    "df_images.head(1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [],
   "source": [
    "auth = tweepy.OAuthHandler('5Uur0mo4ol2kB8yhtZ1VxXS0u', 'h8E7fSpXWiMoBel7G1ZOAeu4Mgru0v0MtxH5ehYE1RKM89SiBH')\n",
    "auth.set_access_token('303562412-ct9aNnU0FQR0UKJVn1i1W3Y8omqSewiQWUcRaygB', 'D3qslrbdOU5fqTOp951kOIuZbkeTPBodnjNYoEGFR63Ft')\n",
    "api = tweepy.API(auth, \n",
    "                 parser = tweepy.parsers.JSONParser(), \n",
    "                 wait_on_rate_limit = True)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "3. Use the Tweepy library to query additional data via the Twitter API (tweet_json.txt)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [],
   "source": [
    "CONSUMER_KEY = \"CONSUMER_KEY\"\n",
    "CONSUMER_SECRET = \"CONSUMER_SECRET\"\n",
    "access_token_key = \"access_token_key\"\n",
    "ACCESS_TOKEN_SECRET = \"ACCESS_TOKEN_SECRET\"\n",
    "\n",
    "# Create an OAuthHandler instance\n",
    "auth = tweepy.OAuthHandler(CONSUMER_KEY, CONSUMER_SECRET)\n",
    "auth.set_access_token(access_token_key, ACCESS_TOKEN_SECRET)\n",
    "\n",
    "api = tweepy.API(auth, \n",
    "                 parser = tweepy.parsers.JSONParser(), \n",
    "                 wait_on_rate_limit = True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "1: 892420643555336193\n",
      "Fail\n",
      "2: 892177421306343426\n",
      "Fail\n",
      "3: 891815181378084864\n",
      "Fail\n",
      "4: 891689557279858688\n",
      "Fail\n",
      "5: 891327558926688256\n",
      "Fail\n",
      "6: 891087950875897856\n",
      "Fail\n",
      "7: 890971913173991426\n",
      "Fail\n",
      "8: 890729181411237888\n",
      "Fail\n",
      "9: 890609185150312448\n",
      "Fail\n",
      "10: 890240255349198849\n",
      "Fail\n",
      "11: 890006608113172480\n",
      "Fail\n",
      "12: 889880896479866881\n",
      "Fail\n",
      "13: 889665388333682689\n",
      "Fail\n",
      "14: 889638837579907072\n",
      "Fail\n",
      "15: 889531135344209921\n",
      "Fail\n",
      "16: 889278841981685760\n",
      "Fail\n",
      "17: 888917238123831296\n",
      "Fail\n",
      "18: 888804989199671297\n",
      "Fail\n",
      "19: 888554962724278272\n",
      "Fail\n",
      "20: 888202515573088257\n",
      "Fail\n",
      "21: 888078434458587136\n",
      "Fail\n",
      "22: 887705289381826560\n",
      "Fail\n",
      "23: 887517139158093824\n",
      "Fail\n",
      "24: 887473957103951883\n",
      "Fail\n",
      "25: 887343217045368832\n",
      "Fail\n",
      "26: 887101392804085760\n",
      "Fail\n",
      "27: 886983233522544640\n",
      "Fail\n",
      "28: 886736880519319552\n",
      "Fail\n",
      "29: 886680336477933568\n",
      "Fail\n",
      "30: 886366144734445568\n",
      "Fail\n",
      "31: 886267009285017600\n",
      "Fail\n",
      "32: 886258384151887873\n",
      "Fail\n",
      "33: 886054160059072513\n",
      "Fail\n",
      "34: 885984800019947520\n",
      "Fail\n",
      "35: 885528943205470208\n",
      "Fail\n",
      "36: 885518971528720385\n",
      "Fail\n",
      "37: 885311592912609280\n",
      "Fail\n",
      "38: 885167619883638784\n",
      "Fail\n",
      "39: 884925521741709313\n",
      "Fail\n",
      "40: 884876753390489601\n",
      "Fail\n",
      "41: 884562892145688576\n",
      "Fail\n",
      "42: 884441805382717440\n",
      "Fail\n",
      "43: 884247878851493888\n",
      "Fail\n",
      "44: 884162670584377345\n",
      "Fail\n",
      "45: 883838122936631299\n",
      "Fail\n",
      "46: 883482846933004288\n",
      "Fail\n",
      "47: 883360690899218434\n",
      "Fail\n",
      "48: 883117836046086144\n",
      "Fail\n",
      "49: 882992080364220416\n",
      "Fail\n",
      "50: 882762694511734784\n",
      "Fail\n",
      "51: 882627270321602560\n",
      "Fail\n",
      "52: 882268110199369728\n",
      "Fail\n",
      "53: 882045870035918850\n",
      "Fail\n",
      "54: 881906580714921986\n",
      "Fail\n",
      "55: 881666595344535552\n",
      "Fail\n",
      "56: 881633300179243008\n",
      "Fail\n",
      "57: 881536004380872706\n",
      "Fail\n",
      "58: 881268444196462592\n",
      "Fail\n",
      "59: 880935762899988482\n",
      "Fail\n",
      "60: 880872448815771648\n",
      "Fail\n",
      "61: 880465832366813184\n",
      "Fail\n",
      "62: 880221127280381952\n",
      "Fail\n",
      "63: 880095782870896641\n",
      "Fail\n",
      "64: 879862464715927552\n",
      "Fail\n",
      "65: 879674319642796034\n",
      "Fail\n",
      "66: 879492040517615616\n",
      "Fail\n",
      "67: 879415818425184262\n",
      "Fail\n",
      "68: 879376492567855104\n",
      "Fail\n",
      "69: 879130579576475649\n",
      "Fail\n",
      "70: 879050749262655488\n",
      "Fail\n",
      "71: 879008229531029506\n",
      "Fail\n",
      "72: 878776093423087618\n",
      "Fail\n",
      "73: 878604707211726852\n",
      "Fail\n",
      "74: 878404777348136964\n",
      "Fail\n",
      "75: 878316110768087041\n",
      "Fail\n",
      "76: 878281511006478336\n",
      "Fail\n",
      "77: 878057613040115712\n",
      "Fail\n",
      "78: 877736472329191424\n",
      "Fail\n",
      "79: 877611172832227328\n",
      "Fail\n",
      "80: 877556246731214848\n",
      "Fail\n",
      "81: 877316821321428993\n",
      "Fail\n",
      "82: 877201837425926144\n",
      "Fail\n",
      "83: 876838120628539392\n",
      "Fail\n",
      "84: 876537666061221889\n",
      "Fail\n",
      "85: 876484053909872640\n",
      "Fail\n",
      "86: 876120275196170240\n",
      "Fail\n",
      "87: 875747767867523072\n",
      "Fail\n",
      "88: 875144289856114688\n",
      "Fail\n",
      "89: 875097192612077568\n",
      "Fail\n",
      "90: 875021211251597312\n",
      "Fail\n",
      "91: 874680097055178752\n",
      "Fail\n",
      "92: 874434818259525634\n",
      "Fail\n",
      "93: 874296783580663808\n",
      "Fail\n",
      "94: 874057562936811520\n",
      "Fail\n",
      "95: 874012996292530176\n",
      "Fail\n",
      "96: 873697596434513921\n",
      "Fail\n",
      "97: 873580283840344065\n",
      "Fail\n",
      "98: 873337748698140672\n",
      "Fail\n",
      "99: 873213775632977920\n",
      "Fail\n",
      "100: 872967104147763200\n",
      "Fail\n",
      "101: 872820683541237760\n",
      "Fail\n",
      "102: 872668790621863937\n",
      "Fail\n",
      "103: 872620804844003328\n",
      "Fail\n",
      "104: 872486979161796608\n",
      "Fail\n",
      "105: 872261713294495745\n",
      "Fail\n",
      "106: 872122724285648897\n",
      "Fail\n",
      "107: 871879754684805121\n",
      "Fail\n",
      "108: 871762521631449091\n",
      "Fail\n",
      "109: 871515927908634625\n",
      "Fail\n",
      "110: 871166179821445120\n",
      "Fail\n",
      "111: 871102520638267392\n",
      "Fail\n",
      "112: 871032628920680449\n",
      "Fail\n",
      "113: 870804317367881728\n",
      "Fail\n",
      "114: 870726314365509632\n",
      "Fail\n",
      "115: 870656317836468226\n",
      "Fail\n",
      "116: 870374049280663552\n",
      "Fail\n",
      "117: 870308999962521604\n",
      "Fail\n",
      "118: 870063196459192321\n",
      "Fail\n",
      "119: 869988702071779329\n",
      "Fail\n",
      "120: 869772420881756160\n",
      "Fail\n",
      "121: 869702957897576449\n",
      "Fail\n",
      "122: 869596645499047938\n",
      "Fail\n",
      "123: 869227993411051520\n",
      "Fail\n",
      "124: 868880397819494401\n",
      "Fail\n",
      "125: 868639477480148993\n",
      "Fail\n",
      "126: 868622495443632128\n",
      "Fail\n",
      "127: 868552278524837888\n",
      "Fail\n",
      "128: 867900495410671616\n",
      "Fail\n",
      "129: 867774946302451713\n",
      "Fail\n",
      "130: 867421006826221569\n",
      "Fail\n",
      "131: 867072653475098625\n",
      "Fail\n",
      "132: 867051520902168576\n",
      "Fail\n",
      "133: 866816280283807744\n",
      "Fail\n",
      "134: 866720684873056260\n",
      "Fail\n",
      "135: 866686824827068416\n",
      "Fail\n",
      "136: 866450705531457537\n",
      "Fail\n",
      "137: 866334964761202691\n",
      "Fail\n",
      "138: 866094527597207552\n",
      "Fail\n",
      "139: 865718153858494464\n",
      "Fail\n",
      "140: 865359393868664832\n",
      "Fail\n",
      "141: 865006731092295680\n",
      "Fail\n",
      "142: 864873206498414592\n",
      "Fail\n",
      "143: 864279568663928832\n",
      "Fail\n",
      "144: 864197398364647424\n",
      "Fail\n",
      "145: 863907417377173506\n",
      "Fail\n",
      "146: 863553081350529029\n",
      "Fail\n",
      "147: 863471782782697472\n",
      "Fail\n",
      "148: 863432100342583297\n",
      "Fail\n",
      "149: 863427515083354112\n",
      "Fail\n",
      "150: 863079547188785154\n",
      "Fail\n",
      "151: 863062471531167744\n",
      "Fail\n",
      "152: 862831371563274240\n",
      "Fail\n",
      "153: 862722525377298433\n",
      "Fail\n",
      "154: 862457590147678208\n",
      "Fail\n",
      "155: 862096992088072192\n",
      "Fail\n",
      "156: 861769973181624320\n",
      "Fail\n",
      "157: 861383897657036800\n",
      "Fail\n",
      "158: 861288531465048066\n",
      "Fail\n",
      "159: 861005113778896900\n",
      "Fail\n",
      "160: 860981674716409858\n",
      "Fail\n",
      "161: 860924035999428608\n",
      "Fail\n",
      "162: 860563773140209665\n",
      "Fail\n",
      "163: 860524505164394496\n",
      "Fail\n",
      "164: 860276583193509888\n",
      "Fail\n",
      "165: 860184849394610176\n",
      "Fail\n",
      "166: 860177593139703809\n",
      "Fail\n",
      "167: 859924526012018688\n",
      "Fail\n",
      "168: 859851578198683649\n",
      "Fail\n",
      "169: 859607811541651456\n",
      "Fail\n",
      "170: 859196978902773760\n",
      "Fail\n",
      "171: 859074603037188101\n",
      "Fail\n",
      "172: 858860390427611136\n",
      "Fail\n",
      "173: 858843525470990336\n",
      "Fail\n",
      "174: 858471635011153920\n",
      "Fail\n",
      "175: 858107933456039936\n",
      "Fail\n",
      "176: 857989990357356544\n",
      "Fail\n",
      "177: 857746408056729600\n",
      "Fail\n",
      "178: 857393404942143489\n",
      "Fail\n",
      "179: 857263160327368704\n",
      "Fail\n",
      "180: 857214891891077121\n",
      "Fail\n",
      "181: 857062103051644929\n",
      "Fail\n",
      "182: 857029823797047296\n",
      "Fail\n",
      "183: 856602993587888130\n",
      "Fail\n",
      "184: 856543823941562368\n",
      "Fail\n",
      "185: 856526610513747968\n",
      "Fail\n",
      "186: 856330835276025856\n",
      "Fail\n",
      "187: 856288084350160898\n",
      "Fail\n",
      "188: 856282028240666624\n",
      "Fail\n",
      "189: 855862651834028034\n",
      "Fail\n",
      "190: 855860136149123072\n",
      "Fail\n",
      "191: 855857698524602368\n",
      "Fail\n",
      "192: 855851453814013952\n",
      "Fail\n",
      "193: 855818117272018944\n",
      "Fail\n",
      "194: 855459453768019968\n",
      "Fail\n",
      "195: 855245323840757760\n",
      "Fail\n",
      "196: 855138241867124737\n",
      "Fail\n",
      "197: 854732716440526848\n",
      "Fail\n",
      "198: 854482394044301312\n",
      "Fail\n",
      "199: 854365224396361728\n",
      "Fail\n",
      "200: 854120357044912130\n",
      "Fail\n",
      "201: 854010172552949760\n",
      "Fail\n",
      "202: 853760880890318849\n",
      "Fail\n",
      "203: 853639147608842240\n",
      "Fail\n",
      "204: 853299958564483072\n",
      "Fail\n",
      "205: 852936405516943360\n",
      "Fail\n",
      "206: 852912242202992640\n",
      "Fail\n",
      "207: 852672615818899456\n",
      "Fail\n",
      "208: 852553447878664193\n",
      "Fail\n",
      "209: 852311364735569921\n",
      "Fail\n",
      "210: 852226086759018497\n",
      "Fail\n",
      "211: 852189679701164033\n",
      "Fail\n",
      "212: 851953902622658560\n",
      "Fail\n",
      "213: 851861385021730816\n",
      "Fail\n",
      "214: 851591660324737024\n",
      "Fail\n",
      "215: 851464819735769094\n",
      "Fail\n",
      "216: 851224888060895234\n",
      "Fail\n",
      "217: 850753642995093505\n",
      "Fail\n",
      "218: 850380195714523136\n",
      "Fail\n",
      "219: 850333567704068097\n",
      "Fail\n",
      "220: 850145622816686080\n",
      "Fail\n",
      "221: 850019790995546112\n",
      "Fail\n",
      "222: 849776966551130114\n",
      "Fail\n",
      "223: 849668094696017920\n",
      "Fail\n",
      "224: 849412302885593088\n",
      "Fail\n",
      "225: 849336543269576704\n",
      "Fail\n",
      "226: 849051919805034497\n",
      "Fail\n",
      "227: 848690551926992896\n",
      "Fail\n",
      "228: 848324959059550208\n",
      "Fail\n",
      "229: 848213670039564288\n",
      "Fail\n",
      "230: 848212111729840128\n",
      "Fail\n",
      "231: 847978865427394560\n",
      "Fail\n",
      "232: 847971574464610304\n",
      "Fail\n",
      "233: 847962785489326080\n",
      "Fail\n",
      "234: 847842811428974592\n",
      "Fail\n",
      "235: 847617282490613760\n",
      "Fail\n",
      "236: 847606175596138505\n",
      "Fail\n",
      "237: 847251039262605312\n",
      "Fail\n",
      "238: 847157206088847362\n",
      "Fail\n",
      "239: 847116187444137987\n",
      "Fail\n",
      "240: 846874817362120707\n",
      "Fail\n",
      "241: 846514051647705089\n",
      "Fail\n",
      "242: 846505985330044928\n",
      "Fail\n",
      "243: 846153765933735936\n",
      "Fail\n",
      "244: 846139713627017216\n",
      "Fail\n",
      "245: 846042936437604353\n",
      "Fail\n",
      "246: 845812042753855489\n",
      "Fail\n",
      "247: 845677943972139009\n",
      "Fail\n",
      "248: 845459076796616705\n",
      "Fail\n",
      "249: 845397057150107648\n",
      "Fail\n",
      "250: 845306882940190720\n",
      "Fail\n",
      "251: 845098359547420673\n",
      "Fail\n",
      "252: 844979544864018432\n",
      "Fail\n",
      "253: 844973813909606400\n",
      "Fail\n",
      "254: 844704788403113984\n",
      "Fail\n",
      "255: 844580511645339650\n",
      "Fail\n",
      "256: 844223788422217728\n",
      "Fail\n",
      "257: 843981021012017153\n",
      "Fail\n",
      "258: 843856843873095681\n",
      "Fail\n",
      "259: 843604394117681152\n",
      "Fail\n",
      "260: 843235543001513987\n",
      "Fail\n",
      "261: 842892208864923648\n",
      "Fail\n",
      "262: 842846295480000512\n",
      "Fail\n",
      "263: 842765311967449089\n",
      "Fail\n",
      "264: 842535590457499648\n",
      "Fail\n",
      "265: 842163532590374912\n",
      "Fail\n",
      "266: 842115215311396866\n",
      "Fail\n",
      "267: 841833993020538882\n",
      "Fail\n",
      "268: 841680585030541313\n",
      "Fail\n",
      "269: 841439858740625411\n",
      "Fail\n",
      "270: 841320156043304961\n",
      "Fail\n",
      "271: 841314665196081154\n",
      "Fail\n",
      "272: 841077006473256960\n",
      "Fail\n",
      "273: 840761248237133825\n",
      "Fail\n",
      "274: 840728873075638272\n",
      "Fail\n",
      "275: 840698636975636481\n",
      "Fail\n",
      "276: 840696689258311684\n",
      "Fail\n",
      "277: 840632337062862849\n",
      "Fail\n",
      "278: 840370681858686976\n",
      "Fail\n",
      "279: 840268004936019968\n",
      "Fail\n",
      "280: 839990271299457024\n",
      "Fail\n",
      "281: 839549326359670784\n",
      "Fail\n",
      "282: 839290600511926273\n",
      "Fail\n",
      "283: 839239871831150596\n",
      "Fail\n",
      "284: 838952994649550848\n",
      "Fail\n",
      "285: 838921590096166913\n",
      "Fail\n",
      "286: 838916489579200512\n",
      "Fail\n",
      "287: 838831947270979586\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Fail\n",
      "288: 838561493054533637\n",
      "Fail\n",
      "289: 838476387338051585\n",
      "Fail\n",
      "290: 838201503651401729\n",
      "Fail\n",
      "291: 838150277551247360\n",
      "Fail\n",
      "292: 838085839343206401\n",
      "Fail\n",
      "293: 838083903487373313\n",
      "Fail\n",
      "294: 837820167694528512\n",
      "Fail\n",
      "295: 837482249356513284\n",
      "Fail\n",
      "296: 837471256429613056\n",
      "Fail\n",
      "297: 837366284874571778\n",
      "Fail\n",
      "298: 837110210464448512\n",
      "Fail\n",
      "299: 837012587749474308\n",
      "Fail\n",
      "300: 836989968035819520\n",
      "Fail\n",
      "301: 836753516572119041\n",
      "Fail\n",
      "302: 836677758902222849\n",
      "Fail\n",
      "303: 836648853927522308\n",
      "Fail\n",
      "304: 836397794269200385\n",
      "Fail\n",
      "305: 836380477523124226\n",
      "Fail\n",
      "306: 836260088725786625\n",
      "Fail\n",
      "307: 836001077879255040\n",
      "Fail\n",
      "308: 835685285446955009\n",
      "Fail\n",
      "309: 835574547218894849\n",
      "Fail\n",
      "310: 835536468978302976\n",
      "Fail\n",
      "311: 835309094223372289\n",
      "Fail\n",
      "312: 835297930240217089\n",
      "Fail\n",
      "313: 835264098648616962\n",
      "Fail\n",
      "314: 835246439529840640\n",
      "Fail\n",
      "315: 835172783151792128\n",
      "Fail\n",
      "316: 835152434251116546\n",
      "Fail\n",
      "317: 834931633769889797\n",
      "Fail\n",
      "318: 834786237630337024\n",
      "Fail\n",
      "319: 834574053763584002\n",
      "Fail\n",
      "320: 834477809192075265\n",
      "Fail\n",
      "321: 834458053273591808\n",
      "Fail\n",
      "322: 834209720923721728\n",
      "Fail\n",
      "323: 834167344700198914\n",
      "Fail\n",
      "324: 834089966724603904\n",
      "Fail\n",
      "325: 834086379323871233\n",
      "Fail\n",
      "326: 833863086058651648\n",
      "Fail\n",
      "327: 833826103416520705\n",
      "Fail\n",
      "328: 833732339549220864\n",
      "Fail\n",
      "329: 833722901757046785\n",
      "Fail\n",
      "330: 833479644947025920\n",
      "Fail\n",
      "331: 833124694597443584\n",
      "Fail\n",
      "332: 832998151111966721\n",
      "Fail\n",
      "333: 832769181346996225\n",
      "Fail\n",
      "334: 832757312314028032\n",
      "Fail\n",
      "335: 832682457690300417\n",
      "Fail\n",
      "336: 832645525019123713\n",
      "Fail\n",
      "337: 832636094638288896\n",
      "Fail\n",
      "338: 832397543355072512\n",
      "Fail\n",
      "339: 832369877331693569\n",
      "Fail\n",
      "340: 832273440279240704\n",
      "Fail\n",
      "341: 832215909146226688\n",
      "Fail\n",
      "342: 832215726631055365\n",
      "Fail\n",
      "343: 832088576586297345\n",
      "Fail\n",
      "344: 832040443403784192\n",
      "Fail\n",
      "345: 832032802820481025\n",
      "Fail\n",
      "346: 831939777352105988\n",
      "Fail\n",
      "347: 831926988323639298\n",
      "Fail\n",
      "348: 831911600680497154\n",
      "Fail\n",
      "349: 831670449226514432\n",
      "Fail\n",
      "350: 831650051525054464\n",
      "Fail\n",
      "351: 831552930092285952\n",
      "Fail\n",
      "352: 831322785565769729\n",
      "Fail\n",
      "353: 831315979191906304\n",
      "Fail\n",
      "354: 831309418084069378\n",
      "Fail\n",
      "355: 831262627380748289\n",
      "Fail\n",
      "356: 830956169170665475\n",
      "Fail\n",
      "357: 830583320585068544\n",
      "Fail\n",
      "358: 830173239259324417\n",
      "Fail\n",
      "359: 830097400375152640\n",
      "Fail\n",
      "360: 829878982036299777\n",
      "Fail\n",
      "361: 829861396166877184\n",
      "Fail\n",
      "362: 829501995190984704\n",
      "Fail\n",
      "363: 829449946868879360\n",
      "Fail\n",
      "364: 829374341691346946\n",
      "Fail\n",
      "365: 829141528400556032\n",
      "Fail\n",
      "366: 829011960981237760\n",
      "Fail\n",
      "367: 828801551087042563\n",
      "Fail\n",
      "368: 828770345708580865\n",
      "Fail\n",
      "369: 828708714936930305\n",
      "Fail\n",
      "370: 828650029636317184\n",
      "Fail\n",
      "371: 828409743546925057\n",
      "Fail\n",
      "372: 828408677031882754\n",
      "Fail\n",
      "373: 828381636999917570\n",
      "Fail\n",
      "374: 828376505180889089\n",
      "Fail\n",
      "375: 828372645993398273\n",
      "Fail\n",
      "376: 828361771580813312\n",
      "Fail\n",
      "377: 828046555563323392\n",
      "Fail\n",
      "378: 828011680017821696\n",
      "Fail\n",
      "379: 827933404142436356\n",
      "Fail\n",
      "380: 827653905312006145\n",
      "Fail\n",
      "381: 827600520311402496\n",
      "Fail\n",
      "382: 827324948884643840\n",
      "Fail\n",
      "383: 827228250799742977\n",
      "Fail\n",
      "384: 827199976799354881\n",
      "Fail\n",
      "385: 826958653328592898\n",
      "Fail\n",
      "386: 826848821049180160\n",
      "Fail\n",
      "387: 826615380357632002\n",
      "Fail\n",
      "388: 826598799820865537\n",
      "Fail\n",
      "389: 826598365270007810\n",
      "Fail\n",
      "390: 826476773533745153\n",
      "Fail\n",
      "391: 826240494070030336\n",
      "Fail\n",
      "392: 826204788643753985\n",
      "Fail\n",
      "393: 826115272272650244\n",
      "Fail\n",
      "394: 825876512159186944\n",
      "Fail\n",
      "395: 825829644528148480\n",
      "Fail\n",
      "396: 825535076884762624\n",
      "Fail\n",
      "397: 825147591692263424\n",
      "Fail\n",
      "398: 825120256414846976\n",
      "Fail\n",
      "399: 825026590719483904\n",
      "Fail\n",
      "400: 824796380199809024\n",
      "Fail\n",
      "401: 824775126675836928\n",
      "Fail\n",
      "402: 824663926340194305\n",
      "Fail\n",
      "403: 824325613288833024\n",
      "Fail\n",
      "404: 824297048279236611\n",
      "Fail\n",
      "405: 824025158776213504\n",
      "Fail\n",
      "406: 823939628516474880\n",
      "Fail\n",
      "407: 823719002937630720\n",
      "Fail\n",
      "408: 823699002998870016\n",
      "Fail\n",
      "409: 823581115634085888\n",
      "Fail\n",
      "410: 823333489516937216\n",
      "Fail\n",
      "411: 823322678127919110\n",
      "Fail\n",
      "412: 823269594223824897\n",
      "Fail\n",
      "413: 822975315408461824\n",
      "Fail\n",
      "414: 822872901745569793\n",
      "Fail\n",
      "415: 822859134160621569\n",
      "Fail\n",
      "416: 822647212903690241\n",
      "Fail\n",
      "417: 822610361945911296\n",
      "Fail\n",
      "418: 822489057087389700\n",
      "Fail\n",
      "419: 822462944365645825\n",
      "Fail\n",
      "420: 822244816520155136\n",
      "Fail\n",
      "421: 822163064745328640\n",
      "Fail\n",
      "422: 821886076407029760\n",
      "Fail\n",
      "423: 821813639212650496\n",
      "Fail\n",
      "424: 821765923262631936\n",
      "Fail\n",
      "425: 821522889702862852\n",
      "Fail\n",
      "426: 821421320206483457\n",
      "Fail\n",
      "427: 821407182352777218\n",
      "Fail\n",
      "428: 821153421864615936\n",
      "Fail\n",
      "429: 821149554670182400\n",
      "Fail\n",
      "430: 821107785811234820\n",
      "Fail\n",
      "431: 821044531881721856\n",
      "Fail\n",
      "432: 820837357901512704\n",
      "Fail\n",
      "433: 820749716845686786\n",
      "Fail\n",
      "434: 820690176645140481\n",
      "Fail\n",
      "435: 820494788566847489\n",
      "Fail\n",
      "436: 820446719150292993\n",
      "Fail\n",
      "437: 820314633777061888\n",
      "Fail\n",
      "438: 820078625395449857\n",
      "Fail\n",
      "439: 820013781606658049\n",
      "Fail\n",
      "440: 819952236453363712\n",
      "Fail\n",
      "441: 819924195358416896\n",
      "Fail\n",
      "442: 819711362133872643\n",
      "Fail\n",
      "443: 819588359383371776\n",
      "Fail\n",
      "444: 819347104292290561\n",
      "Fail\n",
      "445: 819238181065359361\n",
      "Fail\n",
      "446: 819227688460238848\n",
      "Fail\n",
      "447: 819015337530290176\n",
      "Fail\n",
      "448: 819015331746349057\n",
      "Fail\n",
      "449: 819006400881917954\n",
      "Fail\n",
      "450: 819004803107983360\n",
      "Fail\n",
      "451: 818646164899774465\n",
      "Fail\n",
      "452: 818627210458333184\n",
      "Fail\n",
      "453: 818614493328580609\n",
      "Fail\n",
      "454: 818588835076603904\n",
      "Fail\n",
      "455: 818536468981415936\n",
      "Fail\n",
      "456: 818307523543449600\n",
      "Fail\n",
      "457: 818259473185828864\n",
      "Fail\n",
      "458: 818145370475810820\n",
      "Fail\n",
      "459: 817908911860748288\n",
      "Fail\n",
      "460: 817827839487737858\n",
      "Fail\n",
      "461: 817777686764523521\n",
      "Fail\n",
      "462: 817536400337801217\n",
      "Fail\n",
      "463: 817502432452313088\n",
      "Fail\n",
      "464: 817423860136083457\n",
      "Fail\n",
      "465: 817415592588222464\n",
      "Fail\n",
      "466: 817181837579653120\n",
      "Fail\n",
      "467: 817171292965273600\n",
      "Fail\n",
      "468: 817120970343411712\n",
      "Fail\n",
      "469: 817056546584727552\n",
      "Fail\n",
      "470: 816829038950027264\n",
      "Fail\n",
      "471: 816816676327063552\n",
      "Fail\n",
      "472: 816697700272001025\n",
      "Fail\n",
      "473: 816450570814898180\n",
      "Fail\n",
      "474: 816336735214911488\n",
      "Fail\n",
      "475: 816091915477250048\n",
      "Fail\n",
      "476: 816062466425819140\n",
      "Fail\n",
      "477: 816014286006976512\n",
      "Fail\n",
      "478: 815990720817401858\n",
      "Fail\n",
      "479: 815966073409433600\n",
      "Fail\n",
      "480: 815745968457060357\n",
      "Fail\n",
      "481: 815736392542261248\n",
      "Fail\n",
      "482: 815639385530101762\n",
      "Fail\n",
      "483: 815390420867969024\n",
      "Fail\n",
      "484: 814986499976527872\n",
      "Fail\n",
      "485: 814638523311648768\n",
      "Fail\n",
      "486: 814578408554463233\n",
      "Fail\n",
      "487: 814530161257443328\n",
      "Fail\n",
      "488: 814153002265309185\n",
      "Fail\n",
      "489: 813944609378369540\n",
      "Fail\n",
      "490: 813910438903693312\n",
      "Fail\n",
      "491: 813812741911748608\n",
      "Fail\n",
      "492: 813800681631023104\n",
      "Fail\n",
      "493: 813217897535406080\n",
      "Fail\n",
      "494: 813202720496779264\n",
      "Fail\n",
      "495: 813187593374461952\n",
      "Fail\n",
      "496: 813172488309972993\n",
      "Fail\n",
      "497: 813157409116065792\n",
      "Fail\n",
      "498: 813142292504645637\n",
      "Fail\n",
      "499: 813130366689148928\n",
      "Fail\n",
      "500: 813127251579564032\n",
      "Fail\n",
      "501: 813112105746448384\n",
      "Fail\n",
      "502: 813096984823349248\n",
      "Fail\n",
      "503: 813081950185472002\n",
      "Fail\n",
      "504: 813066809284972545\n",
      "Fail\n",
      "505: 813051746834595840\n",
      "Fail\n",
      "506: 812781120811126785\n",
      "Fail\n",
      "507: 812747805718642688\n",
      "Fail\n",
      "508: 812709060537683968\n",
      "Fail\n",
      "509: 812503143955202048\n",
      "Fail\n",
      "510: 812466873996607488\n",
      "Fail\n",
      "511: 812372279581671427\n",
      "Fail\n",
      "512: 811985624773361665\n",
      "Fail\n",
      "513: 811744202451197953\n",
      "Fail\n",
      "514: 811647686436880384\n",
      "Fail\n",
      "515: 811627233043480576\n",
      "Fail\n",
      "516: 811386762094317568\n",
      "Fail\n",
      "517: 810984652412424192\n",
      "Fail\n",
      "518: 810896069567610880\n",
      "Fail\n",
      "519: 810657578271330305\n",
      "Fail\n",
      "520: 810284430598270976\n",
      "Fail\n",
      "521: 810254108431155201\n",
      "Fail\n",
      "522: 809920764300447744\n",
      "Fail\n",
      "523: 809808892968534016\n",
      "Fail\n",
      "524: 809448704142938112\n",
      "Fail\n",
      "525: 809220051211603969\n",
      "Fail\n",
      "526: 809084759137812480\n",
      "Fail\n",
      "527: 808838249661788160\n",
      "Fail\n",
      "528: 808733504066486276\n",
      "Fail\n",
      "529: 808501579447930884\n",
      "Fail\n",
      "530: 808344865868283904\n",
      "Fail\n",
      "531: 808134635716833280\n",
      "Fail\n",
      "532: 808106460588765185\n",
      "Fail\n",
      "533: 808001312164028416\n",
      "Fail\n",
      "534: 807621403335917568\n",
      "Fail\n",
      "535: 807106840509214720\n",
      "Fail\n",
      "536: 807059379405148160\n",
      "Fail\n",
      "537: 807010152071229440\n",
      "Fail\n",
      "538: 806629075125202948\n",
      "Fail\n",
      "539: 806620845233815552\n",
      "Fail\n",
      "540: 806576416489959424\n",
      "Fail\n",
      "541: 806542213899489280\n",
      "Fail\n",
      "542: 806242860592926720\n",
      "Fail\n",
      "543: 806219024703037440\n",
      "Fail\n",
      "544: 805958939288408065\n",
      "Fail\n",
      "545: 805932879469572096\n",
      "Fail\n",
      "546: 805826884734976000\n",
      "Fail\n",
      "547: 805823200554876929\n",
      "Fail\n",
      "548: 805520635690676224\n",
      "Fail\n",
      "549: 805487436403003392\n",
      "Fail\n",
      "550: 805207613751304193\n",
      "Fail\n",
      "551: 804738756058218496\n",
      "Fail\n",
      "552: 804475857670639616\n",
      "Fail\n",
      "553: 804413760345620481\n",
      "Fail\n",
      "554: 804026241225523202\n",
      "Fail\n",
      "555: 803773340896923648\n",
      "Fail\n",
      "556: 803692223237865472\n",
      "Fail\n",
      "557: 803638050916102144\n",
      "Fail\n",
      "558: 803380650405482500\n",
      "Fail\n",
      "559: 803321560782307329\n",
      "Fail\n",
      "560: 803276597545603072\n",
      "Fail\n",
      "561: 802952499103731712\n",
      "Fail\n",
      "562: 802624713319034886\n",
      "Fail\n",
      "563: 802600418706604034\n",
      "Fail\n",
      "564: 802572683846291456\n",
      "Fail\n",
      "565: 802323869084381190\n",
      "Fail\n",
      "566: 802265048156610565\n",
      "Fail\n",
      "567: 802247111496568832\n",
      "Fail\n",
      "568: 802239329049477120\n",
      "Fail\n",
      "569: 802185808107208704\n",
      "Fail\n",
      "570: 801958328846974976\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Fail\n",
      "571: 801854953262350336\n",
      "Fail\n",
      "572: 801538201127157760\n",
      "Fail\n",
      "573: 801285448605831168\n",
      "Fail\n",
      "574: 801167903437357056\n",
      "Fail\n",
      "575: 801127390143516673\n",
      "Fail\n",
      "576: 801115127852503040\n",
      "Fail\n",
      "577: 800859414831898624\n",
      "Fail\n",
      "578: 800855607700029440\n",
      "Fail\n",
      "579: 800751577355128832\n",
      "Fail\n",
      "580: 800513324630806528\n",
      "Fail\n",
      "581: 800459316964663297\n",
      "Fail\n",
      "582: 800443802682937345\n",
      "Fail\n",
      "583: 800388270626521089\n",
      "Fail\n",
      "584: 800188575492947969\n",
      "Fail\n",
      "585: 800141422401830912\n",
      "Fail\n",
      "586: 800018252395122689\n",
      "Fail\n",
      "587: 799774291445383169\n",
      "Fail\n",
      "588: 799757965289017345\n",
      "Fail\n",
      "589: 799422933579902976\n",
      "Fail\n",
      "590: 799308762079035393\n",
      "Fail\n",
      "591: 799297110730567681\n",
      "Fail\n",
      "592: 799063482566066176\n",
      "Fail\n",
      "593: 798933969379225600\n",
      "Fail\n",
      "594: 798925684722855936\n",
      "Fail\n",
      "595: 798705661114773508\n",
      "Fail\n",
      "596: 798701998996647937\n",
      "Fail\n",
      "597: 798697898615730177\n",
      "Fail\n",
      "598: 798694562394996736\n",
      "Fail\n",
      "599: 798686750113755136\n",
      "Fail\n",
      "600: 798682547630837760\n",
      "Fail\n",
      "601: 798673117451325440\n",
      "Fail\n",
      "602: 798665375516884993\n",
      "Fail\n",
      "603: 798644042770751489\n",
      "Fail\n",
      "604: 798628517273620480\n",
      "Fail\n",
      "605: 798585098161549313\n",
      "Fail\n",
      "606: 798576900688019456\n",
      "Fail\n",
      "607: 798340744599797760\n",
      "Fail\n",
      "608: 798209839306514432\n",
      "Fail\n",
      "609: 797971864723324932\n",
      "Fail\n",
      "610: 797545162159308800\n",
      "Fail\n",
      "611: 797236660651966464\n",
      "Fail\n",
      "612: 797165961484890113\n",
      "Fail\n",
      "613: 796904159865868288\n",
      "Fail\n",
      "614: 796865951799083009\n",
      "Fail\n",
      "615: 796759840936919040\n",
      "Fail\n",
      "616: 796563435802726400\n",
      "Fail\n",
      "617: 796484825502875648\n",
      "Fail\n",
      "618: 796387464403357696\n",
      "Fail\n",
      "619: 796177847564038144\n",
      "Fail\n",
      "620: 796149749086875649\n",
      "Fail\n",
      "621: 796125600683540480\n",
      "Fail\n",
      "622: 796116448414461957\n",
      "Fail\n",
      "623: 796080075804475393\n",
      "Fail\n",
      "624: 796031486298386433\n",
      "Fail\n",
      "625: 795464331001561088\n",
      "Fail\n",
      "626: 795400264262053889\n",
      "Fail\n",
      "627: 795076730285391872\n",
      "Fail\n",
      "628: 794983741416415232\n",
      "Fail\n",
      "629: 794926597468000259\n",
      "Fail\n",
      "630: 794355576146903043\n",
      "Fail\n",
      "631: 794332329137291264\n",
      "Fail\n",
      "632: 794205286408003585\n",
      "Fail\n",
      "633: 793962221541933056\n",
      "Fail\n",
      "634: 793845145112371200\n",
      "Fail\n",
      "635: 793614319594401792\n",
      "Fail\n",
      "636: 793601777308463104\n",
      "Fail\n",
      "637: 793500921481273345\n",
      "Fail\n",
      "638: 793286476301799424\n",
      "Fail\n",
      "639: 793271401113350145\n",
      "Fail\n",
      "640: 793256262322548741\n",
      "Fail\n",
      "641: 793241302385262592\n",
      "Fail\n",
      "642: 793226087023144960\n",
      "Fail\n",
      "643: 793210959003287553\n",
      "Fail\n",
      "644: 793195938047070209\n",
      "Fail\n",
      "645: 793180763617361921\n",
      "Fail\n",
      "646: 793165685325201412\n",
      "Fail\n",
      "647: 793150605191548928\n",
      "Fail\n",
      "648: 793135492858580992\n",
      "Fail\n",
      "649: 793120401413079041\n",
      "Fail\n",
      "650: 792913359805018113\n",
      "Fail\n",
      "651: 792883833364439040\n",
      "Fail\n",
      "652: 792773781206999040\n",
      "Fail\n",
      "653: 792394556390137856\n",
      "Fail\n",
      "654: 792050063153438720\n",
      "Fail\n",
      "655: 791821351946420224\n",
      "Fail\n",
      "656: 791784077045166082\n",
      "Fail\n",
      "657: 791780927877898241\n",
      "Fail\n",
      "658: 791774931465953280\n",
      "Fail\n",
      "659: 791672322847637504\n",
      "Fail\n",
      "660: 791406955684368384\n",
      "Fail\n",
      "661: 791312159183634433\n",
      "Fail\n",
      "662: 791026214425268224\n",
      "Fail\n",
      "663: 790987426131050500\n",
      "Fail\n",
      "664: 790946055508652032\n",
      "Fail\n",
      "665: 790723298204217344\n",
      "Fail\n",
      "666: 790698755171364864\n",
      "Fail\n",
      "667: 790581949425475584\n",
      "Fail\n",
      "668: 790337589677002753\n",
      "Fail\n",
      "669: 790277117346975746\n",
      "Fail\n",
      "670: 790227638568808452\n",
      "Fail\n",
      "671: 789986466051088384\n",
      "Fail\n",
      "672: 789960241177853952\n",
      "Fail\n",
      "673: 789903600034189313\n",
      "Fail\n",
      "674: 789628658055020548\n",
      "Fail\n",
      "675: 789599242079838210\n",
      "Fail\n",
      "676: 789530877013393408\n",
      "Fail\n",
      "677: 789314372632018944\n",
      "Fail\n",
      "678: 789280767834746880\n",
      "Fail\n",
      "679: 789268448748703744\n",
      "Fail\n",
      "680: 789137962068021249\n",
      "Fail\n",
      "681: 788908386943430656\n",
      "Fail\n",
      "682: 788765914992902144\n",
      "Fail\n",
      "683: 788552643979468800\n",
      "Fail\n",
      "684: 788412144018661376\n",
      "Fail\n",
      "685: 788178268662984705\n",
      "Fail\n",
      "686: 788150585577050112\n",
      "Fail\n",
      "687: 788070120937619456\n",
      "Fail\n",
      "688: 788039637453406209\n",
      "Fail\n",
      "689: 787810552592695296\n",
      "Fail\n",
      "690: 787717603741622272\n",
      "Fail\n",
      "691: 787397959788929025\n",
      "Fail\n",
      "692: 787322443945877504\n",
      "Fail\n",
      "693: 787111942498508800\n",
      "Fail\n",
      "694: 786963064373534720\n",
      "Fail\n",
      "695: 786729988674449408\n",
      "Fail\n",
      "696: 786709082849828864\n",
      "Fail\n",
      "697: 786664955043049472\n",
      "Fail\n",
      "698: 786595970293370880\n",
      "Fail\n",
      "699: 786363235746385920\n",
      "Fail\n",
      "700: 786286427768250368\n",
      "Fail\n",
      "701: 786233965241827333\n",
      "Fail\n",
      "702: 786051337297522688\n",
      "Fail\n",
      "703: 786036967502913536\n",
      "Fail\n",
      "704: 785927819176054784\n",
      "Fail\n",
      "705: 785872687017132033\n",
      "Fail\n",
      "706: 785639753186217984\n",
      "Fail\n",
      "707: 785533386513321988\n",
      "Fail\n",
      "708: 785515384317313025\n",
      "Fail\n",
      "709: 785264754247995392\n",
      "Fail\n",
      "710: 785170936622350336\n",
      "Fail\n",
      "711: 784826020293709826\n",
      "Fail\n",
      "712: 784517518371221505\n",
      "Fail\n",
      "713: 784431430411685888\n",
      "Fail\n",
      "714: 784183165795655680\n",
      "Fail\n",
      "715: 784057939640352768\n",
      "Fail\n",
      "716: 783839966405230592\n",
      "Fail\n",
      "717: 783821107061198850\n",
      "Fail\n",
      "718: 783695101801398276\n",
      "Fail\n",
      "719: 783466772167098368\n",
      "Fail\n",
      "720: 783391753726550016\n",
      "Fail\n",
      "721: 783347506784731136\n",
      "Fail\n",
      "722: 783334639985389568\n",
      "Fail\n",
      "723: 783085703974514689\n",
      "Fail\n",
      "724: 782969140009107456\n",
      "Fail\n",
      "725: 782747134529531904\n",
      "Fail\n",
      "726: 782722598790725632\n",
      "Fail\n",
      "727: 782598640137187329\n",
      "Fail\n",
      "728: 782305867769217024\n",
      "Fail\n",
      "729: 782021823840026624\n",
      "Fail\n",
      "730: 781955203444699136\n",
      "Fail\n",
      "731: 781661882474196992\n",
      "Fail\n",
      "732: 781655249211752448\n",
      "Fail\n",
      "733: 781524693396357120\n",
      "Fail\n",
      "734: 781308096455073793\n",
      "Fail\n",
      "735: 781251288990355457\n",
      "Fail\n",
      "736: 781163403222056960\n",
      "Fail\n",
      "737: 780931614150983680\n",
      "Fail\n",
      "738: 780858289093574656\n",
      "Fail\n",
      "739: 780800785462489090\n",
      "Fail\n",
      "740: 780601303617732608\n",
      "Fail\n",
      "741: 780543529827336192\n",
      "Fail\n",
      "742: 780496263422808064\n",
      "Fail\n",
      "743: 780476555013349377\n",
      "Fail\n",
      "744: 780459368902959104\n",
      "Fail\n",
      "745: 780192070812196864\n",
      "Fail\n",
      "746: 780092040432480260\n",
      "Fail\n",
      "747: 780074436359819264\n",
      "Fail\n",
      "748: 779834332596887552\n",
      "Fail\n",
      "749: 779377524342161408\n",
      "Fail\n",
      "750: 779124354206535695\n",
      "Fail\n",
      "751: 779123168116150273\n",
      "Fail\n",
      "752: 779056095788752897\n",
      "Fail\n",
      "753: 778990705243029504\n",
      "Fail\n",
      "754: 778774459159379968\n",
      "Fail\n",
      "755: 778764940568104960\n",
      "Fail\n",
      "756: 778748913645780993\n",
      "Fail\n",
      "757: 778650543019483137\n",
      "Fail\n",
      "758: 778624900596654080\n",
      "Fail\n",
      "759: 778408200802557953\n",
      "Fail\n",
      "760: 778396591732486144\n",
      "Fail\n",
      "761: 778383385161035776\n",
      "Fail\n",
      "762: 778286810187399168\n",
      "Fail\n",
      "763: 778039087836069888\n",
      "Fail\n",
      "764: 778027034220126208\n",
      "Fail\n",
      "765: 777953400541634568\n",
      "Fail\n",
      "766: 777885040357281792\n",
      "Fail\n",
      "767: 777684233540206592\n",
      "Fail\n",
      "768: 777641927919427584\n",
      "Fail\n",
      "769: 777621514455814149\n",
      "Fail\n",
      "770: 777189768882946048\n",
      "Fail\n",
      "771: 776819012571455488\n",
      "Fail\n",
      "772: 776813020089548800\n",
      "Fail\n",
      "773: 776477788987613185\n",
      "Fail\n",
      "774: 776249906839351296\n",
      "Fail\n",
      "775: 776218204058357768\n",
      "Fail\n",
      "776: 776201521193218049\n",
      "Fail\n",
      "777: 776113305656188928\n",
      "Fail\n",
      "778: 776088319444877312\n",
      "Fail\n",
      "779: 775898661951791106\n",
      "Fail\n",
      "780: 775842724423557120\n",
      "Fail\n",
      "781: 775733305207554048\n",
      "Fail\n",
      "782: 775729183532220416\n",
      "Fail\n",
      "783: 775364825476165632\n",
      "Fail\n",
      "784: 775350846108426240\n",
      "Fail\n",
      "785: 775096608509886464\n",
      "Fail\n",
      "786: 775085132600442880\n",
      "Fail\n",
      "787: 774757898236878852\n",
      "Fail\n",
      "788: 774639387460112384\n",
      "Fail\n",
      "789: 774314403806253056\n",
      "Fail\n",
      "790: 773985732834758656\n",
      "Fail\n",
      "791: 773922284943896577\n",
      "Fail\n",
      "792: 773704687002451968\n",
      "Fail\n",
      "793: 773670353721753600\n",
      "Fail\n",
      "794: 773547596996571136\n",
      "Fail\n",
      "795: 773336787167145985\n",
      "Fail\n",
      "796: 773308824254029826\n",
      "Fail\n",
      "797: 773247561583001600\n",
      "Fail\n",
      "798: 773191612633579521\n",
      "Fail\n",
      "799: 772877495989305348\n",
      "Fail\n",
      "800: 772826264096874500\n",
      "Fail\n",
      "801: 772615324260794368\n",
      "Fail\n",
      "802: 772581559778025472\n",
      "Fail\n",
      "803: 772193107915964416\n",
      "Fail\n",
      "804: 772152991789019136\n",
      "Fail\n",
      "805: 772117678702071809\n",
      "Fail\n",
      "806: 772114945936949249\n",
      "Fail\n",
      "807: 772102971039580160\n",
      "Fail\n",
      "808: 771908950375665664\n",
      "Fail\n",
      "809: 771770456517009408\n",
      "Fail\n",
      "810: 771500966810099713\n",
      "Fail\n",
      "811: 771380798096281600\n",
      "Fail\n",
      "812: 771171053431250945\n",
      "Fail\n",
      "813: 771136648247640064\n",
      "Fail\n",
      "814: 771102124360998913\n",
      "Fail\n",
      "815: 771014301343748096\n",
      "Fail\n",
      "816: 771004394259247104\n",
      "Fail\n",
      "817: 770787852854652928\n",
      "Fail\n",
      "818: 770772759874076672\n",
      "Fail\n",
      "819: 770743923962707968\n",
      "Fail\n",
      "820: 770655142660169732\n",
      "Fail\n",
      "821: 770414278348247044\n",
      "Fail\n",
      "822: 770293558247038976\n",
      "Fail\n",
      "823: 770093767776997377\n",
      "Fail\n",
      "824: 770069151037685760\n",
      "Fail\n",
      "825: 769940425801170949\n",
      "Fail\n",
      "826: 769695466921623552\n",
      "Fail\n",
      "827: 769335591808995329\n",
      "Fail\n",
      "828: 769212283578875904\n",
      "Fail\n",
      "829: 768970937022709760\n",
      "Fail\n",
      "830: 768909767477751808\n",
      "Fail\n",
      "831: 768855141948723200\n",
      "Fail\n",
      "832: 768609597686943744\n",
      "Fail\n",
      "833: 768596291618299904\n",
      "Fail\n",
      "834: 768554158521745409\n",
      "Fail\n",
      "835: 768473857036525572\n",
      "Fail\n",
      "836: 768193404517830656\n",
      "Fail\n",
      "837: 767884188863397888\n",
      "Fail\n",
      "838: 767754930266464257\n",
      "Fail\n",
      "839: 767500508068192258\n",
      "Fail\n",
      "840: 767191397493538821\n",
      "Fail\n",
      "841: 767122157629476866\n",
      "Fail\n",
      "842: 766864461642756096\n",
      "Fail\n",
      "843: 766793450729734144\n",
      "Fail\n",
      "844: 766714921925144576\n",
      "Fail\n",
      "845: 766693177336135680\n",
      "Fail\n",
      "846: 766423258543644672\n",
      "Fail\n",
      "847: 766313316352462849\n",
      "Fail\n",
      "848: 766078092750233600\n",
      "Fail\n",
      "849: 766069199026450432\n",
      "Fail\n",
      "850: 766008592277377025\n",
      "Fail\n",
      "851: 765719909049503744\n",
      "Fail\n",
      "852: 765669560888528897\n",
      "Fail\n",
      "853: 765395769549590528\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Fail\n",
      "854: 765371061932261376\n",
      "Fail\n",
      "855: 765222098633691136\n",
      "Fail\n",
      "856: 764857477905154048\n",
      "Fail\n",
      "857: 764259802650378240\n",
      "Fail\n",
      "858: 763956972077010945\n",
      "Fail\n",
      "859: 763837565564780549\n",
      "Fail\n",
      "860: 763183847194451968\n",
      "Fail\n",
      "861: 763167063695355904\n",
      "Fail\n",
      "862: 763103485927849985\n",
      "Fail\n",
      "863: 762699858130116608\n",
      "Fail\n",
      "864: 762471784394268675\n",
      "Fail\n",
      "865: 762464539388485633\n",
      "Fail\n",
      "866: 762316489655476224\n",
      "Fail\n",
      "867: 762035686371364864\n",
      "Fail\n",
      "868: 761976711479193600\n",
      "Fail\n",
      "869: 761750502866649088\n",
      "Fail\n",
      "870: 761745352076779520\n",
      "Fail\n",
      "871: 761672994376806400\n",
      "Fail\n",
      "872: 761599872357261312\n",
      "Fail\n",
      "873: 761371037149827077\n",
      "Fail\n",
      "874: 761334018830917632\n",
      "Fail\n",
      "875: 761292947749015552\n",
      "Fail\n",
      "876: 761227390836215808\n",
      "Fail\n",
      "877: 761004547850530816\n",
      "Fail\n",
      "878: 760893934457552897\n",
      "Fail\n",
      "879: 760656994973933572\n",
      "Fail\n",
      "880: 760641137271070720\n",
      "Fail\n",
      "881: 760539183865880579\n",
      "Fail\n",
      "882: 760521673607086080\n",
      "Fail\n",
      "883: 760290219849637889\n",
      "Fail\n",
      "884: 760252756032651264\n",
      "Fail\n",
      "885: 760190180481531904\n",
      "Fail\n",
      "886: 760153949710192640\n",
      "Fail\n",
      "887: 759943073749200896\n",
      "Fail\n",
      "888: 759923798737051648\n",
      "Fail\n",
      "889: 759846353224826880\n",
      "Fail\n",
      "890: 759793422261743616\n",
      "Fail\n",
      "891: 759566828574212096\n",
      "Fail\n",
      "892: 759557299618865152\n",
      "Fail\n",
      "893: 759447681597108224\n",
      "Fail\n",
      "894: 759446261539934208\n",
      "Fail\n",
      "895: 759197388317847553\n",
      "Fail\n",
      "896: 759159934323924993\n",
      "Fail\n",
      "897: 759099523532779520\n",
      "Fail\n",
      "898: 759047813560868866\n",
      "Fail\n",
      "899: 758854675097526272\n",
      "Fail\n",
      "900: 758828659922702336\n",
      "Fail\n",
      "901: 758740312047005698\n",
      "Fail\n",
      "902: 758474966123810816\n",
      "Fail\n",
      "903: 758467244762497024\n",
      "Fail\n",
      "904: 758405701903519748\n",
      "Fail\n",
      "905: 758355060040593408\n",
      "Fail\n",
      "906: 758099635764359168\n",
      "Fail\n",
      "907: 758041019896193024\n",
      "Fail\n",
      "908: 757741869644341248\n",
      "Fail\n",
      "909: 757729163776290825\n",
      "Fail\n",
      "910: 757725642876129280\n",
      "Fail\n",
      "911: 757611664640446465\n",
      "Fail\n",
      "912: 757597904299253760\n",
      "Fail\n",
      "913: 757596066325864448\n",
      "Fail\n",
      "914: 757400162377592832\n",
      "Fail\n",
      "915: 757393109802180609\n",
      "Fail\n",
      "916: 757354760399941633\n",
      "Fail\n",
      "917: 756998049151549440\n",
      "Fail\n",
      "918: 756939218950160384\n",
      "Fail\n",
      "919: 756651752796094464\n",
      "Fail\n",
      "920: 756526248105566208\n",
      "Fail\n",
      "921: 756303284449767430\n",
      "Fail\n",
      "922: 756288534030475264\n",
      "Fail\n",
      "923: 756275833623502848\n",
      "Fail\n",
      "924: 755955933503782912\n",
      "Fail\n",
      "925: 755206590534418437\n",
      "Fail\n",
      "926: 755110668769038337\n",
      "Fail\n",
      "927: 754874841593970688\n",
      "Fail\n",
      "928: 754856583969079297\n",
      "Fail\n",
      "929: 754747087846248448\n",
      "Fail\n",
      "930: 754482103782404096\n",
      "Fail\n",
      "931: 754449512966619136\n",
      "Fail\n",
      "932: 754120377874386944\n",
      "Fail\n",
      "933: 754011816964026368\n",
      "Fail\n",
      "934: 753655901052166144\n",
      "Fail\n",
      "935: 753420520834629632\n",
      "Fail\n",
      "936: 753398408988139520\n",
      "Fail\n",
      "937: 753375668877008896\n",
      "Fail\n",
      "938: 753298634498793472\n",
      "Fail\n",
      "939: 753294487569522689\n",
      "Fail\n",
      "940: 753039830821511168\n",
      "Fail\n",
      "941: 753026973505581056\n",
      "Fail\n",
      "942: 752932432744185856\n",
      "Fail\n",
      "943: 752917284578922496\n",
      "Fail\n",
      "944: 752701944171524096\n",
      "Fail\n",
      "945: 752682090207055872\n",
      "Fail\n",
      "946: 752660715232722944\n",
      "Fail\n",
      "947: 752568224206688256\n",
      "Fail\n",
      "948: 752519690950500352\n",
      "Fail\n",
      "949: 752334515931054080\n",
      "Fail\n",
      "950: 752309394570878976\n",
      "Fail\n",
      "951: 752173152931807232\n",
      "Fail\n",
      "952: 751950017322246144\n",
      "Fail\n",
      "953: 751937170840121344\n",
      "Fail\n",
      "954: 751830394383790080\n",
      "Fail\n",
      "955: 751793661361422336\n",
      "Fail\n",
      "956: 751598357617971201\n",
      "Fail\n",
      "957: 751583847268179968\n",
      "Fail\n",
      "958: 751538714308972544\n",
      "Fail\n",
      "959: 751456908746354688\n",
      "Fail\n",
      "960: 751251247299190784\n",
      "Fail\n",
      "961: 751205363882532864\n",
      "Fail\n",
      "962: 751132876104687617\n",
      "Fail\n",
      "963: 750868782890057730\n",
      "Fail\n",
      "964: 750719632563142656\n",
      "Fail\n",
      "965: 750506206503038976\n",
      "Fail\n",
      "966: 750429297815552001\n",
      "Fail\n",
      "967: 750383411068534784\n",
      "Fail\n",
      "968: 750381685133418496\n",
      "Fail\n",
      "969: 750147208377409536\n",
      "Fail\n",
      "970: 750132105863102464\n",
      "Fail\n",
      "971: 750117059602808832\n",
      "Fail\n",
      "972: 750101899009982464\n",
      "Fail\n",
      "973: 750086836815486976\n",
      "Fail\n",
      "974: 750071704093859840\n",
      "Fail\n",
      "975: 750056684286914561\n",
      "Fail\n",
      "976: 750041628174217216\n",
      "Fail\n",
      "977: 750026558547456000\n",
      "Fail\n",
      "978: 750011400160841729\n",
      "Fail\n",
      "979: 749996283729883136\n",
      "Fail\n",
      "980: 749981277374128128\n",
      "Fail\n",
      "981: 749774190421639168\n",
      "Fail\n",
      "982: 749417653287129088\n",
      "Fail\n",
      "983: 749403093750648834\n",
      "Fail\n",
      "984: 749395845976588288\n",
      "Fail\n",
      "985: 749317047558017024\n",
      "Fail\n",
      "986: 749075273010798592\n",
      "Fail\n",
      "987: 749064354620928000\n",
      "Fail\n",
      "988: 749036806121881602\n",
      "Fail\n",
      "989: 748977405889503236\n",
      "Fail\n",
      "990: 748932637671223296\n",
      "Fail\n",
      "991: 748705597323898880\n",
      "Fail\n",
      "992: 748699167502000129\n",
      "Fail\n",
      "993: 748692773788876800\n",
      "Fail\n",
      "994: 748575535303884801\n",
      "Fail\n",
      "995: 748568946752774144\n",
      "Fail\n",
      "996: 748346686624440324\n",
      "Fail\n",
      "997: 748337862848962560\n",
      "Fail\n",
      "998: 748324050481647620\n",
      "Fail\n",
      "999: 748307329658011649\n",
      "Fail\n",
      "1000: 748220828303695873\n",
      "Fail\n",
      "1001: 747963614829678593\n",
      "Fail\n",
      "1002: 747933425676525569\n",
      "Fail\n",
      "1003: 747885874273214464\n",
      "Fail\n",
      "1004: 747844099428986880\n",
      "Fail\n",
      "1005: 747816857231626240\n",
      "Fail\n",
      "1006: 747651430853525504\n",
      "Fail\n",
      "1007: 747648653817413632\n",
      "Fail\n",
      "1008: 747600769478692864\n",
      "Fail\n",
      "1009: 747594051852075008\n",
      "Fail\n",
      "1010: 747512671126323200\n",
      "Fail\n",
      "1011: 747461612269887489\n",
      "Fail\n",
      "1012: 747439450712596480\n",
      "Fail\n",
      "1013: 747242308580548608\n",
      "Fail\n",
      "1014: 747219827526344708\n",
      "Fail\n",
      "1015: 747204161125646336\n",
      "Fail\n",
      "1016: 747103485104099331\n",
      "Fail\n",
      "1017: 746906459439529985\n",
      "Fail\n",
      "1018: 746872823977771008\n",
      "Fail\n",
      "1019: 746818907684614144\n",
      "Fail\n",
      "1020: 746790600704425984\n",
      "Fail\n",
      "1021: 746757706116112384\n",
      "Fail\n",
      "1022: 746726898085036033\n",
      "Fail\n",
      "1023: 746542875601690625\n",
      "Fail\n",
      "1024: 746521445350707200\n",
      "Fail\n",
      "1025: 746507379341139972\n",
      "Fail\n",
      "1026: 746369468511756288\n",
      "Fail\n",
      "1027: 746131877086527488\n",
      "Fail\n",
      "1028: 746056683365994496\n",
      "Fail\n",
      "1029: 745789745784041472\n",
      "Fail\n",
      "1030: 745712589599014916\n",
      "Fail\n",
      "1031: 745433870967832576\n",
      "Fail\n",
      "1032: 745422732645535745\n",
      "Fail\n",
      "1033: 745314880350101504\n",
      "Fail\n",
      "1034: 745074613265149952\n",
      "Fail\n",
      "1035: 745057283344719872\n",
      "Fail\n",
      "1036: 744995568523612160\n",
      "Fail\n",
      "1037: 744971049620602880\n",
      "Fail\n",
      "1038: 744709971296780288\n",
      "Fail\n",
      "1039: 744334592493166593\n",
      "Fail\n",
      "1040: 744234799360020481\n",
      "Fail\n",
      "1041: 744223424764059648\n",
      "Fail\n",
      "1042: 743980027717509120\n",
      "Fail\n",
      "1043: 743895849529389061\n",
      "Fail\n",
      "1044: 743835915802583040\n",
      "Fail\n",
      "1045: 743609206067040256\n",
      "Fail\n",
      "1046: 743595368194129920\n",
      "Fail\n",
      "1047: 743545585370791937\n",
      "Fail\n",
      "1048: 743510151680958465\n",
      "Fail\n",
      "1049: 743253157753532416\n",
      "Fail\n",
      "1050: 743222593470234624\n",
      "Fail\n",
      "1051: 743210557239623680\n",
      "Fail\n",
      "1052: 742534281772302336\n",
      "Fail\n",
      "1053: 742528092657332225\n",
      "Fail\n",
      "1054: 742465774154047488\n",
      "Fail\n",
      "1055: 742423170473463808\n",
      "Fail\n",
      "1056: 742385895052087300\n",
      "Fail\n",
      "1057: 742161199639494656\n",
      "Fail\n",
      "1058: 742150209887731712\n",
      "Fail\n",
      "1059: 741793263812808706\n",
      "Fail\n",
      "1060: 741743634094141440\n",
      "Fail\n",
      "1061: 741438259667034112\n",
      "Fail\n",
      "1062: 741303864243200000\n",
      "Fail\n",
      "1063: 741099773336379392\n",
      "Fail\n",
      "1064: 741067306818797568\n",
      "Fail\n",
      "1065: 740995100998766593\n",
      "Fail\n",
      "1066: 740711788199743490\n",
      "Fail\n",
      "1067: 740699697422163968\n",
      "Fail\n",
      "1068: 740676976021798912\n",
      "Fail\n",
      "1069: 740373189193256964\n",
      "Fail\n",
      "1070: 740365076218183684\n",
      "Fail\n",
      "1071: 740359016048689152\n",
      "Fail\n",
      "1072: 740214038584557568\n",
      "Fail\n",
      "1073: 739979191639244800\n",
      "Fail\n",
      "1074: 739932936087216128\n",
      "Fail\n",
      "1075: 739844404073074688\n",
      "Fail\n",
      "1076: 739623569819336705\n",
      "Fail\n",
      "1077: 739606147276148736\n",
      "Fail\n",
      "1078: 739544079319588864\n",
      "Fail\n",
      "1079: 739485634323156992\n",
      "Fail\n",
      "1080: 739238157791694849\n",
      "Fail\n",
      "1081: 738891149612572673\n",
      "Fail\n",
      "1082: 738885046782832640\n",
      "Fail\n",
      "1083: 738883359779196928\n",
      "Fail\n",
      "1084: 738537504001953792\n",
      "Fail\n",
      "1085: 738402415918125056\n",
      "Fail\n",
      "1086: 738184450748633089\n",
      "Fail\n",
      "1087: 738166403467907072\n",
      "Fail\n",
      "1088: 738156290900254721\n",
      "Fail\n",
      "1089: 737826014890496000\n",
      "Fail\n",
      "1090: 737800304142471168\n",
      "Fail\n",
      "1091: 737678689543020544\n",
      "Fail\n",
      "1092: 737445876994609152\n",
      "Fail\n",
      "1093: 737322739594330112\n",
      "Fail\n",
      "1094: 737310737551491075\n",
      "Fail\n",
      "1095: 736736130620620800\n",
      "Fail\n",
      "1096: 736392552031657984\n",
      "Fail\n",
      "1097: 736365877722001409\n",
      "Fail\n",
      "1098: 736225175608430592\n",
      "Fail\n",
      "1099: 736010884653420544\n",
      "Fail\n",
      "1100: 735991953473572864\n",
      "Fail\n",
      "1101: 735648611367784448\n",
      "Fail\n",
      "1102: 735635087207878657\n",
      "Fail\n",
      "1103: 735274964362878976\n",
      "Fail\n",
      "1104: 735256018284875776\n",
      "Fail\n",
      "1105: 735137028879360001\n",
      "Fail\n",
      "1106: 734912297295085568\n",
      "Fail\n",
      "1107: 734787690684657664\n",
      "Fail\n",
      "1108: 734776360183431168\n",
      "Fail\n",
      "1109: 734559631394082816\n",
      "Fail\n",
      "1110: 733828123016450049\n",
      "Fail\n",
      "1111: 733822306246479872\n",
      "Fail\n",
      "1112: 733482008106668032\n",
      "Fail\n",
      "1113: 733460102733135873\n",
      "Fail\n",
      "1114: 733109485275860992\n",
      "Fail\n",
      "1115: 732732193018155009\n",
      "Fail\n",
      "1116: 732726085725589504\n",
      "Fail\n",
      "1117: 732585889486888962\n",
      "Fail\n",
      "1118: 732375214819057664\n",
      "Fail\n",
      "1119: 732005617171337216\n",
      "Fail\n",
      "1120: 731285275100512256\n",
      "Fail\n",
      "1121: 731156023742988288\n",
      "Fail\n",
      "1122: 730924654643314689\n",
      "Fail\n",
      "1123: 730573383004487680\n",
      "Fail\n",
      "1124: 730427201120833536\n",
      "Fail\n",
      "1125: 730211855403241472\n",
      "Fail\n",
      "1126: 730196704625098752\n",
      "Fail\n",
      "1127: 729854734790754305\n",
      "Fail\n",
      "1128: 729838605770891264\n",
      "Fail\n",
      "1129: 729823566028484608\n",
      "Fail\n",
      "1130: 729463711119904772\n",
      "Fail\n",
      "1131: 729113531270991872\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Fail\n",
      "1132: 728986383096946689\n",
      "Fail\n",
      "1133: 728760639972315136\n",
      "Fail\n",
      "1134: 728751179681943552\n",
      "Fail\n",
      "1135: 728653952833728512\n",
      "Fail\n",
      "1136: 728409960103686147\n",
      "Fail\n",
      "1137: 728387165835677696\n",
      "Fail\n",
      "1138: 728046963732717569\n",
      "Fail\n",
      "1139: 728035342121635841\n",
      "Fail\n",
      "1140: 728015554473250816\n",
      "Fail\n",
      "1141: 727685679342333952\n",
      "Fail\n",
      "1142: 727644517743104000\n",
      "Fail\n",
      "1143: 727524757080539137\n",
      "Fail\n",
      "1144: 727314416056803329\n",
      "Fail\n",
      "1145: 727286334147182592\n",
      "Fail\n",
      "1146: 727175381690781696\n",
      "Fail\n",
      "1147: 727155742655025152\n",
      "Fail\n",
      "1148: 726935089318363137\n",
      "Fail\n",
      "1149: 726887082820554753\n",
      "Fail\n",
      "1150: 726828223124897792\n",
      "Fail\n",
      "1151: 726224900189511680\n",
      "Fail\n",
      "1152: 725842289046749185\n",
      "Fail\n",
      "1153: 725786712245440512\n",
      "Fail\n",
      "1154: 725729321944506368\n",
      "Fail\n",
      "1155: 725458796924002305\n",
      "Fail\n",
      "1156: 724983749226668032\n",
      "Fail\n",
      "1157: 724771698126512129\n",
      "Fail\n",
      "1158: 724405726123311104\n",
      "Fail\n",
      "1159: 724049859469295616\n",
      "Fail\n",
      "1160: 724046343203856385\n",
      "Fail\n",
      "1161: 724004602748780546\n",
      "Fail\n",
      "1162: 723912936180330496\n",
      "Fail\n",
      "1163: 723688335806480385\n",
      "Fail\n",
      "1164: 723673163800948736\n",
      "Fail\n",
      "1165: 723179728551723008\n",
      "Fail\n",
      "1166: 722974582966214656\n",
      "Fail\n",
      "1167: 722613351520608256\n",
      "Fail\n",
      "1168: 721503162398597120\n",
      "Fail\n",
      "1169: 721001180231503872\n",
      "Fail\n",
      "1170: 720785406564900865\n",
      "Fail\n",
      "1171: 720775346191278080\n",
      "Fail\n",
      "1172: 720415127506415616\n",
      "Fail\n",
      "1173: 720389942216527872\n",
      "Fail\n",
      "1174: 720340705894408192\n",
      "Fail\n",
      "1175: 720059472081784833\n",
      "Fail\n",
      "1176: 720043174954147842\n",
      "Fail\n",
      "1177: 719991154352222208\n",
      "Fail\n",
      "1178: 719704490224398336\n",
      "Fail\n",
      "1179: 719551379208073216\n",
      "Fail\n",
      "1180: 719367763014393856\n",
      "Fail\n",
      "1181: 719339463458033665\n",
      "Fail\n",
      "1182: 719332531645071360\n",
      "Fail\n",
      "1183: 718971898235854848\n",
      "Fail\n",
      "1184: 718939241951195136\n",
      "Fail\n",
      "1185: 718631497683582976\n",
      "Fail\n",
      "1186: 718613305783398402\n",
      "Fail\n",
      "1187: 718540630683709445\n",
      "Fail\n",
      "1188: 718460005985447936\n",
      "Fail\n",
      "1189: 718454725339934721\n",
      "Fail\n",
      "1190: 718246886998687744\n",
      "Fail\n",
      "1191: 718234618122661888\n",
      "Fail\n",
      "1192: 717841801130979328\n",
      "Fail\n",
      "1193: 717790033953034240\n",
      "Fail\n",
      "1194: 717537687239008257\n",
      "Fail\n",
      "1195: 717428917016076293\n",
      "Fail\n",
      "1196: 717421804990701568\n",
      "Fail\n",
      "1197: 717047459982213120\n",
      "Fail\n",
      "1198: 717009362452090881\n",
      "Fail\n",
      "1199: 716802964044845056\n",
      "Fail\n",
      "1200: 716791146589110272\n",
      "Fail\n",
      "1201: 716730379797970944\n",
      "Fail\n",
      "1202: 716447146686459905\n",
      "Fail\n",
      "1203: 716439118184652801\n",
      "Fail\n",
      "1204: 716285507865542656\n",
      "Fail\n",
      "1205: 716080869887381504\n",
      "Fail\n",
      "1206: 715928423106027520\n",
      "Fail\n",
      "1207: 715758151270801409\n",
      "Fail\n",
      "1208: 715733265223708672\n",
      "Fail\n",
      "1209: 715704790270025728\n",
      "Fail\n",
      "1210: 715696743237730304\n",
      "Fail\n",
      "1211: 715680795826982913\n",
      "Fail\n",
      "1212: 715360349751484417\n",
      "Fail\n",
      "1213: 715342466308784130\n",
      "Fail\n",
      "1214: 715220193576927233\n",
      "Fail\n",
      "1215: 715200624753819648\n",
      "Fail\n",
      "1216: 715009755312439296\n",
      "Fail\n",
      "1217: 714982300363173890\n",
      "Fail\n",
      "1218: 714962719905021952\n",
      "Fail\n",
      "1219: 714957620017307648\n",
      "Fail\n",
      "1220: 714631576617938945\n",
      "Fail\n",
      "1221: 714606013974974464\n",
      "Fail\n",
      "1222: 714485234495041536\n",
      "Fail\n",
      "1223: 714258258790387713\n",
      "Fail\n",
      "1224: 714251586676113411\n",
      "Fail\n",
      "1225: 714214115368108032\n",
      "Fail\n",
      "1226: 714141408463036416\n",
      "Fail\n",
      "1227: 713919462244790272\n",
      "Fail\n",
      "1228: 713909862279876608\n",
      "Fail\n",
      "1229: 713900603437621249\n",
      "Fail\n",
      "1230: 713761197720473600\n",
      "Fail\n",
      "1231: 713411074226274305\n",
      "Fail\n",
      "1232: 713177543487135744\n",
      "Fail\n",
      "1233: 713175907180089344\n",
      "Fail\n",
      "1234: 712809025985978368\n",
      "Fail\n",
      "1235: 712717840512598017\n",
      "Fail\n",
      "1236: 712668654853337088\n",
      "Fail\n",
      "1237: 712438159032893441\n",
      "Fail\n",
      "1238: 712309440758808576\n",
      "Fail\n",
      "1239: 712097430750289920\n",
      "Fail\n",
      "1240: 712092745624633345\n",
      "Fail\n",
      "1241: 712085617388212225\n",
      "Fail\n",
      "1242: 712065007010385924\n",
      "Fail\n",
      "1243: 711998809858043904\n",
      "Fail\n",
      "1244: 711968124745228288\n",
      "Fail\n",
      "1245: 711743778164514816\n",
      "Fail\n",
      "1246: 711732680602345472\n",
      "Fail\n",
      "1247: 711694788429553666\n",
      "Fail\n",
      "1248: 711652651650457602\n",
      "Fail\n",
      "1249: 711363825979756544\n",
      "Fail\n",
      "1250: 711306686208872448\n",
      "Fail\n",
      "1251: 711008018775851008\n",
      "Fail\n",
      "1252: 710997087345876993\n",
      "Fail\n",
      "1253: 710844581445812225\n",
      "Fail\n",
      "1254: 710833117892898816\n",
      "Fail\n",
      "1255: 710658690886586372\n",
      "Fail\n",
      "1256: 710609963652087808\n",
      "Fail\n",
      "1257: 710588934686908417\n",
      "Fail\n",
      "1258: 710296729921429505\n",
      "Fail\n",
      "1259: 710283270106132480\n",
      "Fail\n",
      "1260: 710272297844797440\n",
      "Fail\n",
      "1261: 710269109699739648\n",
      "Fail\n",
      "1262: 710153181850935296\n",
      "Fail\n",
      "1263: 710140971284037632\n",
      "Fail\n",
      "1264: 710117014656950272\n",
      "Fail\n",
      "1265: 709918798883774466\n",
      "Fail\n",
      "1266: 709901256215666688\n",
      "Fail\n",
      "1267: 709852847387627521\n",
      "Fail\n",
      "1268: 709566166965075968\n",
      "Fail\n",
      "1269: 709556954897764353\n",
      "Fail\n",
      "1270: 709519240576036864\n",
      "Fail\n",
      "1271: 709449600415961088\n",
      "Fail\n",
      "1272: 709409458133323776\n",
      "Fail\n",
      "1273: 709225125749587968\n",
      "Fail\n",
      "1274: 709207347839836162\n",
      "Fail\n",
      "1275: 709198395643068416\n",
      "Fail\n",
      "1276: 709179584944730112\n",
      "Fail\n",
      "1277: 709158332880297985\n",
      "Fail\n",
      "1278: 709042156699303936\n",
      "Fail\n",
      "1279: 708853462201716736\n",
      "Fail\n",
      "1280: 708845821941387268\n",
      "Fail\n",
      "1281: 708834316713893888\n",
      "Fail\n",
      "1282: 708810915978854401\n",
      "Fail\n",
      "1283: 708738143638450176\n",
      "Fail\n",
      "1284: 708711088997666817\n",
      "Fail\n",
      "1285: 708479650088034305\n",
      "Fail\n",
      "1286: 708469915515297792\n",
      "Fail\n",
      "1287: 708400866336894977\n",
      "Fail\n",
      "1288: 708356463048204288\n",
      "Fail\n",
      "1289: 708349470027751425\n",
      "Fail\n",
      "1290: 708149363256774660\n",
      "Fail\n",
      "1291: 708130923141795840\n",
      "Fail\n",
      "1292: 708119489313951744\n",
      "Fail\n",
      "1293: 708109389455101952\n",
      "Fail\n",
      "1294: 708026248782585858\n",
      "Fail\n",
      "1295: 707995814724026368\n",
      "Fail\n",
      "1296: 707983188426153984\n",
      "Fail\n",
      "1297: 707969809498152960\n",
      "Fail\n",
      "1298: 707776935007539200\n",
      "Fail\n",
      "1299: 707741517457260545\n",
      "Fail\n",
      "1300: 707738799544082433\n",
      "Fail\n",
      "1301: 707693576495472641\n",
      "Fail\n",
      "1302: 707629649552134146\n",
      "Fail\n",
      "1303: 707610948723478529\n",
      "Fail\n",
      "1304: 707420581654872064\n",
      "Fail\n",
      "1305: 707411934438625280\n",
      "Fail\n",
      "1306: 707387676719185920\n",
      "Fail\n",
      "1307: 707377100785885184\n",
      "Fail\n",
      "1308: 707315916783140866\n",
      "Fail\n",
      "1309: 707297311098011648\n",
      "Fail\n",
      "1310: 707059547140169728\n",
      "Fail\n",
      "1311: 707038192327901184\n",
      "Fail\n",
      "1312: 707021089608753152\n",
      "Fail\n",
      "1313: 707014260413456384\n",
      "Fail\n",
      "1314: 706904523814649856\n",
      "Fail\n",
      "1315: 706901761596989440\n",
      "Fail\n",
      "1316: 706681918348251136\n",
      "Fail\n",
      "1317: 706644897839910912\n",
      "Fail\n",
      "1318: 706593038911545345\n",
      "Fail\n",
      "1319: 706538006853918722\n",
      "Fail\n",
      "1320: 706516534877929472\n",
      "Fail\n",
      "1321: 706346369204748288\n",
      "Fail\n",
      "1322: 706310011488698368\n",
      "Fail\n",
      "1323: 706291001778950144\n",
      "Fail\n",
      "1324: 706265994973601792\n",
      "Fail\n",
      "1325: 706169069255446529\n",
      "Fail\n",
      "1326: 706166467411222528\n",
      "Fail\n",
      "1327: 706153300320784384\n",
      "Fail\n",
      "1328: 705975130514706432\n",
      "Fail\n",
      "1329: 705970349788291072\n",
      "Fail\n",
      "1330: 705898680587526145\n",
      "Fail\n",
      "1331: 705786532653883392\n",
      "Fail\n",
      "1332: 705591895322394625\n",
      "Fail\n",
      "1333: 705475953783398401\n",
      "Fail\n",
      "1334: 705442520700944385\n",
      "Fail\n",
      "1335: 705428427625635840\n",
      "Fail\n",
      "1336: 705239209544720384\n",
      "Fail\n",
      "1337: 705223444686888960\n",
      "Fail\n",
      "1338: 705102439679201280\n",
      "Fail\n",
      "1339: 705066031337840642\n",
      "Fail\n",
      "1340: 704871453724954624\n",
      "Fail\n",
      "1341: 704859558691414016\n",
      "Fail\n",
      "1342: 704847917308362754\n",
      "Fail\n",
      "1343: 704819833553219584\n",
      "Fail\n",
      "1344: 704761120771465216\n",
      "Fail\n",
      "1345: 704499785726889984\n",
      "Fail\n",
      "1346: 704491224099647488\n",
      "Fail\n",
      "1347: 704480331685040129\n",
      "Fail\n",
      "1348: 704364645503647744\n",
      "Fail\n",
      "1349: 704347321748819968\n",
      "Fail\n",
      "1350: 704134088924532736\n",
      "Fail\n",
      "1351: 704113298707505153\n",
      "Fail\n",
      "1352: 704054845121142784\n",
      "Fail\n",
      "1353: 703774238772166656\n",
      "Fail\n",
      "1354: 703769065844768768\n",
      "Fail\n",
      "1355: 703631701117943808\n",
      "Fail\n",
      "1356: 703611486317502464\n",
      "Fail\n",
      "1357: 703425003149250560\n",
      "Fail\n",
      "1358: 703407252292673536\n",
      "Fail\n",
      "1359: 703382836347330562\n",
      "Fail\n",
      "1360: 703356393781329922\n",
      "Fail\n",
      "1361: 703268521220972544\n",
      "Fail\n",
      "1362: 703079050210877440\n",
      "Fail\n",
      "1363: 703041949650034688\n",
      "Fail\n",
      "1364: 702932127499816960\n",
      "Fail\n",
      "1365: 702899151802126337\n",
      "Fail\n",
      "1366: 702684942141153280\n",
      "Fail\n",
      "1367: 702671118226825216\n",
      "Fail\n",
      "1368: 702598099714314240\n",
      "Fail\n",
      "1369: 702539513671897089\n",
      "Fail\n",
      "1370: 702332542343577600\n",
      "Fail\n",
      "1371: 702321140488925184\n",
      "Fail\n",
      "1372: 702276748847800320\n",
      "Fail\n",
      "1373: 702217446468493312\n",
      "Fail\n",
      "1374: 701981390485725185\n",
      "Fail\n",
      "1375: 701952816642965504\n",
      "Fail\n",
      "1376: 701889187134500865\n",
      "Fail\n",
      "1377: 701805642395348998\n",
      "Fail\n",
      "1378: 701601587219795968\n",
      "Fail\n",
      "1379: 701570477911896070\n",
      "Fail\n",
      "1380: 701545186879471618\n",
      "Fail\n",
      "1381: 701214700881756160\n",
      "Fail\n",
      "1382: 700890391244103680\n",
      "Fail\n",
      "1383: 700864154249383937\n",
      "Fail\n",
      "1384: 700847567345688576\n",
      "Fail\n",
      "1385: 700796979434098688\n",
      "Fail\n",
      "1386: 700747788515020802\n",
      "Fail\n",
      "1387: 700518061187723268\n",
      "Fail\n",
      "1388: 700505138482569216\n",
      "Fail\n",
      "1389: 700462010979500032\n",
      "Fail\n",
      "1390: 700167517596164096\n",
      "Fail\n",
      "1391: 700151421916807169\n",
      "Fail\n",
      "1392: 700143752053182464\n",
      "Fail\n",
      "1393: 700062718104104960\n",
      "Fail\n",
      "1394: 700029284593901568\n",
      "Fail\n",
      "1395: 700002074055016451\n",
      "Fail\n",
      "1396: 699801817392291840\n",
      "Fail\n",
      "1397: 699788877217865730\n",
      "Fail\n",
      "1398: 699779630832685056\n",
      "Fail\n",
      "1399: 699775878809702401\n",
      "Fail\n",
      "1400: 699691744225525762\n",
      "Fail\n",
      "1401: 699446877801091073\n",
      "Fail\n",
      "1402: 699434518667751424\n",
      "Fail\n",
      "1403: 699423671849451520\n",
      "Fail\n",
      "1404: 699413908797464576\n",
      "Fail\n",
      "1405: 699370870310113280\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Fail\n",
      "1406: 699323444782047232\n",
      "Fail\n",
      "1407: 699088579889332224\n",
      "Fail\n",
      "1408: 699079609774645248\n",
      "Fail\n",
      "1409: 699072405256409088\n",
      "Fail\n",
      "1410: 699060279947165696\n",
      "Fail\n",
      "1411: 699036661657767936\n",
      "Fail\n",
      "1412: 698989035503689728\n",
      "Fail\n",
      "1413: 698953797952008193\n",
      "Fail\n",
      "1414: 698907974262222848\n",
      "Fail\n",
      "1415: 698710712454139905\n",
      "Fail\n",
      "1416: 698703483621523456\n",
      "Fail\n",
      "1417: 698635131305795584\n",
      "Fail\n",
      "1418: 698549713696649216\n",
      "Fail\n",
      "1419: 698355670425473025\n",
      "Fail\n",
      "1420: 698342080612007937\n",
      "Fail\n",
      "1421: 698262614669991936\n",
      "Fail\n",
      "1422: 698195409219559425\n",
      "Fail\n",
      "1423: 698178924120031232\n",
      "Fail\n",
      "1424: 697995514407682048\n",
      "Fail\n",
      "1425: 697990423684476929\n",
      "Fail\n",
      "1426: 697943111201378304\n",
      "Fail\n",
      "1427: 697881462549430272\n",
      "Fail\n",
      "1428: 697630435728322560\n",
      "Fail\n",
      "1429: 697616773278015490\n",
      "Fail\n",
      "1430: 697596423848730625\n",
      "Fail\n",
      "1431: 697575480820686848\n",
      "Fail\n",
      "1432: 697516214579523584\n",
      "Fail\n",
      "1433: 697482927769255936\n",
      "Fail\n",
      "1434: 697463031882764288\n",
      "Fail\n",
      "1435: 697270446429966336\n",
      "Fail\n",
      "1436: 697259378236399616\n",
      "Fail\n",
      "1437: 697255105972801536\n",
      "Fail\n",
      "1438: 697242256848379904\n",
      "Fail\n",
      "1439: 696900204696625153\n",
      "Fail\n",
      "1440: 696894894812565505\n",
      "Fail\n",
      "1441: 696886256886657024\n",
      "Fail\n",
      "1442: 696877980375769088\n",
      "Fail\n",
      "1443: 696754882863349760\n",
      "Fail\n",
      "1444: 696744641916489729\n",
      "Fail\n",
      "1445: 696713835009417216\n",
      "Fail\n",
      "1446: 696518437233913856\n",
      "Fail\n",
      "1447: 696490539101908992\n",
      "Fail\n",
      "1448: 696488710901260288\n",
      "Fail\n",
      "1449: 696405997980676096\n",
      "Fail\n",
      "1450: 696100768806522880\n",
      "Fail\n",
      "1451: 695816827381944320\n",
      "Fail\n",
      "1452: 695794761660297217\n",
      "Fail\n",
      "1453: 695767669421768709\n",
      "Fail\n",
      "1454: 695629776980148225\n",
      "Fail\n",
      "1455: 695446424020918272\n",
      "Fail\n",
      "1456: 695409464418041856\n",
      "Fail\n",
      "1457: 695314793360662529\n",
      "Fail\n",
      "1458: 695095422348574720\n",
      "Fail\n",
      "1459: 695074328191332352\n",
      "Fail\n",
      "1460: 695064344191721472\n",
      "Fail\n",
      "1461: 695051054296211456\n",
      "Fail\n",
      "1462: 694925794720792577\n",
      "Fail\n",
      "1463: 694905863685980160\n",
      "Fail\n",
      "1464: 694669722378485760\n",
      "Fail\n",
      "1465: 694356675654983680\n",
      "Fail\n",
      "1466: 694352839993344000\n",
      "Fail\n",
      "1467: 694342028726001664\n",
      "Fail\n",
      "1468: 694329668942569472\n",
      "Fail\n",
      "1469: 694206574471057408\n",
      "Fail\n",
      "1470: 694183373896572928\n",
      "Fail\n",
      "1471: 694001791655137281\n",
      "Fail\n",
      "1472: 693993230313091072\n",
      "Fail\n",
      "1473: 693942351086120961\n",
      "Fail\n",
      "1474: 693647888581312512\n",
      "Fail\n",
      "1475: 693644216740769793\n",
      "Fail\n",
      "1476: 693642232151285760\n",
      "Fail\n",
      "1477: 693629975228977152\n",
      "Fail\n",
      "1478: 693622659251335168\n",
      "Fail\n",
      "1479: 693590843962331137\n",
      "Fail\n",
      "1480: 693582294167244802\n",
      "Fail\n",
      "1481: 693486665285931008\n",
      "Fail\n",
      "1482: 693280720173801472\n",
      "Fail\n",
      "1483: 693267061318012928\n",
      "Fail\n",
      "1484: 693262851218264065\n",
      "Fail\n",
      "1485: 693231807727280129\n",
      "Fail\n",
      "1486: 693155686491000832\n",
      "Fail\n",
      "1487: 693109034023534592\n",
      "Fail\n",
      "1488: 693095443459342336\n",
      "Fail\n",
      "1489: 692919143163629568\n",
      "Fail\n",
      "1490: 692905862751522816\n",
      "Fail\n",
      "1491: 692901601640583168\n",
      "Fail\n",
      "1492: 692894228850999298\n",
      "Fail\n",
      "1493: 692828166163931137\n",
      "Fail\n",
      "1494: 692752401762250755\n",
      "Fail\n",
      "1495: 692568918515392513\n",
      "Fail\n",
      "1496: 692535307825213440\n",
      "Fail\n",
      "1497: 692530551048294401\n",
      "Fail\n",
      "1498: 692423280028966913\n",
      "Fail\n",
      "1499: 692417313023332352\n",
      "Fail\n",
      "1500: 692187005137076224\n",
      "Fail\n",
      "1501: 692158366030913536\n",
      "Fail\n",
      "1502: 692142790915014657\n",
      "Fail\n",
      "1503: 692041934689402880\n",
      "Fail\n",
      "1504: 692017291282812928\n",
      "Fail\n",
      "1505: 691820333922455552\n",
      "Fail\n",
      "1506: 691793053716221953\n",
      "Fail\n",
      "1507: 691756958957883396\n",
      "Fail\n",
      "1508: 691675652215414786\n",
      "Fail\n",
      "1509: 691483041324204033\n",
      "Fail\n",
      "1510: 691459709405118465\n",
      "Fail\n",
      "1511: 691444869282295808\n",
      "Fail\n",
      "1512: 691416866452082688\n",
      "Fail\n",
      "1513: 691321916024623104\n",
      "Fail\n",
      "1514: 691096613310316544\n",
      "Fail\n",
      "1515: 691090071332753408\n",
      "Fail\n",
      "1516: 690989312272396288\n",
      "Fail\n",
      "1517: 690959652130045952\n",
      "Fail\n",
      "1518: 690938899477221376\n",
      "Fail\n",
      "1519: 690932576555528194\n",
      "Fail\n",
      "1520: 690735892932222976\n",
      "Fail\n",
      "1521: 690728923253055490\n",
      "Fail\n",
      "1522: 690690673629138944\n",
      "Fail\n",
      "1523: 690649993829576704\n",
      "Fail\n",
      "1524: 690607260360429569\n",
      "Fail\n",
      "1525: 690597161306841088\n",
      "Fail\n",
      "1526: 690400367696297985\n",
      "Fail\n",
      "1527: 690374419777196032\n",
      "Fail\n",
      "1528: 690360449368465409\n",
      "Fail\n",
      "1529: 690348396616552449\n",
      "Fail\n",
      "1530: 690248561355657216\n",
      "Fail\n",
      "1531: 690021994562220032\n",
      "Fail\n",
      "1532: 690015576308211712\n",
      "Fail\n",
      "1533: 690005060500217858\n",
      "Fail\n",
      "1534: 689999384604450816\n",
      "Fail\n",
      "1535: 689993469801164801\n",
      "Fail\n",
      "1536: 689977555533848577\n",
      "Fail\n",
      "1537: 689905486972461056\n",
      "Fail\n",
      "1538: 689877686181715968\n",
      "Fail\n",
      "1539: 689835978131935233\n",
      "Fail\n",
      "1540: 689661964914655233\n",
      "Fail\n",
      "1541: 689659372465688576\n",
      "Fail\n",
      "1542: 689623661272240129\n",
      "Fail\n",
      "1543: 689599056876867584\n",
      "Fail\n",
      "1544: 689557536375177216\n",
      "Fail\n",
      "1545: 689517482558820352\n",
      "Fail\n",
      "1546: 689289219123089408\n",
      "Fail\n",
      "1547: 689283819090870273\n",
      "Fail\n",
      "1548: 689280876073582592\n",
      "Fail\n",
      "1549: 689275259254616065\n",
      "Fail\n",
      "1550: 689255633275777024\n",
      "Fail\n",
      "1551: 689154315265683456\n",
      "Fail\n",
      "1552: 689143371370250240\n",
      "Fail\n",
      "1553: 688916208532455424\n",
      "Fail\n",
      "1554: 688908934925697024\n",
      "Fail\n",
      "1555: 688898160958271489\n",
      "Fail\n",
      "1556: 688894073864884227\n",
      "Fail\n",
      "1557: 688828561667567616\n",
      "Fail\n",
      "1558: 688804835492233216\n",
      "Fail\n",
      "1559: 688789766343622656\n",
      "Fail\n",
      "1560: 688547210804498433\n",
      "Fail\n",
      "1561: 688519176466644993\n",
      "Fail\n",
      "1562: 688385280030670848\n",
      "Fail\n",
      "1563: 688211956440801280\n",
      "Fail\n",
      "1564: 688179443353796608\n",
      "Fail\n",
      "1565: 688116655151435777\n",
      "Fail\n",
      "1566: 688064179421470721\n",
      "Fail\n",
      "1567: 687841446767013888\n",
      "Fail\n",
      "1568: 687826841265172480\n",
      "Fail\n",
      "1569: 687818504314159109\n",
      "Fail\n",
      "1570: 687807801670897665\n",
      "Fail\n",
      "1571: 687732144991551489\n",
      "Fail\n",
      "1572: 687704180304273409\n",
      "Fail\n",
      "1573: 687664829264453632\n",
      "Fail\n",
      "1574: 687494652870668288\n",
      "Fail\n",
      "1575: 687480748861947905\n",
      "Fail\n",
      "1576: 687476254459715584\n",
      "Fail\n",
      "1577: 687460506001633280\n",
      "Fail\n",
      "1578: 687399393394311168\n",
      "Fail\n",
      "1579: 687317306314240000\n",
      "Fail\n",
      "1580: 687312378585812992\n",
      "Fail\n",
      "1581: 687127927494963200\n",
      "Fail\n",
      "1582: 687124485711986689\n",
      "Fail\n",
      "1583: 687109925361856513\n",
      "Fail\n",
      "1584: 687102708889812993\n",
      "Fail\n",
      "1585: 687096057537363968\n",
      "Fail\n",
      "1586: 686947101016735744\n",
      "Fail\n",
      "1587: 686760001961103360\n",
      "Fail\n",
      "1588: 686749460672679938\n",
      "Fail\n",
      "1589: 686730991906516992\n",
      "Fail\n",
      "1590: 686683045143953408\n",
      "Fail\n",
      "1591: 686618349602762752\n",
      "Fail\n",
      "1592: 686606069955735556\n",
      "Fail\n",
      "1593: 686394059078897668\n",
      "Fail\n",
      "1594: 686386521809772549\n",
      "Fail\n",
      "1595: 686377065986265092\n",
      "Fail\n",
      "1596: 686358356425093120\n",
      "Fail\n",
      "1597: 686286779679375361\n",
      "Fail\n",
      "1598: 686050296934563840\n",
      "Fail\n",
      "1599: 686035780142297088\n",
      "Fail\n",
      "1600: 686034024800862208\n",
      "Fail\n",
      "1601: 686007916130873345\n",
      "Fail\n",
      "1602: 686003207160610816\n",
      "Fail\n",
      "1603: 685973236358713344\n",
      "Fail\n",
      "1604: 685943807276412928\n",
      "Fail\n",
      "1605: 685906723014619143\n",
      "Fail\n",
      "1606: 685681090388975616\n",
      "Fail\n",
      "1607: 685667379192414208\n",
      "Fail\n",
      "1608: 685663452032069632\n",
      "Fail\n",
      "1609: 685641971164143616\n",
      "Fail\n",
      "1610: 685547936038666240\n",
      "Fail\n",
      "1611: 685532292383666176\n",
      "Fail\n",
      "1612: 685325112850124800\n",
      "Fail\n",
      "1613: 685321586178670592\n",
      "Fail\n",
      "1614: 685315239903100929\n",
      "Fail\n",
      "1615: 685307451701334016\n",
      "Fail\n",
      "1616: 685268753634967552\n",
      "Fail\n",
      "1617: 685198997565345792\n",
      "Fail\n",
      "1618: 685169283572338688\n",
      "Fail\n",
      "1619: 684969860808454144\n",
      "Fail\n",
      "1620: 684959798585110529\n",
      "Fail\n",
      "1621: 684940049151070208\n",
      "Fail\n",
      "1622: 684926975086034944\n",
      "Fail\n",
      "1623: 684914660081053696\n",
      "Fail\n",
      "1624: 684902183876321280\n",
      "Fail\n",
      "1625: 684880619965411328\n",
      "Fail\n",
      "1626: 684830982659280897\n",
      "Fail\n",
      "1627: 684800227459624960\n",
      "Fail\n",
      "1628: 684594889858887680\n",
      "Fail\n",
      "1629: 684588130326986752\n",
      "Fail\n",
      "1630: 684567543613382656\n",
      "Fail\n",
      "1631: 684538444857667585\n",
      "Fail\n",
      "1632: 684481074559381504\n",
      "Fail\n",
      "1633: 684460069371654144\n",
      "Fail\n",
      "1634: 684241637099323392\n",
      "Fail\n",
      "1635: 684225744407494656\n",
      "Fail\n",
      "1636: 684222868335505415\n",
      "Fail\n",
      "1637: 684200372118904832\n",
      "Fail\n",
      "1638: 684195085588783105\n",
      "Fail\n",
      "1639: 684188786104872960\n",
      "Fail\n",
      "1640: 684177701129875456\n",
      "Fail\n",
      "1641: 684147889187209216\n",
      "Fail\n",
      "1642: 684122891630342144\n",
      "Fail\n",
      "1643: 684097758874210310\n",
      "Fail\n",
      "1644: 683857920510050305\n",
      "Fail\n",
      "1645: 683852578183077888\n",
      "Fail\n",
      "1646: 683849932751646720\n",
      "Fail\n",
      "1647: 683834909291606017\n",
      "Fail\n",
      "1648: 683828599284170753\n",
      "Fail\n",
      "1649: 683773439333797890\n",
      "Fail\n",
      "1650: 683742671509258241\n",
      "Fail\n",
      "1651: 683515932363329536\n",
      "Fail\n",
      "1652: 683498322573824003\n",
      "Fail\n",
      "1653: 683481228088049664\n",
      "Fail\n",
      "1654: 683462770029932544\n",
      "Fail\n",
      "1655: 683449695444799489\n",
      "Fail\n",
      "1656: 683391852557561860\n",
      "Fail\n",
      "1657: 683357973142474752\n",
      "Fail\n",
      "1658: 683142553609318400\n",
      "Fail\n",
      "1659: 683111407806746624\n",
      "Fail\n",
      "1660: 683098815881154561\n",
      "Fail\n",
      "1661: 683078886620553216\n",
      "Fail\n",
      "1662: 683030066213818368\n",
      "Fail\n",
      "1663: 682962037429899265\n",
      "Fail\n",
      "1664: 682808988178739200\n",
      "Fail\n",
      "1665: 682788441537560576\n",
      "Fail\n",
      "1666: 682750546109968385\n",
      "Fail\n",
      "1667: 682697186228989953\n",
      "Fail\n",
      "1668: 682662431982772225\n",
      "Fail\n",
      "1669: 682638830361513985\n",
      "Fail\n",
      "1670: 682429480204398592\n",
      "Fail\n",
      "1671: 682406705142087680\n",
      "Fail\n",
      "1672: 682393905736888321\n",
      "Fail\n",
      "1673: 682389078323662849\n",
      "Fail\n",
      "1674: 682303737705140231\n",
      "Fail\n",
      "1675: 682259524040966145\n",
      "Fail\n",
      "1676: 682242692827447297\n",
      "Fail\n",
      "1677: 682088079302213632\n",
      "Fail\n",
      "1678: 682059653698686977\n",
      "Fail\n",
      "1679: 682047327939461121\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Fail\n",
      "1680: 682032003584274432\n",
      "Fail\n",
      "1681: 682003177596559360\n",
      "Fail\n",
      "1682: 681981167097122816\n",
      "Fail\n",
      "1683: 681891461017812993\n",
      "Fail\n",
      "1684: 681694085539872773\n",
      "Fail\n",
      "1685: 681679526984871937\n",
      "Fail\n",
      "1686: 681654059175129088\n",
      "Fail\n",
      "1687: 681610798867845120\n",
      "Fail\n",
      "1688: 681579835668455424\n",
      "Fail\n",
      "1689: 681523177663676416\n",
      "Fail\n",
      "1690: 681340665377193984\n",
      "Fail\n",
      "1691: 681339448655802368\n",
      "Fail\n",
      "1692: 681320187870711809\n",
      "Fail\n",
      "1693: 681302363064414209\n",
      "Fail\n",
      "1694: 681297372102656000\n",
      "Fail\n",
      "1695: 681281657291280384\n",
      "Fail\n",
      "1696: 681261549936340994\n",
      "Fail\n",
      "1697: 681242418453299201\n",
      "Fail\n",
      "1698: 681231109724700672\n",
      "Fail\n",
      "1699: 681193455364796417\n",
      "Fail\n",
      "1700: 680970795137544192\n",
      "Fail\n",
      "1701: 680959110691590145\n",
      "Fail\n",
      "1702: 680940246314430465\n",
      "Fail\n",
      "1703: 680934982542561280\n",
      "Fail\n",
      "1704: 680913438424612864\n",
      "Fail\n",
      "1705: 680889648562991104\n",
      "Fail\n",
      "1706: 680836378243002368\n",
      "Fail\n",
      "1707: 680805554198020098\n",
      "Fail\n",
      "1708: 680801747103793152\n",
      "Fail\n",
      "1709: 680798457301471234\n",
      "Fail\n",
      "1710: 680609293079592961\n",
      "Fail\n",
      "1711: 680583894916304897\n",
      "Fail\n",
      "1712: 680497766108381184\n",
      "Fail\n",
      "1713: 680494726643068929\n",
      "Fail\n",
      "1714: 680473011644985345\n",
      "Fail\n",
      "1715: 680440374763077632\n",
      "Fail\n",
      "1716: 680221482581123072\n",
      "Fail\n",
      "1717: 680206703334408192\n",
      "Fail\n",
      "1718: 680191257256136705\n",
      "Fail\n",
      "1719: 680176173301628928\n",
      "Fail\n",
      "1720: 680161097740095489\n",
      "Fail\n",
      "1721: 680145970311643136\n",
      "Fail\n",
      "1722: 680130881361686529\n",
      "Fail\n",
      "1723: 680115823365742593\n",
      "Fail\n",
      "1724: 680100725817409536\n",
      "Fail\n",
      "1725: 680085611152338944\n",
      "Fail\n",
      "1726: 680070545539371008\n",
      "Fail\n",
      "1727: 680055455951884288\n",
      "Fail\n",
      "1728: 679877062409191424\n",
      "Fail\n",
      "1729: 679872969355714560\n",
      "Fail\n",
      "1730: 679862121895714818\n",
      "Fail\n",
      "1731: 679854723806179328\n",
      "Fail\n",
      "1732: 679844490799091713\n",
      "Fail\n",
      "1733: 679828447187857408\n",
      "Fail\n",
      "1734: 679777920601223168\n",
      "Fail\n",
      "1735: 679736210798047232\n",
      "Fail\n",
      "1736: 679729593985699840\n",
      "Fail\n",
      "1737: 679722016581222400\n",
      "Fail\n",
      "1738: 679530280114372609\n",
      "Fail\n",
      "1739: 679527802031484928\n",
      "Fail\n",
      "1740: 679511351870550016\n",
      "Fail\n",
      "1741: 679503373272485890\n",
      "Fail\n",
      "1742: 679475951516934144\n",
      "Fail\n",
      "1743: 679462823135686656\n",
      "Fail\n",
      "1744: 679405845277462528\n",
      "Fail\n",
      "1745: 679158373988876288\n",
      "Fail\n",
      "1746: 679148763231985668\n",
      "Fail\n",
      "1747: 679132435750195208\n",
      "Fail\n",
      "1748: 679111216690831360\n",
      "Fail\n",
      "1749: 679062614270468097\n",
      "Fail\n",
      "1750: 679047485189439488\n",
      "Fail\n",
      "1751: 679001094530465792\n",
      "Fail\n",
      "1752: 678991772295516161\n",
      "Fail\n",
      "1753: 678969228704284672\n",
      "Fail\n",
      "1754: 678800283649069056\n",
      "Fail\n",
      "1755: 678798276842360832\n",
      "Fail\n",
      "1756: 678774928607469569\n",
      "Fail\n",
      "1757: 678767140346941444\n",
      "Fail\n",
      "1758: 678764513869611008\n",
      "Fail\n",
      "1759: 678755239630127104\n",
      "Fail\n",
      "1760: 678740035362037760\n",
      "Fail\n",
      "1761: 678708137298427904\n",
      "Fail\n",
      "1762: 678675843183484930\n",
      "Fail\n",
      "1763: 678643457146150913\n",
      "Fail\n",
      "1764: 678446151570427904\n",
      "Fail\n",
      "1765: 678424312106393600\n",
      "Fail\n",
      "1766: 678410210315247616\n",
      "Fail\n",
      "1767: 678399652199309312\n",
      "Fail\n",
      "1768: 678396796259975168\n",
      "Fail\n",
      "1769: 678389028614488064\n",
      "Fail\n",
      "1770: 678380236862578688\n",
      "Fail\n",
      "1771: 678341075375947776\n",
      "Fail\n",
      "1772: 678334497360859136\n",
      "Fail\n",
      "1773: 678278586130948096\n",
      "Fail\n",
      "1774: 678255464182861824\n",
      "Fail\n",
      "1775: 678023323247357953\n",
      "Fail\n",
      "1776: 678021115718029313\n",
      "Fail\n",
      "1777: 677961670166224897\n",
      "Fail\n",
      "1778: 677918531514703872\n",
      "Fail\n",
      "1779: 677895101218201600\n",
      "Fail\n",
      "1780: 677716515794329600\n",
      "Fail\n",
      "1781: 677700003327029250\n",
      "Fail\n",
      "1782: 677698403548192770\n",
      "Fail\n",
      "1783: 677687604918272002\n",
      "Fail\n",
      "1784: 677673981332312066\n",
      "Fail\n",
      "1785: 677662372920729601\n",
      "Fail\n",
      "1786: 677644091929329666\n",
      "Fail\n",
      "1787: 677573743309385728\n",
      "Fail\n",
      "1788: 677565715327688705\n",
      "Fail\n",
      "1789: 677557565589463040\n",
      "Fail\n",
      "1790: 677547928504967168\n",
      "Fail\n",
      "1791: 677530072887205888\n",
      "Fail\n",
      "1792: 677335745548390400\n",
      "Fail\n",
      "1793: 677334615166730240\n",
      "Fail\n",
      "1794: 677331501395156992\n",
      "Fail\n",
      "1795: 677328882937298944\n",
      "Fail\n",
      "1796: 677314812125323265\n",
      "Fail\n",
      "1797: 677301033169788928\n",
      "Fail\n",
      "1798: 677269281705472000\n",
      "Fail\n",
      "1799: 677228873407442944\n",
      "Fail\n",
      "1800: 677187300187611136\n",
      "Fail\n",
      "1801: 676975532580409345\n",
      "Fail\n",
      "1802: 676957860086095872\n",
      "Fail\n",
      "1803: 676949632774234114\n",
      "Fail\n",
      "1804: 676948236477857792\n",
      "Fail\n",
      "1805: 676946864479084545\n",
      "Fail\n",
      "1806: 676942428000112642\n",
      "Fail\n",
      "1807: 676936541936185344\n",
      "Fail\n",
      "1808: 676916996760600576\n",
      "Fail\n",
      "1809: 676897532954456065\n",
      "Fail\n",
      "1810: 676864501615042560\n",
      "Fail\n",
      "1811: 676821958043033607\n",
      "Fail\n",
      "1812: 676819651066732545\n",
      "Fail\n",
      "1813: 676811746707918848\n",
      "Fail\n",
      "1814: 676776431406465024\n",
      "Fail\n",
      "1815: 676617503762681856\n",
      "Fail\n",
      "1816: 676613908052996102\n",
      "Fail\n",
      "1817: 676606785097199616\n",
      "Fail\n",
      "1818: 676603393314578432\n",
      "Fail\n",
      "1819: 676593408224403456\n",
      "Fail\n",
      "1820: 676590572941893632\n",
      "Fail\n",
      "1821: 676588346097852417\n",
      "Fail\n",
      "1822: 676582956622721024\n",
      "Fail\n",
      "1823: 676575501977128964\n",
      "Fail\n",
      "1824: 676533798876651520\n",
      "Fail\n",
      "1825: 676496375194980353\n",
      "Fail\n",
      "1826: 676470639084101634\n",
      "Fail\n",
      "1827: 676440007570247681\n",
      "Fail\n",
      "1828: 676430933382295552\n",
      "Fail\n",
      "1829: 676263575653122048\n",
      "Fail\n",
      "1830: 676237365392908289\n",
      "Fail\n",
      "1831: 676219687039057920\n",
      "Fail\n",
      "1832: 676215927814406144\n",
      "Fail\n",
      "1833: 676191832485810177\n",
      "Fail\n",
      "1834: 676146341966438401\n",
      "Fail\n",
      "1835: 676121918416756736\n",
      "Fail\n",
      "1836: 676101918813499392\n",
      "Fail\n",
      "1837: 676098748976615425\n",
      "Fail\n",
      "1838: 676089483918516224\n",
      "Fail\n",
      "1839: 675898130735476737\n",
      "Fail\n",
      "1840: 675891555769696257\n",
      "Fail\n",
      "1841: 675888385639251968\n",
      "Fail\n",
      "1842: 675878199931371520\n",
      "Fail\n",
      "1843: 675870721063669760\n",
      "Fail\n",
      "1844: 675853064436391936\n",
      "Fail\n",
      "1845: 675849018447167488\n",
      "Fail\n",
      "1846: 675845657354215424\n",
      "Fail\n",
      "1847: 675822767435051008\n",
      "Fail\n",
      "1848: 675820929667219457\n",
      "Fail\n",
      "1849: 675798442703122432\n",
      "Fail\n",
      "1850: 675781562965868544\n",
      "Fail\n",
      "1851: 675740360753160193\n",
      "Fail\n",
      "1852: 675710890956750848\n",
      "Fail\n",
      "1853: 675707330206547968\n",
      "Fail\n",
      "1854: 675706639471788032\n",
      "Fail\n",
      "1855: 675534494439489536\n",
      "Fail\n",
      "1856: 675531475945709568\n",
      "Fail\n",
      "1857: 675522403582218240\n",
      "Fail\n",
      "1858: 675517828909424640\n",
      "Fail\n",
      "1859: 675501075957489664\n",
      "Fail\n",
      "1860: 675497103322386432\n",
      "Fail\n",
      "1861: 675489971617296384\n",
      "Fail\n",
      "1862: 675483430902214656\n",
      "Fail\n",
      "1863: 675432746517426176\n",
      "Fail\n",
      "1864: 675372240448454658\n",
      "Fail\n",
      "1865: 675362609739206656\n",
      "Fail\n",
      "1866: 675354435921575936\n",
      "Fail\n",
      "1867: 675349384339542016\n",
      "Fail\n",
      "1868: 675334060156301312\n",
      "Fail\n",
      "1869: 675166823650848770\n",
      "Fail\n",
      "1870: 675153376133427200\n",
      "Fail\n",
      "1871: 675149409102012420\n",
      "Fail\n",
      "1872: 675147105808306176\n",
      "Fail\n",
      "1873: 675146535592706048\n",
      "Fail\n",
      "1874: 675145476954566656\n",
      "Fail\n",
      "1875: 675135153782571009\n",
      "Fail\n",
      "1876: 675113801096802304\n",
      "Fail\n",
      "1877: 675111688094527488\n",
      "Fail\n",
      "1878: 675109292475830276\n",
      "Fail\n",
      "1879: 675047298674663426\n",
      "Fail\n",
      "1880: 675015141583413248\n",
      "Fail\n",
      "1881: 675006312288268288\n",
      "Fail\n",
      "1882: 675003128568291329\n",
      "Fail\n",
      "1883: 674999807681908736\n",
      "Fail\n",
      "1884: 674805413498527744\n",
      "Fail\n",
      "1885: 674800520222154752\n",
      "Fail\n",
      "1886: 674793399141146624\n",
      "Fail\n",
      "1887: 674790488185167872\n",
      "Fail\n",
      "1888: 674788554665512960\n",
      "Fail\n",
      "1889: 674781762103414784\n",
      "Fail\n",
      "1890: 674774481756377088\n",
      "Fail\n",
      "1891: 674767892831932416\n",
      "Fail\n",
      "1892: 674764817387900928\n",
      "Fail\n",
      "1893: 674754018082705410\n",
      "Fail\n",
      "1894: 674752233200820224\n",
      "Fail\n",
      "1895: 674743008475090944\n",
      "Fail\n",
      "1896: 674742531037511680\n",
      "Fail\n",
      "1897: 674739953134403584\n",
      "Fail\n",
      "1898: 674737130913071104\n",
      "Fail\n",
      "1899: 674690135443775488\n",
      "Fail\n",
      "1900: 674670581682434048\n",
      "Fail\n",
      "1901: 674664755118911488\n",
      "Fail\n",
      "1902: 674646392044941312\n",
      "Fail\n",
      "1903: 674644256330530816\n",
      "Fail\n",
      "1904: 674638615994089473\n",
      "Fail\n",
      "1905: 674632714662858753\n",
      "Fail\n",
      "1906: 674606911342424069\n",
      "Fail\n",
      "1907: 674468880899788800\n",
      "Fail\n",
      "1908: 674447403907457024\n",
      "Fail\n",
      "1909: 674436901579923456\n",
      "Fail\n",
      "1910: 674422304705744896\n",
      "Fail\n",
      "1911: 674416750885273600\n",
      "Fail\n",
      "1912: 674410619106390016\n",
      "Fail\n",
      "1913: 674394782723014656\n",
      "Fail\n",
      "1914: 674372068062928900\n",
      "Fail\n",
      "1915: 674330906434379776\n",
      "Fail\n",
      "1916: 674318007229923329\n",
      "Fail\n",
      "1917: 674307341513269249\n",
      "Fail\n",
      "1918: 674291837063053312\n",
      "Fail\n",
      "1919: 674271431610523648\n",
      "Fail\n",
      "1920: 674269164442398721\n",
      "Fail\n",
      "1921: 674265582246694913\n",
      "Fail\n",
      "1922: 674262580978937856\n",
      "Fail\n",
      "1923: 674255168825880576\n",
      "Fail\n",
      "1924: 674082852460433408\n",
      "Fail\n",
      "1925: 674075285688614912\n",
      "Fail\n",
      "1926: 674063288070742018\n",
      "Fail\n",
      "1927: 674053186244734976\n",
      "Fail\n",
      "1928: 674051556661161984\n",
      "Fail\n",
      "1929: 674045139690631169\n",
      "Fail\n",
      "1930: 674042553264685056\n",
      "Fail\n",
      "1931: 674038233588723717\n",
      "Fail\n",
      "1932: 674036086168010753\n",
      "Fail\n",
      "1933: 674024893172875264\n",
      "Fail\n",
      "1934: 674019345211760640\n",
      "Fail\n",
      "1935: 674014384960745472\n",
      "Fail\n",
      "1936: 674008982932058114\n",
      "Fail\n",
      "1937: 673956914389192708\n",
      "Fail\n",
      "1938: 673919437611909120\n",
      "Fail\n",
      "1939: 673906403526995968\n",
      "Fail\n",
      "1940: 673887867907739649\n",
      "Fail\n",
      "1941: 673716320723169284\n",
      "Fail\n",
      "1942: 673715861853720576\n",
      "Fail\n",
      "1943: 673711475735838725\n",
      "Fail\n",
      "1944: 673709992831262724\n",
      "Fail\n",
      "1945: 673708611235921920\n",
      "Fail\n",
      "1946: 673707060090052608\n",
      "Fail\n",
      "1947: 673705679337693185\n",
      "Fail\n",
      "1948: 673700254269775872\n",
      "Fail\n",
      "1949: 673697980713705472\n",
      "Fail\n",
      "1950: 673689733134946305\n",
      "Fail\n",
      "1951: 673688752737402881\n",
      "Fail\n",
      "1952: 673686845050527744\n",
      "Fail\n",
      "1953: 673680198160809984\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Fail\n",
      "1954: 673662677122719744\n",
      "Fail\n",
      "1955: 673656262056419329\n",
      "Fail\n",
      "1956: 673636718965334016\n",
      "Fail\n",
      "1957: 673612854080196609\n",
      "Fail\n",
      "1958: 673583129559498752\n",
      "Fail\n",
      "1959: 673580926094458881\n",
      "Fail\n",
      "1960: 673576835670777856\n",
      "Fail\n",
      "1961: 673363615379013632\n",
      "Fail\n",
      "1962: 673359818736984064\n",
      "Fail\n",
      "1963: 673355879178194945\n",
      "Fail\n",
      "1964: 673352124999274496\n",
      "Fail\n",
      "1965: 673350198937153538\n",
      "Fail\n",
      "1966: 673345638550134785\n",
      "Fail\n",
      "1967: 673343217010679808\n",
      "Fail\n",
      "1968: 673342308415348736\n",
      "Fail\n",
      "1969: 673320132811366400\n",
      "Fail\n",
      "1970: 673317986296586240\n",
      "Fail\n",
      "1971: 673295268553605120\n",
      "Fail\n",
      "1972: 673270968295534593\n",
      "Fail\n",
      "1973: 673240798075449344\n",
      "Fail\n",
      "1974: 673213039743795200\n",
      "Fail\n",
      "1975: 673148804208660480\n",
      "Fail\n",
      "1976: 672997845381865473\n",
      "Fail\n",
      "1977: 672995267319328768\n",
      "Fail\n",
      "1978: 672988786805112832\n",
      "Fail\n",
      "1979: 672984142909456390\n",
      "Fail\n",
      "1980: 672980819271634944\n",
      "Fail\n",
      "1981: 672975131468300288\n",
      "Fail\n",
      "1982: 672970152493887488\n",
      "Fail\n",
      "1983: 672968025906282496\n",
      "Fail\n",
      "1984: 672964561327235073\n",
      "Fail\n",
      "1985: 672902681409806336\n",
      "Fail\n",
      "1986: 672898206762672129\n",
      "Fail\n",
      "1987: 672884426393653248\n",
      "Fail\n",
      "1988: 672877615439593473\n",
      "Fail\n",
      "1989: 672834301050937345\n",
      "Fail\n",
      "1990: 672828477930868736\n",
      "Fail\n",
      "1991: 672640509974827008\n",
      "Fail\n",
      "1992: 672622327801233409\n",
      "Fail\n",
      "1993: 672614745925664768\n",
      "Fail\n",
      "1994: 672609152938721280\n",
      "Fail\n",
      "1995: 672604026190569472\n",
      "Fail\n",
      "1996: 672594978741354496\n",
      "Fail\n",
      "1997: 672591762242805761\n",
      "Fail\n",
      "1998: 672591271085670400\n",
      "Fail\n",
      "1999: 672538107540070400\n",
      "Fail\n",
      "2000: 672523490734551040\n",
      "Fail\n",
      "2001: 672488522314567680\n",
      "Fail\n",
      "2002: 672482722825261057\n",
      "Fail\n",
      "2003: 672481316919734272\n",
      "Fail\n",
      "2004: 672475084225949696\n",
      "Fail\n",
      "2005: 672466075045466113\n",
      "Fail\n",
      "2006: 672272411274932228\n",
      "Fail\n",
      "2007: 672267570918129665\n",
      "Fail\n",
      "2008: 672264251789176834\n",
      "Fail\n",
      "2009: 672256522047614977\n",
      "Fail\n",
      "2010: 672254177670729728\n",
      "Fail\n",
      "2011: 672248013293752320\n",
      "Fail\n",
      "2012: 672245253877968896\n",
      "Fail\n",
      "2013: 672239279297454080\n",
      "Fail\n",
      "2014: 672231046314901505\n",
      "Fail\n",
      "2015: 672222792075620352\n",
      "Fail\n",
      "2016: 672205392827572224\n",
      "Fail\n",
      "2017: 672169685991993344\n",
      "Fail\n",
      "2018: 672160042234327040\n",
      "Fail\n",
      "2019: 672139350159835138\n",
      "Fail\n",
      "2020: 672125275208069120\n",
      "Fail\n",
      "2021: 672095186491711488\n",
      "Fail\n",
      "2022: 672082170312290304\n",
      "Fail\n",
      "2023: 672068090318987265\n",
      "Fail\n",
      "2024: 671896809300709376\n",
      "Fail\n",
      "2025: 671891728106971137\n",
      "Fail\n",
      "2026: 671882082306625538\n",
      "Fail\n",
      "2027: 671879137494245376\n",
      "Fail\n",
      "2028: 671874878652489728\n",
      "Fail\n",
      "2029: 671866342182637568\n",
      "Fail\n",
      "2030: 671855973984772097\n",
      "Fail\n",
      "2031: 671789708968640512\n",
      "Fail\n",
      "2032: 671768281401958400\n",
      "Fail\n",
      "2033: 671763349865160704\n",
      "Fail\n",
      "2034: 671744970634719232\n",
      "Fail\n",
      "2035: 671743150407421952\n",
      "Fail\n",
      "2036: 671735591348891648\n",
      "Fail\n",
      "2037: 671729906628341761\n",
      "Fail\n",
      "2038: 671561002136281088\n",
      "Fail\n",
      "2039: 671550332464455680\n",
      "Fail\n",
      "2040: 671547767500775424\n",
      "Fail\n",
      "2041: 671544874165002241\n",
      "Fail\n",
      "2042: 671542985629241344\n",
      "Fail\n",
      "2043: 671538301157904385\n",
      "Fail\n",
      "2044: 671536543010570240\n",
      "Fail\n",
      "2045: 671533943490011136\n",
      "Fail\n",
      "2046: 671528761649688577\n",
      "Fail\n",
      "2047: 671520732782923777\n",
      "Fail\n",
      "2048: 671518598289059840\n",
      "Fail\n",
      "2049: 671511350426865664\n",
      "Fail\n",
      "2050: 671504605491109889\n",
      "Fail\n",
      "2051: 671497587707535361\n",
      "Fail\n",
      "2052: 671488513339211776\n",
      "Fail\n",
      "2053: 671486386088865792\n",
      "Fail\n",
      "2054: 671485057807351808\n",
      "Fail\n",
      "2055: 671390180817915904\n",
      "Fail\n",
      "2056: 671362598324076544\n",
      "Fail\n",
      "2057: 671357843010908160\n",
      "Fail\n",
      "2058: 671355857343524864\n",
      "Fail\n",
      "2059: 671347597085433856\n",
      "Fail\n",
      "2060: 671186162933985280\n",
      "Fail\n",
      "2061: 671182547775299584\n",
      "Fail\n",
      "2062: 671166507850801152\n",
      "Fail\n",
      "2063: 671163268581498880\n",
      "Fail\n",
      "2064: 671159727754231808\n",
      "Fail\n",
      "2065: 671154572044468225\n",
      "Fail\n",
      "2066: 671151324042559489\n",
      "Fail\n",
      "2067: 671147085991960577\n",
      "Fail\n",
      "2068: 671141549288370177\n",
      "Fail\n",
      "2069: 671138694582165504\n",
      "Fail\n",
      "2070: 671134062904504320\n",
      "Fail\n",
      "2071: 671122204919246848\n",
      "Fail\n",
      "2072: 671115716440031232\n",
      "Fail\n",
      "2073: 671109016219725825\n",
      "Fail\n",
      "2074: 670995969505435648\n",
      "Fail\n",
      "2075: 670842764863651840\n",
      "Fail\n",
      "2076: 670840546554966016\n",
      "Fail\n",
      "2077: 670838202509447168\n",
      "Fail\n",
      "2078: 670833812859932673\n",
      "Fail\n",
      "2079: 670832455012716544\n",
      "Fail\n",
      "2080: 670826280409919488\n",
      "Fail\n",
      "2081: 670823764196741120\n",
      "Fail\n",
      "2082: 670822709593571328\n",
      "Fail\n",
      "2083: 670815497391357952\n",
      "Fail\n",
      "2084: 670811965569282048\n",
      "Fail\n",
      "2085: 670807719151067136\n",
      "Fail\n",
      "2086: 670804601705242624\n",
      "Fail\n",
      "2087: 670803562457407488\n",
      "Fail\n",
      "2088: 670797304698376195\n",
      "Fail\n",
      "2089: 670792680469889025\n",
      "Fail\n",
      "2090: 670789397210615808\n",
      "Fail\n",
      "2091: 670786190031921152\n",
      "Fail\n",
      "2092: 670783437142401025\n",
      "Fail\n",
      "2093: 670782429121134593\n",
      "Fail\n",
      "2094: 670780561024270336\n",
      "Fail\n",
      "2095: 670778058496974848\n",
      "Fail\n",
      "2096: 670764103623966721\n",
      "Fail\n",
      "2097: 670755717859713024\n",
      "Fail\n",
      "2098: 670733412878163972\n",
      "Fail\n",
      "2099: 670727704916926465\n",
      "Fail\n",
      "2100: 670717338665226240\n",
      "Fail\n",
      "2101: 670704688707301377\n",
      "Fail\n",
      "2102: 670691627984359425\n",
      "Fail\n",
      "2103: 670679630144274432\n",
      "Fail\n",
      "2104: 670676092097810432\n",
      "Fail\n",
      "2105: 670668383499735048\n",
      "Fail\n",
      "2106: 670474236058800128\n",
      "Fail\n",
      "2107: 670468609693655041\n",
      "Fail\n",
      "2108: 670465786746662913\n",
      "Fail\n",
      "2109: 670452855871037440\n",
      "Fail\n",
      "2110: 670449342516494336\n",
      "Fail\n",
      "2111: 670444955656130560\n",
      "Fail\n",
      "2112: 670442337873600512\n",
      "Fail\n",
      "2113: 670435821946826752\n",
      "Fail\n",
      "2114: 670434127938719744\n",
      "Fail\n",
      "2115: 670433248821026816\n",
      "Fail\n",
      "2116: 670428280563085312\n",
      "Fail\n",
      "2117: 670427002554466305\n",
      "Fail\n",
      "2118: 670421925039075328\n",
      "Fail\n",
      "2119: 670420569653809152\n",
      "Fail\n",
      "2120: 670417414769758208\n",
      "Fail\n",
      "2121: 670411370698022913\n",
      "Fail\n",
      "2122: 670408998013820928\n",
      "Fail\n",
      "2123: 670403879788544000\n",
      "Fail\n",
      "2124: 670385711116361728\n",
      "Fail\n",
      "2125: 670374371102445568\n",
      "Fail\n",
      "2126: 670361874861563904\n",
      "Fail\n",
      "2127: 670338931251150849\n",
      "Fail\n",
      "2128: 670319130621435904\n",
      "Fail\n",
      "2129: 670303360680108032\n",
      "Fail\n",
      "2130: 670290420111441920\n",
      "Fail\n",
      "2131: 670093938074779648\n",
      "Fail\n",
      "2132: 670086499208155136\n",
      "Fail\n",
      "2133: 670079681849372674\n",
      "Fail\n",
      "2134: 670073503555706880\n",
      "Fail\n",
      "2135: 670069087419133954\n",
      "Fail\n",
      "2136: 670061506722140161\n",
      "Fail\n",
      "2137: 670055038660800512\n",
      "Fail\n",
      "2138: 670046952931721218\n",
      "Fail\n",
      "2139: 670040295598354432\n",
      "Fail\n",
      "2140: 670037189829525505\n",
      "Fail\n",
      "2141: 670003130994700288\n",
      "Fail\n",
      "2142: 669993076832759809\n",
      "Fail\n",
      "2143: 669972011175813120\n",
      "Fail\n",
      "2144: 669970042633789440\n",
      "Fail\n",
      "2145: 669942763794931712\n",
      "Fail\n",
      "2146: 669926384437997569\n",
      "Fail\n",
      "2147: 669923323644657664\n",
      "Fail\n",
      "2148: 669753178989142016\n",
      "Fail\n",
      "2149: 669749430875258880\n",
      "Fail\n",
      "2150: 669684865554620416\n",
      "Fail\n",
      "2151: 669683899023405056\n",
      "Fail\n",
      "2152: 669682095984410625\n",
      "Fail\n",
      "2153: 669680153564442624\n",
      "Fail\n",
      "2154: 669661792646373376\n",
      "Fail\n",
      "2155: 669625907762618368\n",
      "Fail\n",
      "2156: 669603084620980224\n",
      "Fail\n",
      "2157: 669597912108789760\n",
      "Fail\n",
      "2158: 669583744538451968\n",
      "Fail\n",
      "2159: 669573570759163904\n",
      "Fail\n",
      "2160: 669571471778410496\n",
      "Fail\n",
      "2161: 669567591774625800\n",
      "Fail\n",
      "2162: 669564461267722241\n",
      "Fail\n",
      "2163: 669393256313184256\n",
      "Fail\n",
      "2164: 669375718304980992\n",
      "Fail\n",
      "2165: 669371483794317312\n",
      "Fail\n",
      "2166: 669367896104181761\n",
      "Fail\n",
      "2167: 669363888236994561\n",
      "Fail\n",
      "2168: 669359674819481600\n",
      "Fail\n",
      "2169: 669354382627049472\n",
      "Fail\n",
      "2170: 669353438988365824\n",
      "Fail\n",
      "2171: 669351434509529089\n",
      "Fail\n",
      "2172: 669328503091937280\n",
      "Fail\n",
      "2173: 669327207240699904\n",
      "Fail\n",
      "2174: 669324657376567296\n",
      "Fail\n",
      "2175: 669216679721873412\n",
      "Fail\n",
      "2176: 669214165781868544\n",
      "Fail\n",
      "2177: 669203728096960512\n",
      "Fail\n",
      "2178: 669037058363662336\n",
      "Fail\n",
      "2179: 669015743032369152\n",
      "Fail\n",
      "2180: 669006782128353280\n",
      "Fail\n",
      "2181: 669000397445533696\n",
      "Fail\n",
      "2182: 668994913074286592\n",
      "Fail\n",
      "2183: 668992363537309700\n",
      "Fail\n",
      "2184: 668989615043424256\n",
      "Fail\n",
      "2185: 668988183816871936\n",
      "Fail\n",
      "2186: 668986018524233728\n",
      "Fail\n",
      "2187: 668981893510119424\n",
      "Fail\n",
      "2188: 668979806671884288\n",
      "Fail\n",
      "2189: 668975677807423489\n",
      "Fail\n",
      "2190: 668967877119254528\n",
      "Fail\n",
      "2191: 668960084974809088\n",
      "Fail\n",
      "2192: 668955713004314625\n",
      "Fail\n",
      "2193: 668932921458302977\n",
      "Fail\n",
      "2194: 668902994700836864\n",
      "Fail\n",
      "2195: 668892474547511297\n",
      "Fail\n",
      "2196: 668872652652679168\n",
      "Fail\n",
      "2197: 668852170888998912\n",
      "Fail\n",
      "2198: 668826086256599040\n",
      "Fail\n",
      "2199: 668815180734689280\n",
      "Fail\n",
      "2200: 668779399630725120\n",
      "Fail\n",
      "2201: 668655139528511488\n",
      "Fail\n",
      "2202: 668645506898350081\n",
      "Fail\n",
      "2203: 668643542311546881\n",
      "Fail\n",
      "2204: 668641109086707712\n",
      "Fail\n",
      "2205: 668636665813057536\n",
      "Fail\n",
      "2206: 668633411083464705\n",
      "Fail\n",
      "2207: 668631377374486528\n",
      "Fail\n",
      "2208: 668627278264475648\n",
      "Fail\n",
      "2209: 668625577880875008\n",
      "Fail\n",
      "2210: 668623201287675904\n",
      "Fail\n",
      "2211: 668620235289837568\n",
      "Fail\n",
      "2212: 668614819948453888\n",
      "Fail\n",
      "2213: 668587383441514497\n",
      "Fail\n",
      "2214: 668567822092664832\n",
      "Fail\n",
      "2215: 668544745690562560\n",
      "Fail\n",
      "2216: 668542336805281792\n",
      "Fail\n",
      "2217: 668537837512433665\n",
      "Fail\n",
      "2218: 668528771708952576\n",
      "Fail\n",
      "2219: 668507509523615744\n",
      "Fail\n",
      "2220: 668496999348633600\n",
      "Fail\n",
      "2221: 668484198282485761\n",
      "Fail\n",
      "2222: 668480044826800133\n",
      "Fail\n",
      "2223: 668466899341221888\n",
      "Fail\n",
      "2224: 668297328638447616\n",
      "Fail\n",
      "2225: 668291999406125056\n",
      "Fail\n",
      "2226: 668286279830867968\n",
      "Fail\n",
      "2227: 668274247790391296\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Fail\n",
      "2228: 668268907921326080\n",
      "Fail\n",
      "2229: 668256321989451776\n",
      "Fail\n",
      "2230: 668248472370458624\n",
      "Fail\n",
      "2231: 668237644992782336\n",
      "Fail\n",
      "2232: 668226093875376128\n",
      "Fail\n",
      "2233: 668221241640230912\n",
      "Fail\n",
      "2234: 668204964695683073\n",
      "Fail\n",
      "2235: 668190681446379520\n",
      "Fail\n",
      "2236: 668171859951755264\n",
      "Fail\n",
      "2237: 668154635664932864\n",
      "Fail\n",
      "2238: 668142349051129856\n",
      "Fail\n",
      "2239: 668113020489474048\n",
      "Fail\n",
      "2240: 667937095915278337\n",
      "Fail\n",
      "2241: 667924896115245057\n",
      "Fail\n",
      "2242: 667915453470232577\n",
      "Fail\n",
      "2243: 667911425562669056\n",
      "Fail\n",
      "2244: 667902449697558528\n",
      "Fail\n",
      "2245: 667886921285246976\n",
      "Fail\n",
      "2246: 667885044254572545\n",
      "Fail\n",
      "2247: 667878741721415682\n",
      "Fail\n",
      "2248: 667873844930215936\n",
      "Fail\n",
      "2249: 667866724293877760\n",
      "Fail\n",
      "2250: 667861340749471744\n",
      "Fail\n",
      "2251: 667832474953625600\n",
      "Fail\n",
      "2252: 667806454573760512\n",
      "Fail\n",
      "2253: 667801013445750784\n",
      "Fail\n",
      "2254: 667793409583771648\n",
      "Fail\n",
      "2255: 667782464991965184\n",
      "Fail\n",
      "2256: 667773195014021121\n",
      "Fail\n",
      "2257: 667766675769573376\n",
      "Fail\n",
      "2258: 667728196545200128\n",
      "Fail\n",
      "2259: 667724302356258817\n",
      "Fail\n",
      "2260: 667550904950915073\n",
      "Fail\n",
      "2261: 667550882905632768\n",
      "Fail\n",
      "2262: 667549055577362432\n",
      "Fail\n",
      "2263: 667546741521195010\n",
      "Fail\n",
      "2264: 667544320556335104\n",
      "Fail\n",
      "2265: 667538891197542400\n",
      "Fail\n",
      "2266: 667534815156183040\n",
      "Fail\n",
      "2267: 667530908589760512\n",
      "Fail\n",
      "2268: 667524857454854144\n",
      "Fail\n",
      "2269: 667517642048163840\n",
      "Fail\n",
      "2270: 667509364010450944\n",
      "Fail\n",
      "2271: 667502640335572993\n",
      "Fail\n",
      "2272: 667495797102141441\n",
      "Fail\n",
      "2273: 667491009379606528\n",
      "Fail\n",
      "2274: 667470559035432960\n",
      "Fail\n",
      "2275: 667455448082227200\n",
      "Fail\n",
      "2276: 667453023279554560\n",
      "Fail\n",
      "2277: 667443425659232256\n",
      "Fail\n",
      "2278: 667437278097252352\n",
      "Fail\n",
      "2279: 667435689202614272\n",
      "Fail\n",
      "2280: 667405339315146752\n",
      "Fail\n",
      "2281: 667393430834667520\n",
      "Fail\n",
      "2282: 667369227918143488\n",
      "Fail\n",
      "2283: 667211855547486208\n",
      "Fail\n",
      "2284: 667200525029539841\n",
      "Fail\n",
      "2285: 667192066997374976\n",
      "Fail\n",
      "2286: 667188689915760640\n",
      "Fail\n",
      "2287: 667182792070062081\n",
      "Fail\n",
      "2288: 667177989038297088\n",
      "Fail\n",
      "2289: 667176164155375616\n",
      "Fail\n",
      "2290: 667174963120574464\n",
      "Fail\n",
      "2291: 667171260800061440\n",
      "Fail\n",
      "2292: 667165590075940865\n",
      "Fail\n",
      "2293: 667160273090932737\n",
      "Fail\n",
      "2294: 667152164079423490\n",
      "Fail\n",
      "2295: 667138269671505920\n",
      "Fail\n",
      "2296: 667119796878725120\n",
      "Fail\n",
      "2297: 667090893657276420\n",
      "Fail\n",
      "2298: 667073648344346624\n",
      "Fail\n",
      "2299: 667070482143944705\n",
      "Fail\n",
      "2300: 667065535570550784\n",
      "Fail\n",
      "2301: 667062181243039745\n",
      "Fail\n",
      "2302: 667044094246576128\n",
      "Fail\n",
      "2303: 667012601033924608\n",
      "Fail\n",
      "2304: 666996132027977728\n",
      "Fail\n",
      "2305: 666983947667116034\n",
      "Fail\n",
      "2306: 666837028449972224\n",
      "Fail\n",
      "2307: 666835007768551424\n",
      "Fail\n",
      "2308: 666826780179869698\n",
      "Fail\n",
      "2309: 666817836334096384\n",
      "Fail\n",
      "2310: 666804364988780544\n",
      "Fail\n",
      "2311: 666786068205871104\n",
      "Fail\n",
      "2312: 666781792255496192\n",
      "Fail\n",
      "2313: 666776908487630848\n",
      "Fail\n",
      "2314: 666739327293083650\n",
      "Fail\n",
      "2315: 666701168228331520\n",
      "Fail\n",
      "2316: 666691418707132416\n",
      "Fail\n",
      "2317: 666649482315059201\n",
      "Fail\n",
      "2318: 666644823164719104\n",
      "Fail\n",
      "2319: 666454714377183233\n",
      "Fail\n",
      "2320: 666447344410484738\n",
      "Fail\n",
      "2321: 666437273139982337\n",
      "Fail\n",
      "2322: 666435652385423360\n",
      "Fail\n",
      "2323: 666430724426358785\n",
      "Fail\n",
      "2324: 666428276349472768\n",
      "Fail\n",
      "2325: 666421158376562688\n",
      "Fail\n",
      "2326: 666418789513326592\n",
      "Fail\n",
      "2327: 666411507551481857\n",
      "Fail\n",
      "2328: 666407126856765440\n",
      "Fail\n",
      "2329: 666396247373291520\n",
      "Fail\n",
      "2330: 666373753744588802\n",
      "Fail\n",
      "2331: 666362758909284353\n",
      "Fail\n",
      "2332: 666353288456101888\n",
      "Fail\n",
      "2333: 666345417576210432\n",
      "Fail\n",
      "2334: 666337882303524864\n",
      "Fail\n",
      "2335: 666293911632134144\n",
      "Fail\n",
      "2336: 666287406224695296\n",
      "Fail\n",
      "2337: 666273097616637952\n",
      "Fail\n",
      "2338: 666268910803644416\n",
      "Fail\n",
      "2339: 666104133288665088\n",
      "Fail\n",
      "2340: 666102155909144576\n",
      "Fail\n",
      "2341: 666099513787052032\n",
      "Fail\n",
      "2342: 666094000022159362\n",
      "Fail\n",
      "2343: 666082916733198337\n",
      "Fail\n",
      "2344: 666073100786774016\n",
      "Fail\n",
      "2345: 666071193221509120\n",
      "Fail\n",
      "2346: 666063827256086533\n",
      "Fail\n",
      "2347: 666058600524156928\n",
      "Fail\n",
      "2348: 666057090499244032\n",
      "Fail\n",
      "2349: 666055525042405380\n",
      "Fail\n",
      "2350: 666051853826850816\n",
      "Fail\n",
      "2351: 666050758794694657\n",
      "Fail\n",
      "2352: 666049248165822465\n",
      "Fail\n",
      "2353: 666044226329800704\n",
      "Fail\n",
      "2354: 666033412701032449\n",
      "Fail\n",
      "2355: 666029285002620928\n",
      "Fail\n",
      "2356: 666020888022790149\n",
      "Fail\n",
      "1190.5798853\n",
      "{892420643555336193: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 892177421306343426: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 891815181378084864: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 891689557279858688: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 891327558926688256: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 891087950875897856: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 890971913173991426: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 890729181411237888: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 890609185150312448: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 890240255349198849: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 890006608113172480: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 889880896479866881: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 889665388333682689: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 889638837579907072: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 889531135344209921: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 889278841981685760: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 888917238123831296: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 888804989199671297: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 888554962724278272: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 888202515573088257: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 888078434458587136: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 887705289381826560: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 887517139158093824: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 887473957103951883: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 887343217045368832: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 887101392804085760: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 886983233522544640: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 886736880519319552: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 886680336477933568: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 886366144734445568: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 886267009285017600: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 886258384151887873: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 886054160059072513: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 885984800019947520: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 885528943205470208: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 885518971528720385: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 885311592912609280: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 885167619883638784: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 884925521741709313: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 884876753390489601: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 884562892145688576: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 884441805382717440: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 884247878851493888: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 884162670584377345: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 883838122936631299: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 883482846933004288: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 883360690899218434: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 883117836046086144: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 882992080364220416: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 882762694511734784: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 882627270321602560: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 882268110199369728: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 882045870035918850: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 881906580714921986: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 881666595344535552: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 881633300179243008: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 881536004380872706: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 881268444196462592: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 880935762899988482: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 880872448815771648: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 880465832366813184: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 880221127280381952: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 880095782870896641: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 879862464715927552: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 879674319642796034: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 879492040517615616: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 879415818425184262: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 879376492567855104: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 879130579576475649: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 879050749262655488: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 879008229531029506: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 878776093423087618: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 878604707211726852: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 878404777348136964: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 878316110768087041: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 878281511006478336: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 878057613040115712: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 877736472329191424: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 877611172832227328: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 877556246731214848: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 877316821321428993: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 877201837425926144: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 876838120628539392: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 876537666061221889: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 876484053909872640: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 876120275196170240: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 875747767867523072: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 875144289856114688: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 875097192612077568: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 875021211251597312: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 874680097055178752: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 874434818259525634: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 874296783580663808: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 874057562936811520: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 874012996292530176: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 873697596434513921: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 873580283840344065: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 873337748698140672: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 873213775632977920: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 872967104147763200: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 872820683541237760: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 872668790621863937: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 872620804844003328: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 872486979161796608: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 872261713294495745: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 872122724285648897: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 871879754684805121: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 871762521631449091: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 871515927908634625: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 871166179821445120: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 871102520638267392: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 871032628920680449: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 870804317367881728: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 870726314365509632: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 870656317836468226: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 870374049280663552: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 870308999962521604: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 870063196459192321: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 869988702071779329: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 869772420881756160: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 869702957897576449: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 869596645499047938: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 869227993411051520: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 868880397819494401: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 868639477480148993: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 868622495443632128: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 868552278524837888: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 867900495410671616: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 867774946302451713: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 867421006826221569: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 867072653475098625: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 867051520902168576: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 866816280283807744: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 866720684873056260: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 866686824827068416: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 866450705531457537: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 866334964761202691: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 866094527597207552: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 865718153858494464: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 865359393868664832: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 865006731092295680: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 864873206498414592: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 864279568663928832: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 864197398364647424: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 863907417377173506: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 863553081350529029: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 863471782782697472: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 863432100342583297: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 863427515083354112: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 863079547188785154: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 863062471531167744: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 862831371563274240: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 862722525377298433: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 862457590147678208: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 862096992088072192: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 861769973181624320: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 861383897657036800: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 861288531465048066: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 861005113778896900: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 860981674716409858: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 860924035999428608: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 860563773140209665: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 860524505164394496: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 860276583193509888: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 860184849394610176: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 860177593139703809: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 859924526012018688: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 859851578198683649: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 859607811541651456: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 859196978902773760: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 859074603037188101: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 858860390427611136: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 858843525470990336: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 858471635011153920: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 858107933456039936: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 857989990357356544: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 857746408056729600: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 857393404942143489: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 857263160327368704: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 857214891891077121: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 857062103051644929: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 857029823797047296: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 856602993587888130: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 856543823941562368: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 856526610513747968: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 856330835276025856: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 856288084350160898: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 856282028240666624: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 855862651834028034: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 855860136149123072: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 855857698524602368: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 855851453814013952: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 855818117272018944: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 855459453768019968: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 855245323840757760: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 855138241867124737: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 854732716440526848: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 854482394044301312: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 854365224396361728: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 854120357044912130: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 854010172552949760: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 853760880890318849: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 853639147608842240: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 853299958564483072: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 852936405516943360: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 852912242202992640: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 852672615818899456: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 852553447878664193: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 852311364735569921: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 852226086759018497: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 852189679701164033: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 851953902622658560: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 851861385021730816: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 851591660324737024: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 851464819735769094: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 851224888060895234: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 850753642995093505: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 850380195714523136: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 850333567704068097: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 850145622816686080: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 850019790995546112: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 849776966551130114: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 849668094696017920: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 849412302885593088: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 849336543269576704: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 849051919805034497: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 848690551926992896: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 848324959059550208: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 848213670039564288: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 848212111729840128: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 847978865427394560: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 847971574464610304: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 847962785489326080: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 847842811428974592: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 847617282490613760: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 847606175596138505: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 847251039262605312: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 847157206088847362: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 847116187444137987: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 846874817362120707: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 846514051647705089: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 846505985330044928: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 846153765933735936: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 846139713627017216: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 846042936437604353: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 845812042753855489: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 845677943972139009: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 845459076796616705: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 845397057150107648: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 845306882940190720: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 845098359547420673: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 844979544864018432: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 844973813909606400: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 844704788403113984: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 844580511645339650: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 844223788422217728: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 843981021012017153: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 843856843873095681: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 843604394117681152: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 843235543001513987: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 842892208864923648: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 842846295480000512: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 842765311967449089: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 842535590457499648: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 842163532590374912: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 842115215311396866: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 841833993020538882: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 841680585030541313: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 841439858740625411: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 841320156043304961: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 841314665196081154: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 841077006473256960: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 840761248237133825: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 840728873075638272: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 840698636975636481: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 840696689258311684: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 840632337062862849: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 840370681858686976: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 840268004936019968: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 839990271299457024: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 839549326359670784: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 839290600511926273: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 839239871831150596: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 838952994649550848: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 838921590096166913: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 838916489579200512: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 838831947270979586: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 838561493054533637: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 838476387338051585: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 838201503651401729: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 838150277551247360: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 838085839343206401: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 838083903487373313: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 837820167694528512: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 837482249356513284: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 837471256429613056: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 837366284874571778: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 837110210464448512: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 837012587749474308: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 836989968035819520: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 836753516572119041: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 836677758902222849: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 836648853927522308: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 836397794269200385: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 836380477523124226: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 836260088725786625: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 836001077879255040: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 835685285446955009: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 835574547218894849: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 835536468978302976: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 835309094223372289: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 835297930240217089: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 835264098648616962: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 835246439529840640: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 835172783151792128: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 835152434251116546: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 834931633769889797: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 834786237630337024: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 834574053763584002: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 834477809192075265: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 834458053273591808: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 834209720923721728: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 834167344700198914: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 834089966724603904: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 834086379323871233: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 833863086058651648: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 833826103416520705: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 833732339549220864: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 833722901757046785: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 833479644947025920: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 833124694597443584: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 832998151111966721: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 832769181346996225: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 832757312314028032: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 832682457690300417: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 832645525019123713: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 832636094638288896: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 832397543355072512: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 832369877331693569: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 832273440279240704: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 832215909146226688: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 832215726631055365: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 832088576586297345: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 832040443403784192: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 832032802820481025: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 831939777352105988: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 831926988323639298: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 831911600680497154: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 831670449226514432: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 831650051525054464: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 831552930092285952: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 831322785565769729: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 831315979191906304: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 831309418084069378: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 831262627380748289: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 830956169170665475: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 830583320585068544: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 830173239259324417: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 830097400375152640: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 829878982036299777: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 829861396166877184: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 829501995190984704: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 829449946868879360: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 829374341691346946: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 829141528400556032: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 829011960981237760: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 828801551087042563: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 828770345708580865: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 828708714936930305: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 828650029636317184: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 828409743546925057: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 828408677031882754: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 828381636999917570: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 828376505180889089: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 828372645993398273: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 828361771580813312: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 828046555563323392: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 828011680017821696: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 827933404142436356: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 827653905312006145: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 827600520311402496: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 827324948884643840: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 827228250799742977: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 827199976799354881: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 826958653328592898: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 826848821049180160: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 826615380357632002: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 826598799820865537: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 826598365270007810: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 826476773533745153: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 826240494070030336: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 826204788643753985: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 826115272272650244: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 825876512159186944: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 825829644528148480: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 825535076884762624: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 825147591692263424: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 825120256414846976: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 825026590719483904: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 824796380199809024: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 824775126675836928: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 824663926340194305: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 824325613288833024: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 824297048279236611: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 824025158776213504: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 823939628516474880: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 823719002937630720: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 823699002998870016: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 823581115634085888: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 823333489516937216: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 823322678127919110: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 823269594223824897: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 822975315408461824: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 822872901745569793: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 822859134160621569: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 822647212903690241: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 822610361945911296: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 822489057087389700: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 822462944365645825: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 822244816520155136: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 822163064745328640: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 821886076407029760: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 821813639212650496: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 821765923262631936: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 821522889702862852: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 821421320206483457: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 821407182352777218: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 821153421864615936: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 821149554670182400: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 821107785811234820: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 821044531881721856: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 820837357901512704: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 820749716845686786: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 820690176645140481: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 820494788566847489: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 820446719150292993: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 820314633777061888: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 820078625395449857: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 820013781606658049: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 819952236453363712: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 819924195358416896: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 819711362133872643: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 819588359383371776: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 819347104292290561: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 819238181065359361: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 819227688460238848: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 819015337530290176: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 819015331746349057: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 819006400881917954: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 819004803107983360: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 818646164899774465: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 818627210458333184: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 818614493328580609: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 818588835076603904: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 818536468981415936: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 818307523543449600: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 818259473185828864: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 818145370475810820: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 817908911860748288: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 817827839487737858: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 817777686764523521: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 817536400337801217: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 817502432452313088: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 817423860136083457: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 817415592588222464: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 817181837579653120: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 817171292965273600: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 817120970343411712: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 817056546584727552: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 816829038950027264: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 816816676327063552: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 816697700272001025: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 816450570814898180: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 816336735214911488: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 816091915477250048: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 816062466425819140: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 816014286006976512: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 815990720817401858: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 815966073409433600: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 815745968457060357: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 815736392542261248: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 815639385530101762: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 815390420867969024: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 814986499976527872: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 814638523311648768: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 814578408554463233: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 814530161257443328: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 814153002265309185: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 813944609378369540: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 813910438903693312: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 813812741911748608: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 813800681631023104: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 813217897535406080: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 813202720496779264: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 813187593374461952: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 813172488309972993: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 813157409116065792: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 813142292504645637: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 813130366689148928: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 813127251579564032: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 813112105746448384: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 813096984823349248: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 813081950185472002: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 813066809284972545: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 813051746834595840: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 812781120811126785: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 812747805718642688: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 812709060537683968: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 812503143955202048: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 812466873996607488: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 812372279581671427: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 811985624773361665: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 811744202451197953: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 811647686436880384: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 811627233043480576: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 811386762094317568: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 810984652412424192: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 810896069567610880: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 810657578271330305: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 810284430598270976: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 810254108431155201: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 809920764300447744: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 809808892968534016: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 809448704142938112: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 809220051211603969: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 809084759137812480: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 808838249661788160: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 808733504066486276: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 808501579447930884: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 808344865868283904: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 808134635716833280: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 808106460588765185: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 808001312164028416: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 807621403335917568: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 807106840509214720: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 807059379405148160: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 807010152071229440: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 806629075125202948: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 806620845233815552: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 806576416489959424: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 806542213899489280: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 806242860592926720: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 806219024703037440: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 805958939288408065: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 805932879469572096: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 805826884734976000: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 805823200554876929: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 805520635690676224: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 805487436403003392: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 805207613751304193: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 804738756058218496: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 804475857670639616: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 804413760345620481: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 804026241225523202: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 803773340896923648: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 803692223237865472: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 803638050916102144: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 803380650405482500: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 803321560782307329: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 803276597545603072: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 802952499103731712: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 802624713319034886: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 802600418706604034: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 802572683846291456: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 802323869084381190: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 802265048156610565: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 802247111496568832: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 802239329049477120: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 802185808107208704: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 801958328846974976: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 801854953262350336: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 801538201127157760: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 801285448605831168: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 801167903437357056: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 801127390143516673: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 801115127852503040: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 800859414831898624: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 800855607700029440: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 800751577355128832: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 800513324630806528: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 800459316964663297: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 800443802682937345: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 800388270626521089: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 800188575492947969: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 800141422401830912: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 800018252395122689: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 799774291445383169: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 799757965289017345: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 799422933579902976: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 799308762079035393: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 799297110730567681: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 799063482566066176: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 798933969379225600: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 798925684722855936: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 798705661114773508: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 798701998996647937: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 798697898615730177: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 798694562394996736: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 798686750113755136: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 798682547630837760: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 798673117451325440: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 798665375516884993: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 798644042770751489: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 798628517273620480: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 798585098161549313: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 798576900688019456: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 798340744599797760: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 798209839306514432: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 797971864723324932: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 797545162159308800: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 797236660651966464: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 797165961484890113: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 796904159865868288: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 796865951799083009: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 796759840936919040: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 796563435802726400: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 796484825502875648: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 796387464403357696: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 796177847564038144: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 796149749086875649: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 796125600683540480: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 796116448414461957: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 796080075804475393: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 796031486298386433: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 795464331001561088: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 795400264262053889: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 795076730285391872: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 794983741416415232: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 794926597468000259: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 794355576146903043: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 794332329137291264: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 794205286408003585: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 793962221541933056: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 793845145112371200: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 793614319594401792: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 793601777308463104: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 793500921481273345: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 793286476301799424: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 793271401113350145: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 793256262322548741: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 793241302385262592: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 793226087023144960: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 793210959003287553: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 793195938047070209: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 793180763617361921: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 793165685325201412: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 793150605191548928: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 793135492858580992: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 793120401413079041: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 792913359805018113: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 792883833364439040: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 792773781206999040: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 792394556390137856: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 792050063153438720: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 791821351946420224: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 791784077045166082: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 791780927877898241: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 791774931465953280: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 791672322847637504: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 791406955684368384: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 791312159183634433: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 791026214425268224: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 790987426131050500: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 790946055508652032: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 790723298204217344: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 790698755171364864: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 790581949425475584: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 790337589677002753: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 790277117346975746: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 790227638568808452: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 789986466051088384: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 789960241177853952: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 789903600034189313: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 789628658055020548: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 789599242079838210: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 789530877013393408: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 789314372632018944: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 789280767834746880: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 789268448748703744: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 789137962068021249: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 788908386943430656: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 788765914992902144: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 788552643979468800: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 788412144018661376: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 788178268662984705: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 788150585577050112: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 788070120937619456: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 788039637453406209: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 787810552592695296: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 787717603741622272: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 787397959788929025: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 787322443945877504: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 787111942498508800: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 786963064373534720: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 786729988674449408: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 786709082849828864: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 786664955043049472: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 786595970293370880: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 786363235746385920: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 786286427768250368: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 786233965241827333: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 786051337297522688: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 786036967502913536: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 785927819176054784: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 785872687017132033: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 785639753186217984: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 785533386513321988: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 785515384317313025: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 785264754247995392: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 785170936622350336: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 784826020293709826: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 784517518371221505: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 784431430411685888: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 784183165795655680: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 784057939640352768: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 783839966405230592: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 783821107061198850: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 783695101801398276: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 783466772167098368: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 783391753726550016: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 783347506784731136: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 783334639985389568: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 783085703974514689: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 782969140009107456: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 782747134529531904: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 782722598790725632: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 782598640137187329: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 782305867769217024: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 782021823840026624: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 781955203444699136: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 781661882474196992: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 781655249211752448: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 781524693396357120: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 781308096455073793: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 781251288990355457: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 781163403222056960: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 780931614150983680: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 780858289093574656: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 780800785462489090: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 780601303617732608: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 780543529827336192: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 780496263422808064: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 780476555013349377: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 780459368902959104: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 780192070812196864: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 780092040432480260: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 780074436359819264: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 779834332596887552: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 779377524342161408: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 779124354206535695: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 779123168116150273: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 779056095788752897: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 778990705243029504: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 778774459159379968: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 778764940568104960: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 778748913645780993: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 778650543019483137: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 778624900596654080: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 778408200802557953: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 778396591732486144: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 778383385161035776: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 778286810187399168: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 778039087836069888: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 778027034220126208: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 777953400541634568: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 777885040357281792: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 777684233540206592: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 777641927919427584: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 777621514455814149: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 777189768882946048: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 776819012571455488: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 776813020089548800: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 776477788987613185: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 776249906839351296: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 776218204058357768: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 776201521193218049: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 776113305656188928: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 776088319444877312: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 775898661951791106: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 775842724423557120: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 775733305207554048: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 775729183532220416: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 775364825476165632: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 775350846108426240: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 775096608509886464: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 775085132600442880: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 774757898236878852: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 774639387460112384: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 774314403806253056: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 773985732834758656: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 773922284943896577: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 773704687002451968: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 773670353721753600: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 773547596996571136: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 773336787167145985: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 773308824254029826: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 773247561583001600: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 773191612633579521: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 772877495989305348: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 772826264096874500: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 772615324260794368: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 772581559778025472: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 772193107915964416: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 772152991789019136: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 772117678702071809: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 772114945936949249: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 772102971039580160: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 771908950375665664: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 771770456517009408: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 771500966810099713: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 771380798096281600: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 771171053431250945: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 771136648247640064: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 771102124360998913: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 771014301343748096: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 771004394259247104: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 770787852854652928: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 770772759874076672: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 770743923962707968: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 770655142660169732: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 770414278348247044: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 770293558247038976: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 770093767776997377: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 770069151037685760: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 769940425801170949: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 769695466921623552: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 769335591808995329: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 769212283578875904: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 768970937022709760: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 768909767477751808: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 768855141948723200: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 768609597686943744: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 768596291618299904: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 768554158521745409: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 768473857036525572: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 768193404517830656: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 767884188863397888: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 767754930266464257: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 767500508068192258: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 767191397493538821: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 767122157629476866: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 766864461642756096: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 766793450729734144: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 766714921925144576: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 766693177336135680: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 766423258543644672: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 766313316352462849: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 766078092750233600: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 766069199026450432: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 766008592277377025: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 765719909049503744: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 765669560888528897: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 765395769549590528: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 765371061932261376: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 765222098633691136: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 764857477905154048: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 764259802650378240: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 763956972077010945: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 763837565564780549: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 763183847194451968: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 763167063695355904: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 763103485927849985: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 762699858130116608: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 762471784394268675: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 762464539388485633: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 762316489655476224: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 762035686371364864: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 761976711479193600: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 761750502866649088: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 761745352076779520: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 761672994376806400: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 761599872357261312: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 761371037149827077: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 761334018830917632: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 761292947749015552: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 761227390836215808: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 761004547850530816: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 760893934457552897: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 760656994973933572: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 760641137271070720: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 760539183865880579: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 760521673607086080: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 760290219849637889: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 760252756032651264: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 760190180481531904: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 760153949710192640: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 759943073749200896: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 759923798737051648: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 759846353224826880: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 759793422261743616: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 759566828574212096: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 759557299618865152: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 759447681597108224: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 759446261539934208: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 759197388317847553: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 759159934323924993: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 759099523532779520: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 759047813560868866: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 758854675097526272: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 758828659922702336: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 758740312047005698: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 758474966123810816: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 758467244762497024: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 758405701903519748: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 758355060040593408: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 758099635764359168: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 758041019896193024: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 757741869644341248: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 757729163776290825: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 757725642876129280: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 757611664640446465: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 757597904299253760: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 757596066325864448: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 757400162377592832: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 757393109802180609: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 757354760399941633: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 756998049151549440: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 756939218950160384: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 756651752796094464: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 756526248105566208: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 756303284449767430: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 756288534030475264: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 756275833623502848: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 755955933503782912: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 755206590534418437: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 755110668769038337: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 754874841593970688: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 754856583969079297: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 754747087846248448: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 754482103782404096: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 754449512966619136: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 754120377874386944: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 754011816964026368: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 753655901052166144: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 753420520834629632: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 753398408988139520: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 753375668877008896: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 753298634498793472: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 753294487569522689: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 753039830821511168: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 753026973505581056: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 752932432744185856: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 752917284578922496: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 752701944171524096: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 752682090207055872: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 752660715232722944: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 752568224206688256: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 752519690950500352: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 752334515931054080: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 752309394570878976: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 752173152931807232: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 751950017322246144: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 751937170840121344: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 751830394383790080: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 751793661361422336: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 751598357617971201: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 751583847268179968: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 751538714308972544: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 751456908746354688: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 751251247299190784: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 751205363882532864: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 751132876104687617: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 750868782890057730: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 750719632563142656: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 750506206503038976: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 750429297815552001: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 750383411068534784: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 750381685133418496: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 750147208377409536: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 750132105863102464: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 750117059602808832: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 750101899009982464: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 750086836815486976: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 750071704093859840: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 750056684286914561: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 750041628174217216: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 750026558547456000: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 750011400160841729: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 749996283729883136: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 749981277374128128: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 749774190421639168: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 749417653287129088: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 749403093750648834: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 749395845976588288: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 749317047558017024: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 749075273010798592: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 749064354620928000: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 749036806121881602: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 748977405889503236: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 748932637671223296: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 748705597323898880: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 748699167502000129: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 748692773788876800: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 748575535303884801: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 748568946752774144: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 748346686624440324: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 748337862848962560: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 748324050481647620: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 748307329658011649: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 748220828303695873: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 747963614829678593: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 747933425676525569: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 747885874273214464: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 747844099428986880: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 747816857231626240: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 747651430853525504: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 747648653817413632: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 747600769478692864: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 747594051852075008: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 747512671126323200: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 747461612269887489: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 747439450712596480: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 747242308580548608: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 747219827526344708: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 747204161125646336: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 747103485104099331: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 746906459439529985: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 746872823977771008: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 746818907684614144: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 746790600704425984: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 746757706116112384: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 746726898085036033: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 746542875601690625: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 746521445350707200: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 746507379341139972: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 746369468511756288: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 746131877086527488: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 746056683365994496: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 745789745784041472: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 745712589599014916: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 745433870967832576: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 745422732645535745: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 745314880350101504: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 745074613265149952: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 745057283344719872: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 744995568523612160: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 744971049620602880: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 744709971296780288: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 744334592493166593: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 744234799360020481: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 744223424764059648: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 743980027717509120: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 743895849529389061: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 743835915802583040: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 743609206067040256: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 743595368194129920: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 743545585370791937: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 743510151680958465: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 743253157753532416: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 743222593470234624: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 743210557239623680: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 742534281772302336: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 742528092657332225: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 742465774154047488: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 742423170473463808: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 742385895052087300: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 742161199639494656: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 742150209887731712: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 741793263812808706: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 741743634094141440: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 741438259667034112: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 741303864243200000: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 741099773336379392: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 741067306818797568: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 740995100998766593: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 740711788199743490: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 740699697422163968: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 740676976021798912: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 740373189193256964: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 740365076218183684: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 740359016048689152: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 740214038584557568: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 739979191639244800: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 739932936087216128: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 739844404073074688: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 739623569819336705: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 739606147276148736: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 739544079319588864: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 739485634323156992: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 739238157791694849: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 738891149612572673: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 738885046782832640: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 738883359779196928: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 738537504001953792: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 738402415918125056: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 738184450748633089: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 738166403467907072: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 738156290900254721: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 737826014890496000: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 737800304142471168: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 737678689543020544: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 737445876994609152: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 737322739594330112: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 737310737551491075: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 736736130620620800: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 736392552031657984: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 736365877722001409: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 736225175608430592: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 736010884653420544: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 735991953473572864: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 735648611367784448: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 735635087207878657: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 735274964362878976: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 735256018284875776: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 735137028879360001: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 734912297295085568: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 734787690684657664: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 734776360183431168: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 734559631394082816: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 733828123016450049: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 733822306246479872: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 733482008106668032: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 733460102733135873: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 733109485275860992: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 732732193018155009: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 732726085725589504: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 732585889486888962: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 732375214819057664: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 732005617171337216: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 731285275100512256: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 731156023742988288: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 730924654643314689: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 730573383004487680: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 730427201120833536: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 730211855403241472: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 730196704625098752: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 729854734790754305: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 729838605770891264: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 729823566028484608: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 729463711119904772: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 729113531270991872: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 728986383096946689: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 728760639972315136: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 728751179681943552: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 728653952833728512: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 728409960103686147: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 728387165835677696: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 728046963732717569: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 728035342121635841: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 728015554473250816: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 727685679342333952: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 727644517743104000: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 727524757080539137: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 727314416056803329: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 727286334147182592: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 727175381690781696: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 727155742655025152: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 726935089318363137: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 726887082820554753: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 726828223124897792: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 726224900189511680: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 725842289046749185: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 725786712245440512: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 725729321944506368: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 725458796924002305: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 724983749226668032: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 724771698126512129: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 724405726123311104: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 724049859469295616: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 724046343203856385: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 724004602748780546: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 723912936180330496: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 723688335806480385: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 723673163800948736: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 723179728551723008: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 722974582966214656: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 722613351520608256: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 721503162398597120: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 721001180231503872: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 720785406564900865: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 720775346191278080: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 720415127506415616: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 720389942216527872: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 720340705894408192: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 720059472081784833: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 720043174954147842: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 719991154352222208: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 719704490224398336: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 719551379208073216: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 719367763014393856: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 719339463458033665: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 719332531645071360: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 718971898235854848: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 718939241951195136: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 718631497683582976: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 718613305783398402: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 718540630683709445: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 718460005985447936: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 718454725339934721: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 718246886998687744: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 718234618122661888: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 717841801130979328: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 717790033953034240: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 717537687239008257: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 717428917016076293: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 717421804990701568: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 717047459982213120: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 717009362452090881: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 716802964044845056: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 716791146589110272: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 716730379797970944: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 716447146686459905: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 716439118184652801: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 716285507865542656: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 716080869887381504: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 715928423106027520: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 715758151270801409: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 715733265223708672: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 715704790270025728: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 715696743237730304: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 715680795826982913: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 715360349751484417: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 715342466308784130: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 715220193576927233: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 715200624753819648: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 715009755312439296: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 714982300363173890: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 714962719905021952: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 714957620017307648: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 714631576617938945: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 714606013974974464: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 714485234495041536: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 714258258790387713: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 714251586676113411: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 714214115368108032: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 714141408463036416: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 713919462244790272: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 713909862279876608: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 713900603437621249: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 713761197720473600: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 713411074226274305: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 713177543487135744: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 713175907180089344: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 712809025985978368: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 712717840512598017: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 712668654853337088: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 712438159032893441: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 712309440758808576: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 712097430750289920: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 712092745624633345: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 712085617388212225: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 712065007010385924: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 711998809858043904: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 711968124745228288: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 711743778164514816: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 711732680602345472: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 711694788429553666: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 711652651650457602: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 711363825979756544: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 711306686208872448: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 711008018775851008: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 710997087345876993: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 710844581445812225: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 710833117892898816: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 710658690886586372: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 710609963652087808: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 710588934686908417: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 710296729921429505: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 710283270106132480: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 710272297844797440: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 710269109699739648: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 710153181850935296: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 710140971284037632: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 710117014656950272: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 709918798883774466: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 709901256215666688: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 709852847387627521: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 709566166965075968: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 709556954897764353: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 709519240576036864: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 709449600415961088: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 709409458133323776: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 709225125749587968: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 709207347839836162: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 709198395643068416: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 709179584944730112: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 709158332880297985: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 709042156699303936: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 708853462201716736: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 708845821941387268: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 708834316713893888: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 708810915978854401: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 708738143638450176: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 708711088997666817: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 708479650088034305: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 708469915515297792: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 708400866336894977: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 708356463048204288: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 708349470027751425: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 708149363256774660: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 708130923141795840: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 708119489313951744: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 708109389455101952: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 708026248782585858: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 707995814724026368: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 707983188426153984: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 707969809498152960: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 707776935007539200: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 707741517457260545: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 707738799544082433: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 707693576495472641: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 707629649552134146: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 707610948723478529: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 707420581654872064: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 707411934438625280: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 707387676719185920: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 707377100785885184: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 707315916783140866: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 707297311098011648: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 707059547140169728: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 707038192327901184: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 707021089608753152: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 707014260413456384: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 706904523814649856: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 706901761596989440: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 706681918348251136: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 706644897839910912: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 706593038911545345: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 706538006853918722: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 706516534877929472: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 706346369204748288: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 706310011488698368: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 706291001778950144: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 706265994973601792: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 706169069255446529: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 706166467411222528: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 706153300320784384: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 705975130514706432: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 705970349788291072: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 705898680587526145: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 705786532653883392: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 705591895322394625: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 705475953783398401: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 705442520700944385: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 705428427625635840: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 705239209544720384: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 705223444686888960: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 705102439679201280: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 705066031337840642: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 704871453724954624: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 704859558691414016: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 704847917308362754: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 704819833553219584: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 704761120771465216: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 704499785726889984: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 704491224099647488: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 704480331685040129: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 704364645503647744: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 704347321748819968: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 704134088924532736: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 704113298707505153: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 704054845121142784: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 703774238772166656: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 703769065844768768: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 703631701117943808: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 703611486317502464: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 703425003149250560: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 703407252292673536: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 703382836347330562: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 703356393781329922: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 703268521220972544: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 703079050210877440: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 703041949650034688: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 702932127499816960: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 702899151802126337: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 702684942141153280: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 702671118226825216: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 702598099714314240: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 702539513671897089: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 702332542343577600: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 702321140488925184: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 702276748847800320: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 702217446468493312: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 701981390485725185: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 701952816642965504: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 701889187134500865: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 701805642395348998: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 701601587219795968: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 701570477911896070: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 701545186879471618: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 701214700881756160: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 700890391244103680: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 700864154249383937: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 700847567345688576: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 700796979434098688: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 700747788515020802: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 700518061187723268: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 700505138482569216: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 700462010979500032: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 700167517596164096: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 700151421916807169: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 700143752053182464: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 700062718104104960: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 700029284593901568: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 700002074055016451: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 699801817392291840: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 699788877217865730: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 699779630832685056: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 699775878809702401: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 699691744225525762: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 699446877801091073: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 699434518667751424: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 699423671849451520: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 699413908797464576: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 699370870310113280: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 699323444782047232: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 699088579889332224: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 699079609774645248: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 699072405256409088: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 699060279947165696: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 699036661657767936: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 698989035503689728: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 698953797952008193: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 698907974262222848: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 698710712454139905: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 698703483621523456: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 698635131305795584: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 698549713696649216: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 698355670425473025: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 698342080612007937: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 698262614669991936: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 698195409219559425: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 698178924120031232: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 697995514407682048: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 697990423684476929: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 697943111201378304: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 697881462549430272: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 697630435728322560: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 697616773278015490: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 697596423848730625: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 697575480820686848: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 697516214579523584: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 697482927769255936: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 697463031882764288: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 697270446429966336: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 697259378236399616: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 697255105972801536: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 697242256848379904: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 696900204696625153: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 696894894812565505: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 696886256886657024: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 696877980375769088: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 696754882863349760: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 696744641916489729: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 696713835009417216: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 696518437233913856: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 696490539101908992: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 696488710901260288: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 696405997980676096: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 696100768806522880: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 695816827381944320: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 695794761660297217: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 695767669421768709: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 695629776980148225: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 695446424020918272: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 695409464418041856: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 695314793360662529: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 695095422348574720: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 695074328191332352: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 695064344191721472: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 695051054296211456: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 694925794720792577: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 694905863685980160: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 694669722378485760: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 694356675654983680: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 694352839993344000: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 694342028726001664: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 694329668942569472: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 694206574471057408: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 694183373896572928: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 694001791655137281: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 693993230313091072: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 693942351086120961: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 693647888581312512: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 693644216740769793: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 693642232151285760: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 693629975228977152: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 693622659251335168: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 693590843962331137: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 693582294167244802: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 693486665285931008: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 693280720173801472: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 693267061318012928: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 693262851218264065: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 693231807727280129: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 693155686491000832: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 693109034023534592: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 693095443459342336: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 692919143163629568: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 692905862751522816: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 692901601640583168: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 692894228850999298: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 692828166163931137: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 692752401762250755: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 692568918515392513: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 692535307825213440: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 692530551048294401: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 692423280028966913: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 692417313023332352: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 692187005137076224: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 692158366030913536: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 692142790915014657: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 692041934689402880: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 692017291282812928: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 691820333922455552: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 691793053716221953: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 691756958957883396: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 691675652215414786: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 691483041324204033: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 691459709405118465: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 691444869282295808: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 691416866452082688: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 691321916024623104: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 691096613310316544: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 691090071332753408: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 690989312272396288: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 690959652130045952: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 690938899477221376: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 690932576555528194: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 690735892932222976: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 690728923253055490: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 690690673629138944: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 690649993829576704: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 690607260360429569: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 690597161306841088: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 690400367696297985: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 690374419777196032: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 690360449368465409: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 690348396616552449: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 690248561355657216: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 690021994562220032: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 690015576308211712: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 690005060500217858: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 689999384604450816: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 689993469801164801: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 689977555533848577: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 689905486972461056: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 689877686181715968: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 689835978131935233: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 689661964914655233: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 689659372465688576: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 689623661272240129: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 689599056876867584: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 689557536375177216: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 689517482558820352: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 689289219123089408: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 689283819090870273: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 689280876073582592: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 689275259254616065: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 689255633275777024: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 689154315265683456: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 689143371370250240: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 688916208532455424: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 688908934925697024: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 688898160958271489: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 688894073864884227: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 688828561667567616: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 688804835492233216: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 688789766343622656: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 688547210804498433: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 688519176466644993: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 688385280030670848: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 688211956440801280: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 688179443353796608: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 688116655151435777: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 688064179421470721: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 687841446767013888: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 687826841265172480: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 687818504314159109: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 687807801670897665: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 687732144991551489: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 687704180304273409: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 687664829264453632: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 687494652870668288: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 687480748861947905: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 687476254459715584: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 687460506001633280: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 687399393394311168: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 687317306314240000: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 687312378585812992: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 687127927494963200: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 687124485711986689: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 687109925361856513: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 687102708889812993: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 687096057537363968: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 686947101016735744: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 686760001961103360: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 686749460672679938: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 686730991906516992: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 686683045143953408: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 686618349602762752: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 686606069955735556: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 686394059078897668: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 686386521809772549: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 686377065986265092: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 686358356425093120: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 686286779679375361: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 686050296934563840: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 686035780142297088: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 686034024800862208: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 686007916130873345: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 686003207160610816: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 685973236358713344: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 685943807276412928: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 685906723014619143: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 685681090388975616: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 685667379192414208: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 685663452032069632: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 685641971164143616: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 685547936038666240: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 685532292383666176: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 685325112850124800: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 685321586178670592: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 685315239903100929: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 685307451701334016: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 685268753634967552: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 685198997565345792: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 685169283572338688: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 684969860808454144: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 684959798585110529: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 684940049151070208: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 684926975086034944: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 684914660081053696: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 684902183876321280: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 684880619965411328: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 684830982659280897: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 684800227459624960: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 684594889858887680: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 684588130326986752: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 684567543613382656: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 684538444857667585: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 684481074559381504: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 684460069371654144: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 684241637099323392: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 684225744407494656: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 684222868335505415: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 684200372118904832: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 684195085588783105: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 684188786104872960: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 684177701129875456: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 684147889187209216: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 684122891630342144: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 684097758874210310: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 683857920510050305: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 683852578183077888: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 683849932751646720: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 683834909291606017: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 683828599284170753: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 683773439333797890: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 683742671509258241: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 683515932363329536: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 683498322573824003: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 683481228088049664: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 683462770029932544: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 683449695444799489: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 683391852557561860: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 683357973142474752: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 683142553609318400: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 683111407806746624: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 683098815881154561: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 683078886620553216: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 683030066213818368: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 682962037429899265: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 682808988178739200: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 682788441537560576: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 682750546109968385: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 682697186228989953: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 682662431982772225: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 682638830361513985: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 682429480204398592: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 682406705142087680: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 682393905736888321: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 682389078323662849: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 682303737705140231: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 682259524040966145: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 682242692827447297: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 682088079302213632: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 682059653698686977: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 682047327939461121: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 682032003584274432: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 682003177596559360: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 681981167097122816: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 681891461017812993: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 681694085539872773: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 681679526984871937: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 681654059175129088: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 681610798867845120: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 681579835668455424: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 681523177663676416: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 681340665377193984: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 681339448655802368: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 681320187870711809: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 681302363064414209: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 681297372102656000: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 681281657291280384: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 681261549936340994: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 681242418453299201: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 681231109724700672: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 681193455364796417: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 680970795137544192: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 680959110691590145: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 680940246314430465: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 680934982542561280: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 680913438424612864: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 680889648562991104: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 680836378243002368: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 680805554198020098: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 680801747103793152: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 680798457301471234: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 680609293079592961: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 680583894916304897: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 680497766108381184: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 680494726643068929: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 680473011644985345: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 680440374763077632: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 680221482581123072: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 680206703334408192: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 680191257256136705: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 680176173301628928: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 680161097740095489: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 680145970311643136: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 680130881361686529: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 680115823365742593: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 680100725817409536: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 680085611152338944: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 680070545539371008: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 680055455951884288: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 679877062409191424: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 679872969355714560: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 679862121895714818: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 679854723806179328: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 679844490799091713: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 679828447187857408: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 679777920601223168: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 679736210798047232: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 679729593985699840: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 679722016581222400: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 679530280114372609: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 679527802031484928: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 679511351870550016: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 679503373272485890: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 679475951516934144: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 679462823135686656: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 679405845277462528: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 679158373988876288: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 679148763231985668: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 679132435750195208: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 679111216690831360: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 679062614270468097: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 679047485189439488: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 679001094530465792: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 678991772295516161: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 678969228704284672: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 678800283649069056: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 678798276842360832: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 678774928607469569: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 678767140346941444: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 678764513869611008: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 678755239630127104: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 678740035362037760: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 678708137298427904: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 678675843183484930: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 678643457146150913: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 678446151570427904: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 678424312106393600: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 678410210315247616: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 678399652199309312: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 678396796259975168: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 678389028614488064: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 678380236862578688: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 678341075375947776: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 678334497360859136: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 678278586130948096: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 678255464182861824: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 678023323247357953: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 678021115718029313: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 677961670166224897: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 677918531514703872: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 677895101218201600: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 677716515794329600: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 677700003327029250: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 677698403548192770: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 677687604918272002: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 677673981332312066: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 677662372920729601: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 677644091929329666: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 677573743309385728: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 677565715327688705: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 677557565589463040: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 677547928504967168: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 677530072887205888: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 677335745548390400: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 677334615166730240: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 677331501395156992: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 677328882937298944: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 677314812125323265: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 677301033169788928: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 677269281705472000: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 677228873407442944: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 677187300187611136: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 676975532580409345: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 676957860086095872: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 676949632774234114: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 676948236477857792: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 676946864479084545: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 676942428000112642: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 676936541936185344: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 676916996760600576: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 676897532954456065: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 676864501615042560: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 676821958043033607: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 676819651066732545: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 676811746707918848: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 676776431406465024: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 676617503762681856: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 676613908052996102: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 676606785097199616: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 676603393314578432: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 676593408224403456: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 676590572941893632: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 676588346097852417: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 676582956622721024: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 676575501977128964: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 676533798876651520: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 676496375194980353: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 676470639084101634: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 676440007570247681: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 676430933382295552: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 676263575653122048: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 676237365392908289: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 676219687039057920: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 676215927814406144: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 676191832485810177: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 676146341966438401: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 676121918416756736: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 676101918813499392: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 676098748976615425: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 676089483918516224: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 675898130735476737: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 675891555769696257: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 675888385639251968: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 675878199931371520: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 675870721063669760: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 675853064436391936: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 675849018447167488: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 675845657354215424: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 675822767435051008: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 675820929667219457: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 675798442703122432: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 675781562965868544: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 675740360753160193: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 675710890956750848: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 675707330206547968: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 675706639471788032: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 675534494439489536: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 675531475945709568: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 675522403582218240: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 675517828909424640: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 675501075957489664: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 675497103322386432: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 675489971617296384: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 675483430902214656: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 675432746517426176: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 675372240448454658: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 675362609739206656: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 675354435921575936: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 675349384339542016: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 675334060156301312: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 675166823650848770: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 675153376133427200: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 675149409102012420: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 675147105808306176: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 675146535592706048: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 675145476954566656: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 675135153782571009: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 675113801096802304: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 675111688094527488: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 675109292475830276: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 675047298674663426: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 675015141583413248: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 675006312288268288: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 675003128568291329: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 674999807681908736: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 674805413498527744: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 674800520222154752: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 674793399141146624: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 674790488185167872: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 674788554665512960: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 674781762103414784: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 674774481756377088: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 674767892831932416: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 674764817387900928: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 674754018082705410: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 674752233200820224: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 674743008475090944: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 674742531037511680: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 674739953134403584: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 674737130913071104: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 674690135443775488: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 674670581682434048: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 674664755118911488: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 674646392044941312: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 674644256330530816: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 674638615994089473: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 674632714662858753: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 674606911342424069: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 674468880899788800: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 674447403907457024: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 674436901579923456: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 674422304705744896: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 674416750885273600: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 674410619106390016: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 674394782723014656: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 674372068062928900: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 674330906434379776: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 674318007229923329: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 674307341513269249: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 674291837063053312: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 674271431610523648: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 674269164442398721: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 674265582246694913: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 674262580978937856: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 674255168825880576: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 674082852460433408: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 674075285688614912: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 674063288070742018: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 674053186244734976: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 674051556661161984: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 674045139690631169: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 674042553264685056: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 674038233588723717: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 674036086168010753: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 674024893172875264: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 674019345211760640: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 674014384960745472: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 674008982932058114: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 673956914389192708: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 673919437611909120: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 673906403526995968: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 673887867907739649: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 673716320723169284: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 673715861853720576: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 673711475735838725: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 673709992831262724: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 673708611235921920: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 673707060090052608: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 673705679337693185: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 673700254269775872: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 673697980713705472: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 673689733134946305: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 673688752737402881: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 673686845050527744: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 673680198160809984: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 673662677122719744: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 673656262056419329: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 673636718965334016: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 673612854080196609: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 673583129559498752: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 673580926094458881: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 673576835670777856: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 673363615379013632: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 673359818736984064: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 673355879178194945: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 673352124999274496: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 673350198937153538: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 673345638550134785: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 673343217010679808: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 673342308415348736: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 673320132811366400: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 673317986296586240: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 673295268553605120: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 673270968295534593: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 673240798075449344: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 673213039743795200: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 673148804208660480: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 672997845381865473: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 672995267319328768: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 672988786805112832: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 672984142909456390: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 672980819271634944: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 672975131468300288: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 672970152493887488: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 672968025906282496: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 672964561327235073: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 672902681409806336: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 672898206762672129: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 672884426393653248: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 672877615439593473: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 672834301050937345: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 672828477930868736: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 672640509974827008: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 672622327801233409: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 672614745925664768: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 672609152938721280: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 672604026190569472: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 672594978741354496: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 672591762242805761: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 672591271085670400: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 672538107540070400: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 672523490734551040: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 672488522314567680: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 672482722825261057: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 672481316919734272: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 672475084225949696: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 672466075045466113: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 672272411274932228: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 672267570918129665: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 672264251789176834: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 672256522047614977: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 672254177670729728: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 672248013293752320: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 672245253877968896: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 672239279297454080: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 672231046314901505: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 672222792075620352: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 672205392827572224: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 672169685991993344: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 672160042234327040: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 672139350159835138: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 672125275208069120: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 672095186491711488: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 672082170312290304: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 672068090318987265: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 671896809300709376: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 671891728106971137: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 671882082306625538: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 671879137494245376: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 671874878652489728: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 671866342182637568: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 671855973984772097: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 671789708968640512: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 671768281401958400: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 671763349865160704: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 671744970634719232: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 671743150407421952: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 671735591348891648: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 671729906628341761: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 671561002136281088: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 671550332464455680: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 671547767500775424: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 671544874165002241: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 671542985629241344: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 671538301157904385: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 671536543010570240: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 671533943490011136: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 671528761649688577: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 671520732782923777: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 671518598289059840: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 671511350426865664: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 671504605491109889: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 671497587707535361: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 671488513339211776: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 671486386088865792: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 671485057807351808: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 671390180817915904: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 671362598324076544: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 671357843010908160: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 671355857343524864: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 671347597085433856: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 671186162933985280: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 671182547775299584: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 671166507850801152: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 671163268581498880: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 671159727754231808: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 671154572044468225: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 671151324042559489: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 671147085991960577: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 671141549288370177: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 671138694582165504: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 671134062904504320: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 671122204919246848: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 671115716440031232: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 671109016219725825: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 670995969505435648: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 670842764863651840: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 670840546554966016: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 670838202509447168: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 670833812859932673: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 670832455012716544: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 670826280409919488: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 670823764196741120: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 670822709593571328: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 670815497391357952: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 670811965569282048: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 670807719151067136: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 670804601705242624: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 670803562457407488: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 670797304698376195: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 670792680469889025: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 670789397210615808: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 670786190031921152: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 670783437142401025: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 670782429121134593: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 670780561024270336: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 670778058496974848: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 670764103623966721: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 670755717859713024: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 670733412878163972: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 670727704916926465: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 670717338665226240: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 670704688707301377: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 670691627984359425: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 670679630144274432: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 670676092097810432: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 670668383499735048: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 670474236058800128: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 670468609693655041: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 670465786746662913: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 670452855871037440: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 670449342516494336: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 670444955656130560: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 670442337873600512: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 670435821946826752: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 670434127938719744: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 670433248821026816: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 670428280563085312: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 670427002554466305: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 670421925039075328: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 670420569653809152: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 670417414769758208: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 670411370698022913: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 670408998013820928: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 670403879788544000: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 670385711116361728: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 670374371102445568: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 670361874861563904: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 670338931251150849: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 670319130621435904: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 670303360680108032: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 670290420111441920: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 670093938074779648: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 670086499208155136: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 670079681849372674: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 670073503555706880: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 670069087419133954: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 670061506722140161: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 670055038660800512: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 670046952931721218: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 670040295598354432: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 670037189829525505: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 670003130994700288: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 669993076832759809: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 669972011175813120: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 669970042633789440: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 669942763794931712: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 669926384437997569: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 669923323644657664: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 669753178989142016: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 669749430875258880: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 669684865554620416: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 669683899023405056: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 669682095984410625: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 669680153564442624: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 669661792646373376: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 669625907762618368: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 669603084620980224: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 669597912108789760: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 669583744538451968: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 669573570759163904: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 669571471778410496: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 669567591774625800: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 669564461267722241: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 669393256313184256: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 669375718304980992: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 669371483794317312: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 669367896104181761: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 669363888236994561: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 669359674819481600: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 669354382627049472: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 669353438988365824: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 669351434509529089: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 669328503091937280: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 669327207240699904: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 669324657376567296: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 669216679721873412: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 669214165781868544: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 669203728096960512: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 669037058363662336: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 669015743032369152: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 669006782128353280: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 669000397445533696: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 668994913074286592: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 668992363537309700: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 668989615043424256: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 668988183816871936: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 668986018524233728: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 668981893510119424: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 668979806671884288: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 668975677807423489: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 668967877119254528: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 668960084974809088: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 668955713004314625: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 668932921458302977: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 668902994700836864: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 668892474547511297: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 668872652652679168: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 668852170888998912: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 668826086256599040: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 668815180734689280: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 668779399630725120: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 668655139528511488: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 668645506898350081: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 668643542311546881: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 668641109086707712: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 668636665813057536: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 668633411083464705: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 668631377374486528: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 668627278264475648: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 668625577880875008: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 668623201287675904: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 668620235289837568: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 668614819948453888: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 668587383441514497: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 668567822092664832: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 668544745690562560: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 668542336805281792: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 668537837512433665: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 668528771708952576: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 668507509523615744: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 668496999348633600: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 668484198282485761: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 668480044826800133: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 668466899341221888: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 668297328638447616: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 668291999406125056: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 668286279830867968: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 668274247790391296: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 668268907921326080: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 668256321989451776: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 668248472370458624: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 668237644992782336: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 668226093875376128: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 668221241640230912: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 668204964695683073: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 668190681446379520: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 668171859951755264: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 668154635664932864: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 668142349051129856: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 668113020489474048: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 667937095915278337: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 667924896115245057: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 667915453470232577: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 667911425562669056: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 667902449697558528: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 667886921285246976: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 667885044254572545: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 667878741721415682: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 667873844930215936: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 667866724293877760: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 667861340749471744: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 667832474953625600: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 667806454573760512: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 667801013445750784: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 667793409583771648: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 667782464991965184: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 667773195014021121: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 667766675769573376: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 667728196545200128: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 667724302356258817: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 667550904950915073: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 667550882905632768: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 667549055577362432: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 667546741521195010: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 667544320556335104: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 667538891197542400: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 667534815156183040: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 667530908589760512: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 667524857454854144: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 667517642048163840: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 667509364010450944: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 667502640335572993: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 667495797102141441: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 667491009379606528: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 667470559035432960: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 667455448082227200: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 667453023279554560: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 667443425659232256: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 667437278097252352: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 667435689202614272: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 667405339315146752: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 667393430834667520: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 667369227918143488: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 667211855547486208: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 667200525029539841: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 667192066997374976: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 667188689915760640: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 667182792070062081: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 667177989038297088: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 667176164155375616: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 667174963120574464: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 667171260800061440: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 667165590075940865: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 667160273090932737: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 667152164079423490: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 667138269671505920: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 667119796878725120: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 667090893657276420: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 667073648344346624: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 667070482143944705: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 667065535570550784: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 667062181243039745: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 667044094246576128: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 667012601033924608: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 666996132027977728: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 666983947667116034: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 666837028449972224: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 666835007768551424: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 666826780179869698: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 666817836334096384: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 666804364988780544: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 666786068205871104: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 666781792255496192: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 666776908487630848: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 666739327293083650: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 666701168228331520: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 666691418707132416: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 666649482315059201: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 666644823164719104: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 666454714377183233: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 666447344410484738: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 666437273139982337: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 666435652385423360: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 666430724426358785: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 666428276349472768: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 666421158376562688: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 666418789513326592: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 666411507551481857: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 666407126856765440: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 666396247373291520: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 666373753744588802: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 666362758909284353: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 666353288456101888: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 666345417576210432: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 666337882303524864: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 666293911632134144: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 666287406224695296: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 666273097616637952: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 666268910803644416: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 666104133288665088: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 666102155909144576: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 666099513787052032: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 666094000022159362: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 666082916733198337: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 666073100786774016: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 666071193221509120: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 666063827256086533: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 666058600524156928: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 666057090499244032: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 666055525042405380: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 666051853826850816: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 666050758794694657: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 666049248165822465: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 666044226329800704: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 666033412701032449: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 666029285002620928: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.'), 666020888022790149: Unauthorized('401 Unauthorized\\n89 - Invalid or expired token.')}\n"
     ]
    }
   ],
   "source": [
    "import tweepy \n",
    "from tweepy import OAuthHandler\n",
    "import json\n",
    "from timeit import default_timer as timer\n",
    "\n",
    "# Query Twitter API for each tweet in the Twitter archive and save JSON in a text file\n",
    "# These are hidden to comply with Twitter's API terms and conditions\n",
    "consumer_key = 'HIDDEN'\n",
    "consumer_secret = 'HIDDEN'\n",
    "access_token = 'HIDDEN'\n",
    "access_secret = 'HIDDEN'\n",
    "\n",
    "auth = OAuthHandler(consumer_key, consumer_secret)\n",
    "auth.set_access_token(access_token, access_secret)\n",
    "\n",
    "api = tweepy.API(auth, wait_on_rate_limit=True)\n",
    "\n",
    "# NOTE TO STUDENT WITH MOBILE VERIFICATION ISSUES:\n",
    "# df_1 is a DataFrame with the twitter_archive_enhanced.csv file. You may have to\n",
    "# change line 17 to match the name of your DataFrame with twitter_archive_enhanced.csv\n",
    "# NOTE TO REVIEWER: this student had mobile verification issues so the following\n",
    "# Twitter API code was sent to this student from a Udacity instructor\n",
    "# Tweet IDs for which to gather additional data via Twitter's API\n",
    "tweet_ids = df_tweet.tweet_id.values\n",
    "len(tweet_ids)\n",
    "\n",
    "# Query Twitter's API for JSON data for each tweet ID in the Twitter archive\n",
    "count = 0\n",
    "fails_dict = {}\n",
    "start = timer()\n",
    "# Save each tweet's returned JSON as a new line in a .txt file\n",
    "with open('tweet-json.txt', 'w') as outfile:\n",
    "    # This loop will likely take 20-30 minutes to run because of Twitter's rate limit\n",
    "    for tweet_id in tweet_ids:\n",
    "        count += 1\n",
    "        print(str(count) + \": \" + str(tweet_id))\n",
    "        try:\n",
    "            tweet = api.get_status(tweet_id, tweet_mode='extended')\n",
    "            print(\"Success\")\n",
    "            json.dump(tweet-json, outfile)\n",
    "            outfile.write('\\n')\n",
    "        except tweepy . TweepyException as e:\n",
    "            print(\"Fail\")\n",
    "            fails_dict[tweet_id] = e\n",
    "            pass\n",
    "end = timer()\n",
    "print(end - start)\n",
    "print(fails_dict)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "892420643555336193\n",
      "39467\n",
      "8853\n"
     ]
    }
   ],
   "source": [
    "tweet_id =[]\n",
    "favorite_count=[]\n",
    "retweet_count =[]\n",
    "\n",
    "with open ('tweet-json.txt', 'r') as file:\n",
    "    for line in file:\n",
    "        I = re.findall(r' \"id\": ([0-9]+),' ,  line)\n",
    "        F = re.findall(r' \"favorite_count\": ([0-9]+),' ,  line)\n",
    "        R = re.findall(r' \"retweet_count\": ([0-9]+),' ,  line)  \n",
    "          \n",
    "        if I:\n",
    "            tweet_id.append(I[0])\n",
    "        if F:\n",
    "            favorite_count.append(F[0])\n",
    "        if R:\n",
    "            retweet_count.append(R[0]) \n",
    "\n",
    "#print the final lists\n",
    "print(tweet_id[0])\n",
    "print(favorite_count[0])\n",
    "print(retweet_count[0])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "(2354, 3)\n"
     ]
    }
   ],
   "source": [
    "# Create a dictionary with the data\n",
    "data = {'tweet_id': tweet_id, 'favorite_count': favorite_count, 'retweet_count': retweet_count}\n",
    "\n",
    "# Create a dataframe from the dictionary\n",
    "twitter_data = pd.DataFrame(data)\n",
    "\n",
    "# Print the dataframe\n",
    "print(twitter_data.shape)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "extensions": {
     "jupyter_dashboards": {
      "version": 1,
      "views": {
       "grid_default": {
        "col": 4,
        "height": 4,
        "hidden": false,
        "row": 28,
        "width": 4
       },
       "report_default": {
        "hidden": false
       }
      }
     }
    }
   },
   "source": [
    "## Assessing Data\n",
    "In this section, detect and document at least **eight (8) quality issues and two (2) tidiness issue**. You must use **both** visual assessment\n",
    "programmatic assessement to assess the data.\n",
    "\n",
    "**Note:** pay attention to the following key points when you access the data.\n",
    "\n",
    "* You only want original ratings (no retweets) that have images. Though there are 5000+ tweets in the dataset, not all are dog ratings and some are retweets.\n",
    "* Assessing and cleaning the entire dataset completely would require a lot of time, and is not necessary to practice and demonstrate your skills in data wrangling. Therefore, the requirements of this project are only to assess and clean at least 8 quality issues and at least 2 tidiness issues in this dataset.\n",
    "* The fact that the rating numerators are greater than the denominators does not need to be cleaned. This [unique rating system](http://knowyourmeme.com/memes/theyre-good-dogs-brent) is a big part of the popularity of WeRateDogs.\n",
    "* You do not need to gather the tweets beyond August 1st, 2017. You can, but note that you won't be able to gather the image predictions for these tweets since you don't have access to the algorithm used.\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 2356 entries, 0 to 2355\n",
      "Data columns (total 17 columns):\n",
      " #   Column                      Non-Null Count  Dtype  \n",
      "---  ------                      --------------  -----  \n",
      " 0   tweet_id                    2356 non-null   int64  \n",
      " 1   in_reply_to_status_id       78 non-null     float64\n",
      " 2   in_reply_to_user_id         78 non-null     float64\n",
      " 3   timestamp                   2356 non-null   object \n",
      " 4   source                      2356 non-null   object \n",
      " 5   text                        2356 non-null   object \n",
      " 6   retweeted_status_id         181 non-null    float64\n",
      " 7   retweeted_status_user_id    181 non-null    float64\n",
      " 8   retweeted_status_timestamp  181 non-null    object \n",
      " 9   expanded_urls               2297 non-null   object \n",
      " 10  rating_numerator            2356 non-null   int64  \n",
      " 11  rating_denominator          2356 non-null   int64  \n",
      " 12  name                        2356 non-null   object \n",
      " 13  doggo                       2356 non-null   object \n",
      " 14  floofer                     2356 non-null   object \n",
      " 15  pupper                      2356 non-null   object \n",
      " 16  puppo                       2356 non-null   object \n",
      "dtypes: float64(4), int64(3), object(10)\n",
      "memory usage: 313.0+ KB\n"
     ]
    }
   ],
   "source": [
    "df_tweet.info()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Descripition: \n",
    "> tweet_id: the unique identifier for each tweet\n",
    "\n",
    "> in_reply_to_status_id: if the represented Tweet is a reply, this field will contain the integer representation of the original Tweet’s ID\n",
    "\n",
    "> in_reply_to_user_id: if the represented Tweet is a reply, this field will contain the integer representation of the original Tweet’s author ID\n",
    "\n",
    "> timestamp: time when this Tweet was created\n",
    "\n",
    "> source: utility used to post the Tweet, as an HTML-formatted string. e.g. Twitter for Android, Twitter for iPhone, Twitter Web Client\n",
    "\n",
    "> text: actual UTF-8 text of the status update\n",
    "\n",
    "> retweeted_status_id: if the represented Tweet is a retweet, this field will contain the integer representation of the original Tweet’s ID\n",
    "\n",
    "> retweeted_status_user_id: if the represented Tweet is a retweet, this field will contain the integer representation of the original Tweet’s author ID\n",
    "\n",
    "> retweeted_status_timestamp: time of retweet\n",
    "expanded_urls: tweet URL\n",
    "\n",
    "> rating_numerator: numerator of the rating of a dog. Note: ratings almost always greater than 10\n",
    "\n",
    "> rating_denominator: denominator of the rating of a dog. Note: ratings almost always have a denominator of 10\n",
    "\n",
    "> name: name of the dog\n",
    "\n",
    "> doggo: one of the 4 dog \"stage\"\n",
    "\n",
    "> floofer: one of the 4 dog \"stage\"\n",
    "\n",
    "> pupper: one of the 4 dog \"stage\"\n",
    "\n",
    "> puppo: one of the 4 dog \"stage\"\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "2356"
      ]
     },
     "execution_count": 13,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "len(df_tweet)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>tweet_id</th>\n",
       "      <th>in_reply_to_status_id</th>\n",
       "      <th>in_reply_to_user_id</th>\n",
       "      <th>timestamp</th>\n",
       "      <th>source</th>\n",
       "      <th>text</th>\n",
       "      <th>retweeted_status_id</th>\n",
       "      <th>retweeted_status_user_id</th>\n",
       "      <th>retweeted_status_timestamp</th>\n",
       "      <th>expanded_urls</th>\n",
       "      <th>rating_numerator</th>\n",
       "      <th>rating_denominator</th>\n",
       "      <th>name</th>\n",
       "      <th>doggo</th>\n",
       "      <th>floofer</th>\n",
       "      <th>pupper</th>\n",
       "      <th>puppo</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>892420643555336193</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>2017-08-01 16:23:56 +0000</td>\n",
       "      <td>&lt;a href=\"http://twitter.com/download/iphone\" r...</td>\n",
       "      <td>This is Phineas. He's a mystical boy. Only eve...</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>https://twitter.com/dog_rates/status/892420643...</td>\n",
       "      <td>13</td>\n",
       "      <td>10</td>\n",
       "      <td>Phineas</td>\n",
       "      <td>None</td>\n",
       "      <td>None</td>\n",
       "      <td>None</td>\n",
       "      <td>None</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "             tweet_id  in_reply_to_status_id  in_reply_to_user_id  \\\n",
       "0  892420643555336193                    NaN                  NaN   \n",
       "\n",
       "                   timestamp  \\\n",
       "0  2017-08-01 16:23:56 +0000   \n",
       "\n",
       "                                              source  \\\n",
       "0  <a href=\"http://twitter.com/download/iphone\" r...   \n",
       "\n",
       "                                                text  retweeted_status_id  \\\n",
       "0  This is Phineas. He's a mystical boy. Only eve...                  NaN   \n",
       "\n",
       "   retweeted_status_user_id retweeted_status_timestamp  \\\n",
       "0                       NaN                        NaN   \n",
       "\n",
       "                                       expanded_urls  rating_numerator  \\\n",
       "0  https://twitter.com/dog_rates/status/892420643...                13   \n",
       "\n",
       "   rating_denominator     name doggo floofer pupper puppo  \n",
       "0                  10  Phineas  None    None   None  None  "
      ]
     },
     "execution_count": 14,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_tweet.head(1)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Quality issues\n",
    "\n",
    "- Checking all the NaNs and Handling the NaNs.\n",
    "\n",
    "- We don't need to gather the tweets beyond August 1st, 2017. We can, but note that you won't be able to gather\n",
    "  the image predictions for these tweets since you don't have access to the algorithm used. So removing all rows \n",
    "  before  Aug 1st, 2017\n",
    "\n",
    "- The tweet_ID is not the right data type and value in two DataFrames are of different types.\n",
    "\n",
    "- Erroneous datatypes and values for in_reply_to_status_id,in_reply_to_user_id.\n",
    "\n",
    "- We only want original ratings (no retweets).So the retweets shouldn't be there.\n",
    "\n",
    "- We only want ratings with images. Not all ratings have images.\n",
    "\n",
    "- Some ratings are inaccurately picked up.\n",
    "\n",
    "- Erroneous datatype for timestamp. Converting Object to DateTime Type.\n",
    "\n",
    "- Nulls represented as 'None' in columns 'name', 'doggo', 'floofer', 'pupper','puppo'.\n",
    "\n",
    "- Some predictions are not dogs, there is no column for the most possible breed of a dog.\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "extensions": {
     "jupyter_dashboards": {
      "version": 1,
      "views": {
       "grid_default": {
        "col": 0,
        "height": 7,
        "hidden": false,
        "row": 40,
        "width": 12
       },
       "report_default": {
        "hidden": false
       }
      }
     }
    }
   },
   "source": [
    "### Tidiness issues\n",
    "1. merge the all the 3 dataframes\n",
    "\n",
    "2. Combining dog Stages"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "extensions": {
     "jupyter_dashboards": {
      "version": 1,
      "views": {
       "grid_default": {
        "col": 4,
        "height": 4,
        "hidden": false,
        "row": 32,
        "width": 4
       },
       "report_default": {
        "hidden": false
       }
      }
     }
    }
   },
   "source": [
    "## Cleaning Data\n",
    "In this section, clean **all** of the issues you documented while assessing. \n",
    "\n",
    "**Note:** Make a copy of the original data before cleaning. Cleaning includes merging individual pieces of data according to the rules of [tidy data](https://cran.r-project.org/web/packages/tidyr/vignettes/tidy-data.html). The result should be a high-quality and tidy master pandas DataFrame (or DataFrames, if appropriate)."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Make copies of original pieces of data\n",
    "df_archive_copy = df_tweet.copy()\n",
    "df_image_copy = df_images.copy()\n",
    "df_twitterapi_copy = twitter_data.copy()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 2356 entries, 0 to 2355\n",
      "Data columns (total 17 columns):\n",
      " #   Column                      Non-Null Count  Dtype  \n",
      "---  ------                      --------------  -----  \n",
      " 0   tweet_id                    2356 non-null   int64  \n",
      " 1   in_reply_to_status_id       78 non-null     float64\n",
      " 2   in_reply_to_user_id         78 non-null     float64\n",
      " 3   timestamp                   2356 non-null   object \n",
      " 4   source                      2356 non-null   object \n",
      " 5   text                        2356 non-null   object \n",
      " 6   retweeted_status_id         181 non-null    float64\n",
      " 7   retweeted_status_user_id    181 non-null    float64\n",
      " 8   retweeted_status_timestamp  181 non-null    object \n",
      " 9   expanded_urls               2297 non-null   object \n",
      " 10  rating_numerator            2356 non-null   int64  \n",
      " 11  rating_denominator          2356 non-null   int64  \n",
      " 12  name                        2356 non-null   object \n",
      " 13  doggo                       2356 non-null   object \n",
      " 14  floofer                     2356 non-null   object \n",
      " 15  pupper                      2356 non-null   object \n",
      " 16  puppo                       2356 non-null   object \n",
      "dtypes: float64(4), int64(3), object(10)\n",
      "memory usage: 313.0+ KB\n"
     ]
    }
   ],
   "source": [
    "# Archive info\n",
    "df_archive_copy.info()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>tweet_id</th>\n",
       "      <th>in_reply_to_status_id</th>\n",
       "      <th>in_reply_to_user_id</th>\n",
       "      <th>timestamp</th>\n",
       "      <th>source</th>\n",
       "      <th>text</th>\n",
       "      <th>retweeted_status_id</th>\n",
       "      <th>retweeted_status_user_id</th>\n",
       "      <th>retweeted_status_timestamp</th>\n",
       "      <th>expanded_urls</th>\n",
       "      <th>rating_numerator</th>\n",
       "      <th>rating_denominator</th>\n",
       "      <th>name</th>\n",
       "      <th>doggo</th>\n",
       "      <th>floofer</th>\n",
       "      <th>pupper</th>\n",
       "      <th>puppo</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>892420643555336193</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>2017-08-01 16:23:56 +0000</td>\n",
       "      <td>&lt;a href=\"http://twitter.com/download/iphone\" r...</td>\n",
       "      <td>This is Phineas. He's a mystical boy. Only eve...</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>https://twitter.com/dog_rates/status/892420643...</td>\n",
       "      <td>13</td>\n",
       "      <td>10</td>\n",
       "      <td>Phineas</td>\n",
       "      <td>None</td>\n",
       "      <td>None</td>\n",
       "      <td>None</td>\n",
       "      <td>None</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "             tweet_id  in_reply_to_status_id  in_reply_to_user_id  \\\n",
       "0  892420643555336193                    NaN                  NaN   \n",
       "\n",
       "                   timestamp  \\\n",
       "0  2017-08-01 16:23:56 +0000   \n",
       "\n",
       "                                              source  \\\n",
       "0  <a href=\"http://twitter.com/download/iphone\" r...   \n",
       "\n",
       "                                                text  retweeted_status_id  \\\n",
       "0  This is Phineas. He's a mystical boy. Only eve...                  NaN   \n",
       "\n",
       "   retweeted_status_user_id retweeted_status_timestamp  \\\n",
       "0                       NaN                        NaN   \n",
       "\n",
       "                                       expanded_urls  rating_numerator  \\\n",
       "0  https://twitter.com/dog_rates/status/892420643...                13   \n",
       "\n",
       "   rating_denominator     name doggo floofer pupper puppo  \n",
       "0                  10  Phineas  None    None   None  None  "
      ]
     },
     "execution_count": 17,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_archive_copy.head(1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 2075 entries, 0 to 2074\n",
      "Data columns (total 12 columns):\n",
      " #   Column    Non-Null Count  Dtype  \n",
      "---  ------    --------------  -----  \n",
      " 0   tweet_id  2075 non-null   int64  \n",
      " 1   jpg_url   2075 non-null   object \n",
      " 2   img_num   2075 non-null   int64  \n",
      " 3   p1        2075 non-null   object \n",
      " 4   p1_conf   2075 non-null   float64\n",
      " 5   p1_dog    2075 non-null   bool   \n",
      " 6   p2        2075 non-null   object \n",
      " 7   p2_conf   2075 non-null   float64\n",
      " 8   p2_dog    2075 non-null   bool   \n",
      " 9   p3        2075 non-null   object \n",
      " 10  p3_conf   2075 non-null   float64\n",
      " 11  p3_dog    2075 non-null   bool   \n",
      "dtypes: bool(3), float64(3), int64(2), object(4)\n",
      "memory usage: 152.1+ KB\n"
     ]
    }
   ],
   "source": [
    "# Image info\n",
    "df_image_copy.info()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>tweet_id</th>\n",
       "      <th>jpg_url</th>\n",
       "      <th>img_num</th>\n",
       "      <th>p1</th>\n",
       "      <th>p1_conf</th>\n",
       "      <th>p1_dog</th>\n",
       "      <th>p2</th>\n",
       "      <th>p2_conf</th>\n",
       "      <th>p2_dog</th>\n",
       "      <th>p3</th>\n",
       "      <th>p3_conf</th>\n",
       "      <th>p3_dog</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>666020888022790149</td>\n",
       "      <td>https://pbs.twimg.com/media/CT4udn0WwAA0aMy.jpg</td>\n",
       "      <td>1</td>\n",
       "      <td>Welsh_springer_spaniel</td>\n",
       "      <td>0.465074</td>\n",
       "      <td>True</td>\n",
       "      <td>collie</td>\n",
       "      <td>0.156665</td>\n",
       "      <td>True</td>\n",
       "      <td>Shetland_sheepdog</td>\n",
       "      <td>0.061428</td>\n",
       "      <td>True</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "             tweet_id                                          jpg_url  \\\n",
       "0  666020888022790149  https://pbs.twimg.com/media/CT4udn0WwAA0aMy.jpg   \n",
       "\n",
       "   img_num                      p1   p1_conf  p1_dog      p2   p2_conf  \\\n",
       "0        1  Welsh_springer_spaniel  0.465074    True  collie  0.156665   \n",
       "\n",
       "   p2_dog                 p3   p3_conf  p3_dog  \n",
       "0    True  Shetland_sheepdog  0.061428    True  "
      ]
     },
     "execution_count": 19,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_image_copy.head(1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 2354 entries, 0 to 2353\n",
      "Data columns (total 3 columns):\n",
      " #   Column          Non-Null Count  Dtype \n",
      "---  ------          --------------  ----- \n",
      " 0   tweet_id        2354 non-null   object\n",
      " 1   favorite_count  2354 non-null   object\n",
      " 2   retweet_count   2354 non-null   object\n",
      "dtypes: object(3)\n",
      "memory usage: 55.3+ KB\n"
     ]
    }
   ],
   "source": [
    "# Twitter API\n",
    "df_twitterapi_copy.info()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>tweet_id</th>\n",
       "      <th>favorite_count</th>\n",
       "      <th>retweet_count</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>892420643555336193</td>\n",
       "      <td>39467</td>\n",
       "      <td>8853</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>892177421306343426</td>\n",
       "      <td>33819</td>\n",
       "      <td>6514</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>891815181378084864</td>\n",
       "      <td>25461</td>\n",
       "      <td>4328</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>891689557279858688</td>\n",
       "      <td>42908</td>\n",
       "      <td>8964</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>891327558926688256</td>\n",
       "      <td>41048</td>\n",
       "      <td>9774</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "             tweet_id favorite_count retweet_count\n",
       "0  892420643555336193          39467          8853\n",
       "1  892177421306343426          33819          6514\n",
       "2  891815181378084864          25461          4328\n",
       "3  891689557279858688          42908          8964\n",
       "4  891327558926688256          41048          9774"
      ]
     },
     "execution_count": 21,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_twitterapi_copy.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "metadata": {},
   "outputs": [],
   "source": [
    "df_archive_copy = df_archive_copy[df_archive_copy.retweeted_status_id.isnull()]\n",
    "df_archive_copy = df_archive_copy[df_archive_copy.retweeted_status_user_id.isnull()]\n",
    "df_archive_copy = df_archive_copy[df_archive_copy.retweeted_status_timestamp.isnull()]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "metadata": {},
   "outputs": [],
   "source": [
    "# First replace None in stage columns with empty string as follows.\n",
    "df_archive_copy.doggo.replace('None', '', inplace=True)  # Like this do replacements for all four stages\n",
    "\n",
    "# Then combine stage columns.\n",
    "df_archive_copy['stage'] = df_archive_copy.doggo + df_archive_copy.floofer + df_archive_copy.pupper + df_archive_copy.puppo\n",
    "\n",
    "# Then format entries with multiple dog stages which appeared like doggopupper.\n",
    "\n",
    "df_archive_copy.loc[df_archive_copy.stage == 'doggopupper', 'stage'] = 'doggo,pupper' \n",
    "df_archive_copy.loc[df_archive_copy.stage == 'doggopuppo', 'stage'] = 'doggo,puppo' \n",
    "df_archive_copy.loc[df_archive_copy.stage == 'doggofloofer', 'stage'] = 'doggo,floofer'"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Issue #1: Dropping the useless columns."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Define: 1. Dropping the useless columns."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Code"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "metadata": {},
   "outputs": [],
   "source": [
    "#dropping these columns\n",
    "df_archive_copy.drop(['doggo', 'floofer', 'pupper', 'puppo'], axis = 1, inplace = True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "metadata": {},
   "outputs": [],
   "source": [
    "df_archive_copy.drop(['in_reply_to_status_id', 'in_reply_to_user_id', 'retweeted_status_user_id', \n",
    "           'retweeted_status_timestamp'], axis=1, inplace=True)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Test"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "Int64Index: 2175 entries, 0 to 2355\n",
      "Data columns (total 10 columns):\n",
      " #   Column               Non-Null Count  Dtype  \n",
      "---  ------               --------------  -----  \n",
      " 0   tweet_id             2175 non-null   int64  \n",
      " 1   timestamp            2175 non-null   object \n",
      " 2   source               2175 non-null   object \n",
      " 3   text                 2175 non-null   object \n",
      " 4   retweeted_status_id  0 non-null      float64\n",
      " 5   expanded_urls        2117 non-null   object \n",
      " 6   rating_numerator     2175 non-null   int64  \n",
      " 7   rating_denominator   2175 non-null   int64  \n",
      " 8   name                 2175 non-null   object \n",
      " 9   stage                2175 non-null   object \n",
      "dtypes: float64(1), int64(3), object(6)\n",
      "memory usage: 186.9+ KB\n"
     ]
    }
   ],
   "source": [
    "df_archive_copy.info()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>tweet_id</th>\n",
       "      <th>timestamp</th>\n",
       "      <th>source</th>\n",
       "      <th>text</th>\n",
       "      <th>retweeted_status_id</th>\n",
       "      <th>expanded_urls</th>\n",
       "      <th>rating_numerator</th>\n",
       "      <th>rating_denominator</th>\n",
       "      <th>name</th>\n",
       "      <th>stage</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>892420643555336193</td>\n",
       "      <td>2017-08-01 16:23:56 +0000</td>\n",
       "      <td>&lt;a href=\"http://twitter.com/download/iphone\" r...</td>\n",
       "      <td>This is Phineas. He's a mystical boy. Only eve...</td>\n",
       "      <td>NaN</td>\n",
       "      <td>https://twitter.com/dog_rates/status/892420643...</td>\n",
       "      <td>13</td>\n",
       "      <td>10</td>\n",
       "      <td>Phineas</td>\n",
       "      <td>NoneNoneNone</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>892177421306343426</td>\n",
       "      <td>2017-08-01 00:17:27 +0000</td>\n",
       "      <td>&lt;a href=\"http://twitter.com/download/iphone\" r...</td>\n",
       "      <td>This is Tilly. She's just checking pup on you....</td>\n",
       "      <td>NaN</td>\n",
       "      <td>https://twitter.com/dog_rates/status/892177421...</td>\n",
       "      <td>13</td>\n",
       "      <td>10</td>\n",
       "      <td>Tilly</td>\n",
       "      <td>NoneNoneNone</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>891815181378084864</td>\n",
       "      <td>2017-07-31 00:18:03 +0000</td>\n",
       "      <td>&lt;a href=\"http://twitter.com/download/iphone\" r...</td>\n",
       "      <td>This is Archie. He is a rare Norwegian Pouncin...</td>\n",
       "      <td>NaN</td>\n",
       "      <td>https://twitter.com/dog_rates/status/891815181...</td>\n",
       "      <td>12</td>\n",
       "      <td>10</td>\n",
       "      <td>Archie</td>\n",
       "      <td>NoneNoneNone</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>891689557279858688</td>\n",
       "      <td>2017-07-30 15:58:51 +0000</td>\n",
       "      <td>&lt;a href=\"http://twitter.com/download/iphone\" r...</td>\n",
       "      <td>This is Darla. She commenced a snooze mid meal...</td>\n",
       "      <td>NaN</td>\n",
       "      <td>https://twitter.com/dog_rates/status/891689557...</td>\n",
       "      <td>13</td>\n",
       "      <td>10</td>\n",
       "      <td>Darla</td>\n",
       "      <td>NoneNoneNone</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>891327558926688256</td>\n",
       "      <td>2017-07-29 16:00:24 +0000</td>\n",
       "      <td>&lt;a href=\"http://twitter.com/download/iphone\" r...</td>\n",
       "      <td>This is Franklin. He would like you to stop ca...</td>\n",
       "      <td>NaN</td>\n",
       "      <td>https://twitter.com/dog_rates/status/891327558...</td>\n",
       "      <td>12</td>\n",
       "      <td>10</td>\n",
       "      <td>Franklin</td>\n",
       "      <td>NoneNoneNone</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "             tweet_id                  timestamp  \\\n",
       "0  892420643555336193  2017-08-01 16:23:56 +0000   \n",
       "1  892177421306343426  2017-08-01 00:17:27 +0000   \n",
       "2  891815181378084864  2017-07-31 00:18:03 +0000   \n",
       "3  891689557279858688  2017-07-30 15:58:51 +0000   \n",
       "4  891327558926688256  2017-07-29 16:00:24 +0000   \n",
       "\n",
       "                                              source  \\\n",
       "0  <a href=\"http://twitter.com/download/iphone\" r...   \n",
       "1  <a href=\"http://twitter.com/download/iphone\" r...   \n",
       "2  <a href=\"http://twitter.com/download/iphone\" r...   \n",
       "3  <a href=\"http://twitter.com/download/iphone\" r...   \n",
       "4  <a href=\"http://twitter.com/download/iphone\" r...   \n",
       "\n",
       "                                                text  retweeted_status_id  \\\n",
       "0  This is Phineas. He's a mystical boy. Only eve...                  NaN   \n",
       "1  This is Tilly. She's just checking pup on you....                  NaN   \n",
       "2  This is Archie. He is a rare Norwegian Pouncin...                  NaN   \n",
       "3  This is Darla. She commenced a snooze mid meal...                  NaN   \n",
       "4  This is Franklin. He would like you to stop ca...                  NaN   \n",
       "\n",
       "                                       expanded_urls  rating_numerator  \\\n",
       "0  https://twitter.com/dog_rates/status/892420643...                13   \n",
       "1  https://twitter.com/dog_rates/status/892177421...                13   \n",
       "2  https://twitter.com/dog_rates/status/891815181...                12   \n",
       "3  https://twitter.com/dog_rates/status/891689557...                13   \n",
       "4  https://twitter.com/dog_rates/status/891327558...                12   \n",
       "\n",
       "   rating_denominator      name         stage  \n",
       "0                  10   Phineas  NoneNoneNone  \n",
       "1                  10     Tilly  NoneNoneNone  \n",
       "2                  10    Archie  NoneNoneNone  \n",
       "3                  10     Darla  NoneNoneNone  \n",
       "4                  10  Franklin  NoneNoneNone  "
      ]
     },
     "execution_count": 27,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_archive_copy.head()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Issue #2: String to timestamp to datetime"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "collapsed": true,
    "extensions": {
     "jupyter_dashboards": {
      "version": 1,
      "views": {
       "grid_default": {
        "hidden": true
       },
       "report_default": {
        "hidden": true
       }
      }
     }
    }
   },
   "source": [
    "#### Define converting the string column of timestamp to datetime."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Code"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Convert timestamp to datetime\n",
    "df_archive_copy['timestamp'] = pd.to_datetime(df_archive_copy['timestamp'])\n",
    "\n",
    "# Changing every single type to the timestamp\n",
    "df_archive_copy['year'] = df_archive_copy['timestamp'].dt.year\n",
    "df_archive_copy['month'] = df_archive_copy['timestamp'].dt.month\n",
    "df_archive_copy['day'] = df_archive_copy['timestamp'].dt.day"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Test"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "Int64Index: 2175 entries, 0 to 2355\n",
      "Data columns (total 13 columns):\n",
      " #   Column               Non-Null Count  Dtype              \n",
      "---  ------               --------------  -----              \n",
      " 0   tweet_id             2175 non-null   int64              \n",
      " 1   timestamp            2175 non-null   datetime64[ns, UTC]\n",
      " 2   source               2175 non-null   object             \n",
      " 3   text                 2175 non-null   object             \n",
      " 4   retweeted_status_id  0 non-null      float64            \n",
      " 5   expanded_urls        2117 non-null   object             \n",
      " 6   rating_numerator     2175 non-null   int64              \n",
      " 7   rating_denominator   2175 non-null   int64              \n",
      " 8   name                 2175 non-null   object             \n",
      " 9   stage                2175 non-null   object             \n",
      " 10  year                 2175 non-null   int64              \n",
      " 11  month                2175 non-null   int64              \n",
      " 12  day                  2175 non-null   int64              \n",
      "dtypes: datetime64[ns, UTC](1), float64(1), int64(6), object(5)\n",
      "memory usage: 237.9+ KB\n"
     ]
    }
   ],
   "source": [
    "df_archive_copy.info()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Issue #3: Remove time from timestamp column"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Define by using the date() method."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Code"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "metadata": {},
   "outputs": [],
   "source": [
    "df_archive_copy.timestamp = df_archive_copy.timestamp.apply(lambda x: x.date())"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Test"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>tweet_id</th>\n",
       "      <th>timestamp</th>\n",
       "      <th>source</th>\n",
       "      <th>text</th>\n",
       "      <th>retweeted_status_id</th>\n",
       "      <th>expanded_urls</th>\n",
       "      <th>rating_numerator</th>\n",
       "      <th>rating_denominator</th>\n",
       "      <th>name</th>\n",
       "      <th>stage</th>\n",
       "      <th>year</th>\n",
       "      <th>month</th>\n",
       "      <th>day</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>892420643555336193</td>\n",
       "      <td>2017-08-01</td>\n",
       "      <td>&lt;a href=\"http://twitter.com/download/iphone\" r...</td>\n",
       "      <td>This is Phineas. He's a mystical boy. Only eve...</td>\n",
       "      <td>NaN</td>\n",
       "      <td>https://twitter.com/dog_rates/status/892420643...</td>\n",
       "      <td>13</td>\n",
       "      <td>10</td>\n",
       "      <td>Phineas</td>\n",
       "      <td>NoneNoneNone</td>\n",
       "      <td>2017</td>\n",
       "      <td>8</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>892177421306343426</td>\n",
       "      <td>2017-08-01</td>\n",
       "      <td>&lt;a href=\"http://twitter.com/download/iphone\" r...</td>\n",
       "      <td>This is Tilly. She's just checking pup on you....</td>\n",
       "      <td>NaN</td>\n",
       "      <td>https://twitter.com/dog_rates/status/892177421...</td>\n",
       "      <td>13</td>\n",
       "      <td>10</td>\n",
       "      <td>Tilly</td>\n",
       "      <td>NoneNoneNone</td>\n",
       "      <td>2017</td>\n",
       "      <td>8</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>891815181378084864</td>\n",
       "      <td>2017-07-31</td>\n",
       "      <td>&lt;a href=\"http://twitter.com/download/iphone\" r...</td>\n",
       "      <td>This is Archie. He is a rare Norwegian Pouncin...</td>\n",
       "      <td>NaN</td>\n",
       "      <td>https://twitter.com/dog_rates/status/891815181...</td>\n",
       "      <td>12</td>\n",
       "      <td>10</td>\n",
       "      <td>Archie</td>\n",
       "      <td>NoneNoneNone</td>\n",
       "      <td>2017</td>\n",
       "      <td>7</td>\n",
       "      <td>31</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>891689557279858688</td>\n",
       "      <td>2017-07-30</td>\n",
       "      <td>&lt;a href=\"http://twitter.com/download/iphone\" r...</td>\n",
       "      <td>This is Darla. She commenced a snooze mid meal...</td>\n",
       "      <td>NaN</td>\n",
       "      <td>https://twitter.com/dog_rates/status/891689557...</td>\n",
       "      <td>13</td>\n",
       "      <td>10</td>\n",
       "      <td>Darla</td>\n",
       "      <td>NoneNoneNone</td>\n",
       "      <td>2017</td>\n",
       "      <td>7</td>\n",
       "      <td>30</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>891327558926688256</td>\n",
       "      <td>2017-07-29</td>\n",
       "      <td>&lt;a href=\"http://twitter.com/download/iphone\" r...</td>\n",
       "      <td>This is Franklin. He would like you to stop ca...</td>\n",
       "      <td>NaN</td>\n",
       "      <td>https://twitter.com/dog_rates/status/891327558...</td>\n",
       "      <td>12</td>\n",
       "      <td>10</td>\n",
       "      <td>Franklin</td>\n",
       "      <td>NoneNoneNone</td>\n",
       "      <td>2017</td>\n",
       "      <td>7</td>\n",
       "      <td>29</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "             tweet_id   timestamp  \\\n",
       "0  892420643555336193  2017-08-01   \n",
       "1  892177421306343426  2017-08-01   \n",
       "2  891815181378084864  2017-07-31   \n",
       "3  891689557279858688  2017-07-30   \n",
       "4  891327558926688256  2017-07-29   \n",
       "\n",
       "                                              source  \\\n",
       "0  <a href=\"http://twitter.com/download/iphone\" r...   \n",
       "1  <a href=\"http://twitter.com/download/iphone\" r...   \n",
       "2  <a href=\"http://twitter.com/download/iphone\" r...   \n",
       "3  <a href=\"http://twitter.com/download/iphone\" r...   \n",
       "4  <a href=\"http://twitter.com/download/iphone\" r...   \n",
       "\n",
       "                                                text  retweeted_status_id  \\\n",
       "0  This is Phineas. He's a mystical boy. Only eve...                  NaN   \n",
       "1  This is Tilly. She's just checking pup on you....                  NaN   \n",
       "2  This is Archie. He is a rare Norwegian Pouncin...                  NaN   \n",
       "3  This is Darla. She commenced a snooze mid meal...                  NaN   \n",
       "4  This is Franklin. He would like you to stop ca...                  NaN   \n",
       "\n",
       "                                       expanded_urls  rating_numerator  \\\n",
       "0  https://twitter.com/dog_rates/status/892420643...                13   \n",
       "1  https://twitter.com/dog_rates/status/892177421...                13   \n",
       "2  https://twitter.com/dog_rates/status/891815181...                12   \n",
       "3  https://twitter.com/dog_rates/status/891689557...                13   \n",
       "4  https://twitter.com/dog_rates/status/891327558...                12   \n",
       "\n",
       "   rating_denominator      name         stage  year  month  day  \n",
       "0                  10   Phineas  NoneNoneNone  2017      8    1  \n",
       "1                  10     Tilly  NoneNoneNone  2017      8    1  \n",
       "2                  10    Archie  NoneNoneNone  2017      7   31  \n",
       "3                  10     Darla  NoneNoneNone  2017      7   30  \n",
       "4                  10  Franklin  NoneNoneNone  2017      7   29  "
      ]
     },
     "execution_count": 31,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_archive_copy.head()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Issue #4: Rename timestamp column"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Define by using the rename() method."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Code"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "metadata": {},
   "outputs": [],
   "source": [
    "df_archive_copy = df_archive_copy.rename(columns = {\"timestamp\": \"day_of_tweet\"})"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Test"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>tweet_id</th>\n",
       "      <th>day_of_tweet</th>\n",
       "      <th>source</th>\n",
       "      <th>text</th>\n",
       "      <th>retweeted_status_id</th>\n",
       "      <th>expanded_urls</th>\n",
       "      <th>rating_numerator</th>\n",
       "      <th>rating_denominator</th>\n",
       "      <th>name</th>\n",
       "      <th>stage</th>\n",
       "      <th>year</th>\n",
       "      <th>month</th>\n",
       "      <th>day</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>892420643555336193</td>\n",
       "      <td>2017-08-01</td>\n",
       "      <td>&lt;a href=\"http://twitter.com/download/iphone\" r...</td>\n",
       "      <td>This is Phineas. He's a mystical boy. Only eve...</td>\n",
       "      <td>NaN</td>\n",
       "      <td>https://twitter.com/dog_rates/status/892420643...</td>\n",
       "      <td>13</td>\n",
       "      <td>10</td>\n",
       "      <td>Phineas</td>\n",
       "      <td>NoneNoneNone</td>\n",
       "      <td>2017</td>\n",
       "      <td>8</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "             tweet_id day_of_tweet  \\\n",
       "0  892420643555336193   2017-08-01   \n",
       "\n",
       "                                              source  \\\n",
       "0  <a href=\"http://twitter.com/download/iphone\" r...   \n",
       "\n",
       "                                                text  retweeted_status_id  \\\n",
       "0  This is Phineas. He's a mystical boy. Only eve...                  NaN   \n",
       "\n",
       "                                       expanded_urls  rating_numerator  \\\n",
       "0  https://twitter.com/dog_rates/status/892420643...                13   \n",
       "\n",
       "   rating_denominator     name         stage  year  month  day  \n",
       "0                  10  Phineas  NoneNoneNone  2017      8    1  "
      ]
     },
     "execution_count": 33,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_archive_copy.head(1)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Issue #5: Clean texts"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Define all the symbols will be gone. like &amp  to \"&\", and remove the \\n."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Code"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 34,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "C:\\Users\\yaram\\AppData\\Local\\Temp\\ipykernel_14772\\100261834.py:3: FutureWarning: The default value of regex will change from True to False in a future version.\n",
      "  df_archive_copy['text'] = df_archive_copy.text.str.replace(r\"http\\S+\", \"\")\n"
     ]
    }
   ],
   "source": [
    "df_archive_copy['text'] = df_archive_copy.text.str.replace(\"\\n\", \" \")\n",
    "df_archive_copy['text'] = df_archive_copy.text.str.replace(\"&amp;\", \"&\")\n",
    "df_archive_copy['text'] = df_archive_copy.text.str.replace(r\"http\\S+\", \"\")\n",
    "df_archive_copy['text'] = df_archive_copy.text.str.strip()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Test"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 35,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>tweet_id</th>\n",
       "      <th>day_of_tweet</th>\n",
       "      <th>source</th>\n",
       "      <th>text</th>\n",
       "      <th>retweeted_status_id</th>\n",
       "      <th>expanded_urls</th>\n",
       "      <th>rating_numerator</th>\n",
       "      <th>rating_denominator</th>\n",
       "      <th>name</th>\n",
       "      <th>stage</th>\n",
       "      <th>year</th>\n",
       "      <th>month</th>\n",
       "      <th>day</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>892420643555336193</td>\n",
       "      <td>2017-08-01</td>\n",
       "      <td>&lt;a href=\"http://twitter.com/download/iphone\" r...</td>\n",
       "      <td>This is Phineas. He's a mystical boy. Only eve...</td>\n",
       "      <td>NaN</td>\n",
       "      <td>https://twitter.com/dog_rates/status/892420643...</td>\n",
       "      <td>13</td>\n",
       "      <td>10</td>\n",
       "      <td>Phineas</td>\n",
       "      <td>NoneNoneNone</td>\n",
       "      <td>2017</td>\n",
       "      <td>8</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>892177421306343426</td>\n",
       "      <td>2017-08-01</td>\n",
       "      <td>&lt;a href=\"http://twitter.com/download/iphone\" r...</td>\n",
       "      <td>This is Tilly. She's just checking pup on you....</td>\n",
       "      <td>NaN</td>\n",
       "      <td>https://twitter.com/dog_rates/status/892177421...</td>\n",
       "      <td>13</td>\n",
       "      <td>10</td>\n",
       "      <td>Tilly</td>\n",
       "      <td>NoneNoneNone</td>\n",
       "      <td>2017</td>\n",
       "      <td>8</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>891815181378084864</td>\n",
       "      <td>2017-07-31</td>\n",
       "      <td>&lt;a href=\"http://twitter.com/download/iphone\" r...</td>\n",
       "      <td>This is Archie. He is a rare Norwegian Pouncin...</td>\n",
       "      <td>NaN</td>\n",
       "      <td>https://twitter.com/dog_rates/status/891815181...</td>\n",
       "      <td>12</td>\n",
       "      <td>10</td>\n",
       "      <td>Archie</td>\n",
       "      <td>NoneNoneNone</td>\n",
       "      <td>2017</td>\n",
       "      <td>7</td>\n",
       "      <td>31</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>891689557279858688</td>\n",
       "      <td>2017-07-30</td>\n",
       "      <td>&lt;a href=\"http://twitter.com/download/iphone\" r...</td>\n",
       "      <td>This is Darla. She commenced a snooze mid meal...</td>\n",
       "      <td>NaN</td>\n",
       "      <td>https://twitter.com/dog_rates/status/891689557...</td>\n",
       "      <td>13</td>\n",
       "      <td>10</td>\n",
       "      <td>Darla</td>\n",
       "      <td>NoneNoneNone</td>\n",
       "      <td>2017</td>\n",
       "      <td>7</td>\n",
       "      <td>30</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>891327558926688256</td>\n",
       "      <td>2017-07-29</td>\n",
       "      <td>&lt;a href=\"http://twitter.com/download/iphone\" r...</td>\n",
       "      <td>This is Franklin. He would like you to stop ca...</td>\n",
       "      <td>NaN</td>\n",
       "      <td>https://twitter.com/dog_rates/status/891327558...</td>\n",
       "      <td>12</td>\n",
       "      <td>10</td>\n",
       "      <td>Franklin</td>\n",
       "      <td>NoneNoneNone</td>\n",
       "      <td>2017</td>\n",
       "      <td>7</td>\n",
       "      <td>29</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "             tweet_id day_of_tweet  \\\n",
       "0  892420643555336193   2017-08-01   \n",
       "1  892177421306343426   2017-08-01   \n",
       "2  891815181378084864   2017-07-31   \n",
       "3  891689557279858688   2017-07-30   \n",
       "4  891327558926688256   2017-07-29   \n",
       "\n",
       "                                              source  \\\n",
       "0  <a href=\"http://twitter.com/download/iphone\" r...   \n",
       "1  <a href=\"http://twitter.com/download/iphone\" r...   \n",
       "2  <a href=\"http://twitter.com/download/iphone\" r...   \n",
       "3  <a href=\"http://twitter.com/download/iphone\" r...   \n",
       "4  <a href=\"http://twitter.com/download/iphone\" r...   \n",
       "\n",
       "                                                text  retweeted_status_id  \\\n",
       "0  This is Phineas. He's a mystical boy. Only eve...                  NaN   \n",
       "1  This is Tilly. She's just checking pup on you....                  NaN   \n",
       "2  This is Archie. He is a rare Norwegian Pouncin...                  NaN   \n",
       "3  This is Darla. She commenced a snooze mid meal...                  NaN   \n",
       "4  This is Franklin. He would like you to stop ca...                  NaN   \n",
       "\n",
       "                                       expanded_urls  rating_numerator  \\\n",
       "0  https://twitter.com/dog_rates/status/892420643...                13   \n",
       "1  https://twitter.com/dog_rates/status/892177421...                13   \n",
       "2  https://twitter.com/dog_rates/status/891815181...                12   \n",
       "3  https://twitter.com/dog_rates/status/891689557...                13   \n",
       "4  https://twitter.com/dog_rates/status/891327558...                12   \n",
       "\n",
       "   rating_denominator      name         stage  year  month  day  \n",
       "0                  10   Phineas  NoneNoneNone  2017      8    1  \n",
       "1                  10     Tilly  NoneNoneNone  2017      8    1  \n",
       "2                  10    Archie  NoneNoneNone  2017      7   31  \n",
       "3                  10     Darla  NoneNoneNone  2017      7   30  \n",
       "4                  10  Franklin  NoneNoneNone  2017      7   29  "
      ]
     },
     "execution_count": 35,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_archive_copy.head()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Issue #6: Delete retweets"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Define by the Drop() method too."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Code"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 36,
   "metadata": {},
   "outputs": [],
   "source": [
    "df_archive_copy = df_archive_copy.drop(['retweeted_status_id'], axis = 1)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Test"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 37,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>tweet_id</th>\n",
       "      <th>day_of_tweet</th>\n",
       "      <th>source</th>\n",
       "      <th>text</th>\n",
       "      <th>expanded_urls</th>\n",
       "      <th>rating_numerator</th>\n",
       "      <th>rating_denominator</th>\n",
       "      <th>name</th>\n",
       "      <th>stage</th>\n",
       "      <th>year</th>\n",
       "      <th>month</th>\n",
       "      <th>day</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>892420643555336193</td>\n",
       "      <td>2017-08-01</td>\n",
       "      <td>&lt;a href=\"http://twitter.com/download/iphone\" r...</td>\n",
       "      <td>This is Phineas. He's a mystical boy. Only eve...</td>\n",
       "      <td>https://twitter.com/dog_rates/status/892420643...</td>\n",
       "      <td>13</td>\n",
       "      <td>10</td>\n",
       "      <td>Phineas</td>\n",
       "      <td>NoneNoneNone</td>\n",
       "      <td>2017</td>\n",
       "      <td>8</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "             tweet_id day_of_tweet  \\\n",
       "0  892420643555336193   2017-08-01   \n",
       "\n",
       "                                              source  \\\n",
       "0  <a href=\"http://twitter.com/download/iphone\" r...   \n",
       "\n",
       "                                                text  \\\n",
       "0  This is Phineas. He's a mystical boy. Only eve...   \n",
       "\n",
       "                                       expanded_urls  rating_numerator  \\\n",
       "0  https://twitter.com/dog_rates/status/892420643...                13   \n",
       "\n",
       "   rating_denominator     name         stage  year  month  day  \n",
       "0                  10  Phineas  NoneNoneNone  2017      8    1  "
      ]
     },
     "execution_count": 37,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_archive_copy.head(1)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Issue #7: Check duplication"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Define if there's any. than delete them."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Code"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 38,
   "metadata": {},
   "outputs": [],
   "source": [
    "df_archive_copy.drop_duplicates(inplace = True)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Test"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 39,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "tweet_id              0.0\n",
       "day_of_tweet          0.0\n",
       "source                0.0\n",
       "text                  0.0\n",
       "expanded_urls         0.0\n",
       "rating_numerator      0.0\n",
       "rating_denominator    0.0\n",
       "name                  0.0\n",
       "stage                 0.0\n",
       "year                  0.0\n",
       "month                 0.0\n",
       "day                   0.0\n",
       "dtype: float64"
      ]
     },
     "execution_count": 39,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_archive_copy[df_archive_copy.duplicated()].sum()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Issue #8: Convert to category datatype"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Define Convert from Source datatype to category datatype"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Code"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 40,
   "metadata": {},
   "outputs": [],
   "source": [
    "df_archive_copy.source = df_archive_copy.source.astype(\"category\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Test"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 41,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "Int64Index: 2175 entries, 0 to 2355\n",
      "Data columns (total 12 columns):\n",
      " #   Column              Non-Null Count  Dtype   \n",
      "---  ------              --------------  -----   \n",
      " 0   tweet_id            2175 non-null   int64   \n",
      " 1   day_of_tweet        2175 non-null   object  \n",
      " 2   source              2175 non-null   category\n",
      " 3   text                2175 non-null   object  \n",
      " 4   expanded_urls       2117 non-null   object  \n",
      " 5   rating_numerator    2175 non-null   int64   \n",
      " 6   rating_denominator  2175 non-null   int64   \n",
      " 7   name                2175 non-null   object  \n",
      " 8   stage               2175 non-null   object  \n",
      " 9   year                2175 non-null   int64   \n",
      " 10  month               2175 non-null   int64   \n",
      " 11  day                 2175 non-null   int64   \n",
      "dtypes: category(1), int64(6), object(5)\n",
      "memory usage: 206.2+ KB\n"
     ]
    }
   ],
   "source": [
    "df_archive_copy.info()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Issue #9: Retweet Sources "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Define By seperating every kind into one column"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Code"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 42,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "Int64Index: 2175 entries, 0 to 2355\n",
      "Data columns (total 12 columns):\n",
      " #   Column              Non-Null Count  Dtype   \n",
      "---  ------              --------------  -----   \n",
      " 0   tweet_id            2175 non-null   int64   \n",
      " 1   day_of_tweet        2175 non-null   object  \n",
      " 2   source              2175 non-null   category\n",
      " 3   text                2175 non-null   object  \n",
      " 4   expanded_urls       2117 non-null   object  \n",
      " 5   rating_numerator    2175 non-null   int64   \n",
      " 6   rating_denominator  2175 non-null   int64   \n",
      " 7   name                2175 non-null   object  \n",
      " 8   stage               2175 non-null   object  \n",
      " 9   year                2175 non-null   int64   \n",
      " 10  month               2175 non-null   int64   \n",
      " 11  day                 2175 non-null   int64   \n",
      "dtypes: category(1), int64(6), object(5)\n",
      "memory usage: 206.2+ KB\n"
     ]
    }
   ],
   "source": [
    "df_archive_copy.info()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 43,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<a href=\"http://twitter.com/download/iphone\" rel=\"nofollow\">Twitter for iPhone</a>     2042\n",
       "<a href=\"http://vine.co\" rel=\"nofollow\">Vine - Make a Scene</a>                          91\n",
       "<a href=\"http://twitter.com\" rel=\"nofollow\">Twitter Web Client</a>                       31\n",
       "<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>      11\n",
       "Name: source, dtype: int64"
      ]
     },
     "execution_count": 43,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#checking then first\n",
    "df_archive_copy.source.value_counts()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 44,
   "metadata": {},
   "outputs": [],
   "source": [
    "# clean the source from everything relates to link format\n",
    "df_archive_copy['source'] = df_archive_copy.source.str.extract('(<a href=\"https?)(:\\/\\/)(.+)(\">)(.+)(<\\/a)', \n",
    "                                                                       expand = True)[4];"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Test"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 45,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Twitter for iPhone     2042\n",
       "Vine - Make a Scene      91\n",
       "Twitter Web Client       31\n",
       "TweetDeck                11\n",
       "Name: source, dtype: int64"
      ]
     },
     "execution_count": 45,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_archive_copy.source.value_counts()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Issue #10: incorrect dog names"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Define Dog names not corrected "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Code"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 46,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "a               55\n",
       "actually         2\n",
       "all              1\n",
       "an               6\n",
       "by               1\n",
       "getting          2\n",
       "his              1\n",
       "incredibly       1\n",
       "infuriating      1\n",
       "just             3\n",
       "life             1\n",
       "light            1\n",
       "mad              1\n",
       "my               1\n",
       "not              2\n",
       "officially       1\n",
       "old              1\n",
       "one              4\n",
       "quite            3\n",
       "space            1\n",
       "such             1\n",
       "the              8\n",
       "this             1\n",
       "unacceptable     1\n",
       "very             4\n",
       "Name: name, dtype: int64"
      ]
     },
     "execution_count": 46,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "mask = df_archive_copy.name.str.contains('^[a-z]', regex = True)\n",
    "df_archive_copy[mask].name.value_counts().sort_index()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Tidiness"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Issue #1: Merge all the 3 dataframes"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Define By Merging all the 3 dataframes together into Archive dataframe."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Code"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 47,
   "metadata": {},
   "outputs": [],
   "source": [
    "#but first i will rename it\n",
    "df_twitterapi_copy = df_twitterapi_copy.rename(columns = {\"id_tweet\": \"tweet_id\"})"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 48,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>tweet_id</th>\n",
       "      <th>favorite_count</th>\n",
       "      <th>retweet_count</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>892420643555336193</td>\n",
       "      <td>39467</td>\n",
       "      <td>8853</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "             tweet_id favorite_count retweet_count\n",
       "0  892420643555336193          39467          8853"
      ]
     },
     "execution_count": 48,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_twitterapi_copy.head(1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 49,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 2354 entries, 0 to 2353\n",
      "Data columns (total 3 columns):\n",
      " #   Column          Non-Null Count  Dtype \n",
      "---  ------          --------------  ----- \n",
      " 0   tweet_id        2354 non-null   object\n",
      " 1   favorite_count  2354 non-null   object\n",
      " 2   retweet_count   2354 non-null   object\n",
      "dtypes: object(3)\n",
      "memory usage: 55.3+ KB\n"
     ]
    }
   ],
   "source": [
    "df_twitterapi_copy.info()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 50,
   "metadata": {},
   "outputs": [],
   "source": [
    "#merged archive with image dataframes only (because they have the same datatypes)\n",
    "df_archive_copy = pd.merge(left = df_archive_copy, right = df_image_copy, how = 'left', on = 'tweet_id')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 51,
   "metadata": {},
   "outputs": [],
   "source": [
    "#now because the different datatypes between the 2 dataframes (archive, twitter api), \n",
    "#we cannot merge them until the are the same\n",
    "#so i will change the datatype of ARCHIVE\n",
    "df_archive_copy.tweet_id = df_archive_copy.tweet_id.astype(dtype = 'str')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 52,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 2354 entries, 0 to 2353\n",
      "Data columns (total 3 columns):\n",
      " #   Column          Non-Null Count  Dtype \n",
      "---  ------          --------------  ----- \n",
      " 0   tweet_id        2354 non-null   object\n",
      " 1   favorite_count  2354 non-null   object\n",
      " 2   retweet_count   2354 non-null   object\n",
      "dtypes: object(3)\n",
      "memory usage: 55.3+ KB\n"
     ]
    }
   ],
   "source": [
    "df_twitterapi_copy.info()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 53,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "Int64Index: 2175 entries, 0 to 2174\n",
      "Data columns (total 23 columns):\n",
      " #   Column              Non-Null Count  Dtype  \n",
      "---  ------              --------------  -----  \n",
      " 0   tweet_id            2175 non-null   object \n",
      " 1   day_of_tweet        2175 non-null   object \n",
      " 2   source              2175 non-null   object \n",
      " 3   text                2175 non-null   object \n",
      " 4   expanded_urls       2117 non-null   object \n",
      " 5   rating_numerator    2175 non-null   int64  \n",
      " 6   rating_denominator  2175 non-null   int64  \n",
      " 7   name                2175 non-null   object \n",
      " 8   stage               2175 non-null   object \n",
      " 9   year                2175 non-null   int64  \n",
      " 10  month               2175 non-null   int64  \n",
      " 11  day                 2175 non-null   int64  \n",
      " 12  jpg_url             1994 non-null   object \n",
      " 13  img_num             1994 non-null   float64\n",
      " 14  p1                  1994 non-null   object \n",
      " 15  p1_conf             1994 non-null   float64\n",
      " 16  p1_dog              1994 non-null   object \n",
      " 17  p2                  1994 non-null   object \n",
      " 18  p2_conf             1994 non-null   float64\n",
      " 19  p2_dog              1994 non-null   object \n",
      " 20  p3                  1994 non-null   object \n",
      " 21  p3_conf             1994 non-null   float64\n",
      " 22  p3_dog              1994 non-null   object \n",
      "dtypes: float64(4), int64(5), object(14)\n",
      "memory usage: 407.8+ KB\n"
     ]
    }
   ],
   "source": [
    "df_archive_copy.info()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 54,
   "metadata": {},
   "outputs": [],
   "source": [
    "df_archive_copy = pd.merge(left = df_archive_copy, right = df_twitterapi_copy, how = 'left', on = 'tweet_id')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Test"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 55,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "Int64Index: 2175 entries, 0 to 2174\n",
      "Data columns (total 25 columns):\n",
      " #   Column              Non-Null Count  Dtype  \n",
      "---  ------              --------------  -----  \n",
      " 0   tweet_id            2175 non-null   object \n",
      " 1   day_of_tweet        2175 non-null   object \n",
      " 2   source              2175 non-null   object \n",
      " 3   text                2175 non-null   object \n",
      " 4   expanded_urls       2117 non-null   object \n",
      " 5   rating_numerator    2175 non-null   int64  \n",
      " 6   rating_denominator  2175 non-null   int64  \n",
      " 7   name                2175 non-null   object \n",
      " 8   stage               2175 non-null   object \n",
      " 9   year                2175 non-null   int64  \n",
      " 10  month               2175 non-null   int64  \n",
      " 11  day                 2175 non-null   int64  \n",
      " 12  jpg_url             1994 non-null   object \n",
      " 13  img_num             1994 non-null   float64\n",
      " 14  p1                  1994 non-null   object \n",
      " 15  p1_conf             1994 non-null   float64\n",
      " 16  p1_dog              1994 non-null   object \n",
      " 17  p2                  1994 non-null   object \n",
      " 18  p2_conf             1994 non-null   float64\n",
      " 19  p2_dog              1994 non-null   object \n",
      " 20  p3                  1994 non-null   object \n",
      " 21  p3_conf             1994 non-null   float64\n",
      " 22  p3_dog              1994 non-null   object \n",
      " 23  favorite_count      2175 non-null   object \n",
      " 24  retweet_count       2175 non-null   object \n",
      "dtypes: float64(4), int64(5), object(16)\n",
      "memory usage: 441.8+ KB\n"
     ]
    }
   ],
   "source": [
    "df_archive_copy.info()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Issue #2: Combining dog Stages"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Define clean them and do a (Stages) as menitiond in my review."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Code"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 56,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>tweet_id</th>\n",
       "      <th>in_reply_to_status_id</th>\n",
       "      <th>in_reply_to_user_id</th>\n",
       "      <th>timestamp</th>\n",
       "      <th>source</th>\n",
       "      <th>text</th>\n",
       "      <th>retweeted_status_id</th>\n",
       "      <th>retweeted_status_user_id</th>\n",
       "      <th>retweeted_status_timestamp</th>\n",
       "      <th>expanded_urls</th>\n",
       "      <th>rating_numerator</th>\n",
       "      <th>rating_denominator</th>\n",
       "      <th>name</th>\n",
       "      <th>doggo</th>\n",
       "      <th>floofer</th>\n",
       "      <th>pupper</th>\n",
       "      <th>puppo</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>191</th>\n",
       "      <td>855851453814013952</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>2017-04-22 18:31:02 +0000</td>\n",
       "      <td>&lt;a href=\"http://twitter.com/download/iphone\" r...</td>\n",
       "      <td>Here's a puppo participating in the #ScienceMa...</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>https://twitter.com/dog_rates/status/855851453...</td>\n",
       "      <td>13</td>\n",
       "      <td>10</td>\n",
       "      <td>None</td>\n",
       "      <td>doggo</td>\n",
       "      <td>None</td>\n",
       "      <td>None</td>\n",
       "      <td>puppo</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>200</th>\n",
       "      <td>854010172552949760</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>2017-04-17 16:34:26 +0000</td>\n",
       "      <td>&lt;a href=\"http://twitter.com/download/iphone\" r...</td>\n",
       "      <td>At first I thought this was a shy doggo, but i...</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>https://twitter.com/dog_rates/status/854010172...</td>\n",
       "      <td>11</td>\n",
       "      <td>10</td>\n",
       "      <td>None</td>\n",
       "      <td>doggo</td>\n",
       "      <td>floofer</td>\n",
       "      <td>None</td>\n",
       "      <td>None</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>460</th>\n",
       "      <td>817777686764523521</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>2017-01-07 16:59:28 +0000</td>\n",
       "      <td>&lt;a href=\"http://twitter.com/download/iphone\" r...</td>\n",
       "      <td>This is Dido. She's playing the lead role in \"...</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>https://twitter.com/dog_rates/status/817777686...</td>\n",
       "      <td>13</td>\n",
       "      <td>10</td>\n",
       "      <td>Dido</td>\n",
       "      <td>doggo</td>\n",
       "      <td>None</td>\n",
       "      <td>pupper</td>\n",
       "      <td>None</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>531</th>\n",
       "      <td>808106460588765185</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>2016-12-12 00:29:28 +0000</td>\n",
       "      <td>&lt;a href=\"http://twitter.com/download/iphone\" r...</td>\n",
       "      <td>Here we have Burke (pupper) and Dexter (doggo)...</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>https://twitter.com/dog_rates/status/808106460...</td>\n",
       "      <td>12</td>\n",
       "      <td>10</td>\n",
       "      <td>None</td>\n",
       "      <td>doggo</td>\n",
       "      <td>None</td>\n",
       "      <td>pupper</td>\n",
       "      <td>None</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>565</th>\n",
       "      <td>802265048156610565</td>\n",
       "      <td>7.331095e+17</td>\n",
       "      <td>4.196984e+09</td>\n",
       "      <td>2016-11-25 21:37:47 +0000</td>\n",
       "      <td>&lt;a href=\"http://twitter.com/download/iphone\" r...</td>\n",
       "      <td>Like doggo, like pupper version 2. Both 11/10 ...</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>https://twitter.com/dog_rates/status/802265048...</td>\n",
       "      <td>11</td>\n",
       "      <td>10</td>\n",
       "      <td>None</td>\n",
       "      <td>doggo</td>\n",
       "      <td>None</td>\n",
       "      <td>pupper</td>\n",
       "      <td>None</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>575</th>\n",
       "      <td>801115127852503040</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>2016-11-22 17:28:25 +0000</td>\n",
       "      <td>&lt;a href=\"http://twitter.com/download/iphone\" r...</td>\n",
       "      <td>This is Bones. He's being haunted by another d...</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>https://twitter.com/dog_rates/status/801115127...</td>\n",
       "      <td>12</td>\n",
       "      <td>10</td>\n",
       "      <td>Bones</td>\n",
       "      <td>doggo</td>\n",
       "      <td>None</td>\n",
       "      <td>pupper</td>\n",
       "      <td>None</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>705</th>\n",
       "      <td>785639753186217984</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>2016-10-11 00:34:48 +0000</td>\n",
       "      <td>&lt;a href=\"http://twitter.com/download/iphone\" r...</td>\n",
       "      <td>This is Pinot. He's a sophisticated doggo. You...</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>https://twitter.com/dog_rates/status/785639753...</td>\n",
       "      <td>10</td>\n",
       "      <td>10</td>\n",
       "      <td>Pinot</td>\n",
       "      <td>doggo</td>\n",
       "      <td>None</td>\n",
       "      <td>pupper</td>\n",
       "      <td>None</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>733</th>\n",
       "      <td>781308096455073793</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>2016-09-29 01:42:20 +0000</td>\n",
       "      <td>&lt;a href=\"http://vine.co\" rel=\"nofollow\"&gt;Vine -...</td>\n",
       "      <td>Pupper butt 1, Doggo 0. Both 12/10 https://t.c...</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>https://vine.co/v/5rgu2Law2ut</td>\n",
       "      <td>12</td>\n",
       "      <td>10</td>\n",
       "      <td>None</td>\n",
       "      <td>doggo</td>\n",
       "      <td>None</td>\n",
       "      <td>pupper</td>\n",
       "      <td>None</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>778</th>\n",
       "      <td>775898661951791106</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>2016-09-14 03:27:11 +0000</td>\n",
       "      <td>&lt;a href=\"http://twitter.com/download/iphone\" r...</td>\n",
       "      <td>RT @dog_rates: Like father (doggo), like son (...</td>\n",
       "      <td>7.331095e+17</td>\n",
       "      <td>4.196984e+09</td>\n",
       "      <td>2016-05-19 01:38:16 +0000</td>\n",
       "      <td>https://twitter.com/dog_rates/status/733109485...</td>\n",
       "      <td>12</td>\n",
       "      <td>10</td>\n",
       "      <td>None</td>\n",
       "      <td>doggo</td>\n",
       "      <td>None</td>\n",
       "      <td>pupper</td>\n",
       "      <td>None</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>822</th>\n",
       "      <td>770093767776997377</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>2016-08-29 03:00:36 +0000</td>\n",
       "      <td>&lt;a href=\"http://twitter.com/download/iphone\" r...</td>\n",
       "      <td>RT @dog_rates: This is just downright precious...</td>\n",
       "      <td>7.410673e+17</td>\n",
       "      <td>4.196984e+09</td>\n",
       "      <td>2016-06-10 00:39:48 +0000</td>\n",
       "      <td>https://twitter.com/dog_rates/status/741067306...</td>\n",
       "      <td>12</td>\n",
       "      <td>10</td>\n",
       "      <td>just</td>\n",
       "      <td>doggo</td>\n",
       "      <td>None</td>\n",
       "      <td>pupper</td>\n",
       "      <td>None</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>889</th>\n",
       "      <td>759793422261743616</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>2016-07-31 16:50:42 +0000</td>\n",
       "      <td>&lt;a href=\"http://twitter.com/download/iphone\" r...</td>\n",
       "      <td>Meet Maggie &amp;amp; Lila. Maggie is the doggo, L...</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>https://twitter.com/dog_rates/status/759793422...</td>\n",
       "      <td>12</td>\n",
       "      <td>10</td>\n",
       "      <td>Maggie</td>\n",
       "      <td>doggo</td>\n",
       "      <td>None</td>\n",
       "      <td>pupper</td>\n",
       "      <td>None</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>956</th>\n",
       "      <td>751583847268179968</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>2016-07-09 01:08:47 +0000</td>\n",
       "      <td>&lt;a href=\"http://twitter.com/download/iphone\" r...</td>\n",
       "      <td>Please stop sending it pictures that don't eve...</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>https://twitter.com/dog_rates/status/751583847...</td>\n",
       "      <td>5</td>\n",
       "      <td>10</td>\n",
       "      <td>None</td>\n",
       "      <td>doggo</td>\n",
       "      <td>None</td>\n",
       "      <td>pupper</td>\n",
       "      <td>None</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1063</th>\n",
       "      <td>741067306818797568</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>2016-06-10 00:39:48 +0000</td>\n",
       "      <td>&lt;a href=\"http://twitter.com/download/iphone\" r...</td>\n",
       "      <td>This is just downright precious af. 12/10 for ...</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>https://twitter.com/dog_rates/status/741067306...</td>\n",
       "      <td>12</td>\n",
       "      <td>10</td>\n",
       "      <td>just</td>\n",
       "      <td>doggo</td>\n",
       "      <td>None</td>\n",
       "      <td>pupper</td>\n",
       "      <td>None</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1113</th>\n",
       "      <td>733109485275860992</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>2016-05-19 01:38:16 +0000</td>\n",
       "      <td>&lt;a href=\"http://twitter.com/download/iphone\" r...</td>\n",
       "      <td>Like father (doggo), like son (pupper). Both 1...</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>https://twitter.com/dog_rates/status/733109485...</td>\n",
       "      <td>12</td>\n",
       "      <td>10</td>\n",
       "      <td>None</td>\n",
       "      <td>doggo</td>\n",
       "      <td>None</td>\n",
       "      <td>pupper</td>\n",
       "      <td>None</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                tweet_id  in_reply_to_status_id  in_reply_to_user_id  \\\n",
       "191   855851453814013952                    NaN                  NaN   \n",
       "200   854010172552949760                    NaN                  NaN   \n",
       "460   817777686764523521                    NaN                  NaN   \n",
       "531   808106460588765185                    NaN                  NaN   \n",
       "565   802265048156610565           7.331095e+17         4.196984e+09   \n",
       "575   801115127852503040                    NaN                  NaN   \n",
       "705   785639753186217984                    NaN                  NaN   \n",
       "733   781308096455073793                    NaN                  NaN   \n",
       "778   775898661951791106                    NaN                  NaN   \n",
       "822   770093767776997377                    NaN                  NaN   \n",
       "889   759793422261743616                    NaN                  NaN   \n",
       "956   751583847268179968                    NaN                  NaN   \n",
       "1063  741067306818797568                    NaN                  NaN   \n",
       "1113  733109485275860992                    NaN                  NaN   \n",
       "\n",
       "                      timestamp  \\\n",
       "191   2017-04-22 18:31:02 +0000   \n",
       "200   2017-04-17 16:34:26 +0000   \n",
       "460   2017-01-07 16:59:28 +0000   \n",
       "531   2016-12-12 00:29:28 +0000   \n",
       "565   2016-11-25 21:37:47 +0000   \n",
       "575   2016-11-22 17:28:25 +0000   \n",
       "705   2016-10-11 00:34:48 +0000   \n",
       "733   2016-09-29 01:42:20 +0000   \n",
       "778   2016-09-14 03:27:11 +0000   \n",
       "822   2016-08-29 03:00:36 +0000   \n",
       "889   2016-07-31 16:50:42 +0000   \n",
       "956   2016-07-09 01:08:47 +0000   \n",
       "1063  2016-06-10 00:39:48 +0000   \n",
       "1113  2016-05-19 01:38:16 +0000   \n",
       "\n",
       "                                                 source  \\\n",
       "191   <a href=\"http://twitter.com/download/iphone\" r...   \n",
       "200   <a href=\"http://twitter.com/download/iphone\" r...   \n",
       "460   <a href=\"http://twitter.com/download/iphone\" r...   \n",
       "531   <a href=\"http://twitter.com/download/iphone\" r...   \n",
       "565   <a href=\"http://twitter.com/download/iphone\" r...   \n",
       "575   <a href=\"http://twitter.com/download/iphone\" r...   \n",
       "705   <a href=\"http://twitter.com/download/iphone\" r...   \n",
       "733   <a href=\"http://vine.co\" rel=\"nofollow\">Vine -...   \n",
       "778   <a href=\"http://twitter.com/download/iphone\" r...   \n",
       "822   <a href=\"http://twitter.com/download/iphone\" r...   \n",
       "889   <a href=\"http://twitter.com/download/iphone\" r...   \n",
       "956   <a href=\"http://twitter.com/download/iphone\" r...   \n",
       "1063  <a href=\"http://twitter.com/download/iphone\" r...   \n",
       "1113  <a href=\"http://twitter.com/download/iphone\" r...   \n",
       "\n",
       "                                                   text  retweeted_status_id  \\\n",
       "191   Here's a puppo participating in the #ScienceMa...                  NaN   \n",
       "200   At first I thought this was a shy doggo, but i...                  NaN   \n",
       "460   This is Dido. She's playing the lead role in \"...                  NaN   \n",
       "531   Here we have Burke (pupper) and Dexter (doggo)...                  NaN   \n",
       "565   Like doggo, like pupper version 2. Both 11/10 ...                  NaN   \n",
       "575   This is Bones. He's being haunted by another d...                  NaN   \n",
       "705   This is Pinot. He's a sophisticated doggo. You...                  NaN   \n",
       "733   Pupper butt 1, Doggo 0. Both 12/10 https://t.c...                  NaN   \n",
       "778   RT @dog_rates: Like father (doggo), like son (...         7.331095e+17   \n",
       "822   RT @dog_rates: This is just downright precious...         7.410673e+17   \n",
       "889   Meet Maggie &amp; Lila. Maggie is the doggo, L...                  NaN   \n",
       "956   Please stop sending it pictures that don't eve...                  NaN   \n",
       "1063  This is just downright precious af. 12/10 for ...                  NaN   \n",
       "1113  Like father (doggo), like son (pupper). Both 1...                  NaN   \n",
       "\n",
       "      retweeted_status_user_id retweeted_status_timestamp  \\\n",
       "191                        NaN                        NaN   \n",
       "200                        NaN                        NaN   \n",
       "460                        NaN                        NaN   \n",
       "531                        NaN                        NaN   \n",
       "565                        NaN                        NaN   \n",
       "575                        NaN                        NaN   \n",
       "705                        NaN                        NaN   \n",
       "733                        NaN                        NaN   \n",
       "778               4.196984e+09  2016-05-19 01:38:16 +0000   \n",
       "822               4.196984e+09  2016-06-10 00:39:48 +0000   \n",
       "889                        NaN                        NaN   \n",
       "956                        NaN                        NaN   \n",
       "1063                       NaN                        NaN   \n",
       "1113                       NaN                        NaN   \n",
       "\n",
       "                                          expanded_urls  rating_numerator  \\\n",
       "191   https://twitter.com/dog_rates/status/855851453...                13   \n",
       "200   https://twitter.com/dog_rates/status/854010172...                11   \n",
       "460   https://twitter.com/dog_rates/status/817777686...                13   \n",
       "531   https://twitter.com/dog_rates/status/808106460...                12   \n",
       "565   https://twitter.com/dog_rates/status/802265048...                11   \n",
       "575   https://twitter.com/dog_rates/status/801115127...                12   \n",
       "705   https://twitter.com/dog_rates/status/785639753...                10   \n",
       "733                       https://vine.co/v/5rgu2Law2ut                12   \n",
       "778   https://twitter.com/dog_rates/status/733109485...                12   \n",
       "822   https://twitter.com/dog_rates/status/741067306...                12   \n",
       "889   https://twitter.com/dog_rates/status/759793422...                12   \n",
       "956   https://twitter.com/dog_rates/status/751583847...                 5   \n",
       "1063  https://twitter.com/dog_rates/status/741067306...                12   \n",
       "1113  https://twitter.com/dog_rates/status/733109485...                12   \n",
       "\n",
       "      rating_denominator    name  doggo  floofer  pupper  puppo  \n",
       "191                   10    None  doggo     None    None  puppo  \n",
       "200                   10    None  doggo  floofer    None   None  \n",
       "460                   10    Dido  doggo     None  pupper   None  \n",
       "531                   10    None  doggo     None  pupper   None  \n",
       "565                   10    None  doggo     None  pupper   None  \n",
       "575                   10   Bones  doggo     None  pupper   None  \n",
       "705                   10   Pinot  doggo     None  pupper   None  \n",
       "733                   10    None  doggo     None  pupper   None  \n",
       "778                   10    None  doggo     None  pupper   None  \n",
       "822                   10    just  doggo     None  pupper   None  \n",
       "889                   10  Maggie  doggo     None  pupper   None  \n",
       "956                   10    None  doggo     None  pupper   None  \n",
       "1063                  10    just  doggo     None  pupper   None  \n",
       "1113                  10    None  doggo     None  pupper   None  "
      ]
     },
     "execution_count": 56,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_tweet.loc[(df_tweet[['doggo', 'floofer', 'pupper', 'puppo']] != 'None').sum(axis = 1) > 1]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 57,
   "metadata": {},
   "outputs": [],
   "source": [
    "df_tweet.doggo.replace('None', '', inplace = True)\n",
    "df_tweet.doggo.replace(np.NaN, '', inplace = True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 58,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Remember to convert None to empty string \"\" for all columns prior to\n",
    "# running the following code.\n",
    "\n",
    "df_tweet['stage'] = df_tweet.doggo + df_tweet.floofer + df_tweet.pupper + df_tweet.puppo\n",
    "df_tweet.loc[df_tweet.stage == 'doggopupper', 'stage'] = 'doggo,pupper'\n",
    "df_tweet.loc[df_tweet.stage == 'doggopuppo', 'stage'] = 'doggo,puppo'\n",
    "df_tweet.loc[df_tweet.stage == 'doggofloofer', 'stage'] = 'doggo,floofer'"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Test"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 59,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "NoneNoneNone            1976\n",
       "NonepupperNone           245\n",
       "doggoNoneNoneNone         83\n",
       "NoneNonepuppo             29\n",
       "doggoNonepupperNone       12\n",
       "flooferNoneNone            9\n",
       "doggoNoneNonepuppo         1\n",
       "doggoflooferNoneNone       1\n",
       "Name: stage, dtype: int64"
      ]
     },
     "execution_count": 59,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_tweet.stage.value_counts()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Storing Data\n",
    "Save gathered, assessed, and cleaned master dataset to a CSV file named \"twitter_archive_master.csv\"."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 60,
   "metadata": {},
   "outputs": [],
   "source": [
    "df_archive_copy.to_csv('twitter_archive_master.csv', index = False)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Analyzing and Visualizing Data\n",
    "In this section, analyze and visualize your wrangled data. You must produce at least **three (3) insights and one (1) visualization.**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 61,
   "metadata": {},
   "outputs": [],
   "source": [
    "twitter_archive_master = pd.read_csv('twitter_archive_master.csv')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 62,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 2175 entries, 0 to 2174\n",
      "Data columns (total 25 columns):\n",
      " #   Column              Non-Null Count  Dtype  \n",
      "---  ------              --------------  -----  \n",
      " 0   tweet_id            2175 non-null   int64  \n",
      " 1   day_of_tweet        2175 non-null   object \n",
      " 2   source              2175 non-null   object \n",
      " 3   text                2175 non-null   object \n",
      " 4   expanded_urls       2117 non-null   object \n",
      " 5   rating_numerator    2175 non-null   int64  \n",
      " 6   rating_denominator  2175 non-null   int64  \n",
      " 7   name                2175 non-null   object \n",
      " 8   stage               2175 non-null   object \n",
      " 9   year                2175 non-null   int64  \n",
      " 10  month               2175 non-null   int64  \n",
      " 11  day                 2175 non-null   int64  \n",
      " 12  jpg_url             1994 non-null   object \n",
      " 13  img_num             1994 non-null   float64\n",
      " 14  p1                  1994 non-null   object \n",
      " 15  p1_conf             1994 non-null   float64\n",
      " 16  p1_dog              1994 non-null   object \n",
      " 17  p2                  1994 non-null   object \n",
      " 18  p2_conf             1994 non-null   float64\n",
      " 19  p2_dog              1994 non-null   object \n",
      " 20  p3                  1994 non-null   object \n",
      " 21  p3_conf             1994 non-null   float64\n",
      " 22  p3_dog              1994 non-null   object \n",
      " 23  favorite_count      2175 non-null   int64  \n",
      " 24  retweet_count       2175 non-null   int64  \n",
      "dtypes: float64(4), int64(8), object(13)\n",
      "memory usage: 424.9+ KB\n"
     ]
    }
   ],
   "source": [
    "twitter_archive_master.info()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### since we convert it to csv file. all the datatypes had change to their first datatypes."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 63,
   "metadata": {},
   "outputs": [],
   "source": [
    "# so i'll change them again.\n",
    "twitter_archive_master.tweet_id = df_archive_copy.tweet_id.astype(dtype = 'str')\n",
    "twitter_archive_master.source = df_archive_copy.source.astype(\"category\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 64,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>tweet_id</th>\n",
       "      <th>day_of_tweet</th>\n",
       "      <th>source</th>\n",
       "      <th>text</th>\n",
       "      <th>expanded_urls</th>\n",
       "      <th>rating_numerator</th>\n",
       "      <th>rating_denominator</th>\n",
       "      <th>name</th>\n",
       "      <th>stage</th>\n",
       "      <th>year</th>\n",
       "      <th>...</th>\n",
       "      <th>p1_conf</th>\n",
       "      <th>p1_dog</th>\n",
       "      <th>p2</th>\n",
       "      <th>p2_conf</th>\n",
       "      <th>p2_dog</th>\n",
       "      <th>p3</th>\n",
       "      <th>p3_conf</th>\n",
       "      <th>p3_dog</th>\n",
       "      <th>favorite_count</th>\n",
       "      <th>retweet_count</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>892420643555336193</td>\n",
       "      <td>2017-08-01</td>\n",
       "      <td>Twitter for iPhone</td>\n",
       "      <td>This is Phineas. He's a mystical boy. Only eve...</td>\n",
       "      <td>https://twitter.com/dog_rates/status/892420643...</td>\n",
       "      <td>13</td>\n",
       "      <td>10</td>\n",
       "      <td>Phineas</td>\n",
       "      <td>NoneNoneNone</td>\n",
       "      <td>2017</td>\n",
       "      <td>...</td>\n",
       "      <td>0.097049</td>\n",
       "      <td>False</td>\n",
       "      <td>bagel</td>\n",
       "      <td>0.085851</td>\n",
       "      <td>False</td>\n",
       "      <td>banana</td>\n",
       "      <td>0.07611</td>\n",
       "      <td>False</td>\n",
       "      <td>39467</td>\n",
       "      <td>8853</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>1 rows × 25 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "             tweet_id day_of_tweet              source  \\\n",
       "0  892420643555336193   2017-08-01  Twitter for iPhone   \n",
       "\n",
       "                                                text  \\\n",
       "0  This is Phineas. He's a mystical boy. Only eve...   \n",
       "\n",
       "                                       expanded_urls  rating_numerator  \\\n",
       "0  https://twitter.com/dog_rates/status/892420643...                13   \n",
       "\n",
       "   rating_denominator     name         stage  year  ...   p1_conf  p1_dog  \\\n",
       "0                  10  Phineas  NoneNoneNone  2017  ...  0.097049   False   \n",
       "\n",
       "      p2   p2_conf p2_dog      p3  p3_conf p3_dog  favorite_count  \\\n",
       "0  bagel  0.085851  False  banana  0.07611  False           39467   \n",
       "\n",
       "  retweet_count  \n",
       "0          8853  \n",
       "\n",
       "[1 rows x 25 columns]"
      ]
     },
     "execution_count": 64,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "twitter_archive_master.head(1)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Insights:\n",
    "1. is there any relationship between the favourite and retweet counts? \n",
    "\n",
    "2. How do people mostly interact with WeRateDogs? \n",
    "\n",
    "3. Which dog name is more frequent? \n",
    "\n",
    "4. What is the source for the most retweets?"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "collapsed": true
   },
   "source": [
    "### Visualization"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Insight #1: is there any relationship between the favourite and retweet counts? "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 65,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 800x500 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Plotting a scatterplo\n",
    "colors = [\"#c0abff\"] \n",
    "sns.set_palette(sns.color_palette(colors))\n",
    "sns.lmplot(x = \"favorite_count\", \n",
    "           y = \"retweet_count\", \n",
    "           data = twitter_archive_master,\n",
    "           height = 5,\n",
    "           aspect = 1.6,\n",
    "           scatter_kws = {'alpha':1/3, \"color\": \"#4b3296\"})  #643B9F\n",
    "plt.title('Favourite and Retweet');\n",
    "plt.xlabel('Favourite Count');\n",
    "plt.ylabel('Retweet Count');"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "> As shown in the plot, there is a relationship between favourite and retweet counts. There is actually a strong positive relationship, which means that the majority of twitter users like these types of tweets, and the majority of users will retweet them"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Insight #2: How do people mostly interact with WeRateDogs? "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 66,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1000x1000 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Group the dataframe by the 'source' column and count the number of occurrences\n",
    "source_counts = twitter_archive_master.groupby('source')['tweet_id'].count()\n",
    "# Set the figure size to 10x10\n",
    "fig, ax = plt.subplots(figsize=(10, 10))\n",
    "# Create a pie chart showing the percentage of different sources people use to interact with WeRateDogs\n",
    "plt.pie(source_counts, labels=source_counts.index, autopct='%1.1f%%')\n",
    "plt.title('Tweet Sources')\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Most users retweets from:\n",
    "\n",
    ">  Iphone \n",
    "\n",
    ">  Vine  \n",
    "\n",
    ">  Web client \n",
    "\n",
    ">  TweetDeck "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Insight #3: Which dog name is more frequent? "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 67,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "twitter_archive_master.name.value_counts().nlargest(10).plot(kind='bar')\n",
    "plt.xticks(rotation=60)\n",
    "#To set the title\n",
    "plt.title('DOG NAME FREQUENT')\n",
    "#To set the labels\n",
    "plt.xlabel('Dogs name')\n",
    "plt.ylabel('Count ')\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "> Considering it's impossible for a dog to be named 'A', I'm excluding it since it's just an article. Based on the graph, it is evident that Lucy, Charlie, and Cooper are the most frequently occurring names."
   ]
  }
 ],
 "metadata": {
  "extensions": {
   "jupyter_dashboards": {
    "activeView": "report_default",
    "version": 1,
    "views": {
     "grid_default": {
      "cellMargin": 10,
      "defaultCellHeight": 20,
      "maxColumns": 12,
      "name": "grid",
      "type": "grid"
     },
     "report_default": {
      "name": "report",
      "type": "report"
     }
    }
   }
  },
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.12"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
